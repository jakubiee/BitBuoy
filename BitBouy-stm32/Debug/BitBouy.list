
BitBouy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009428  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  08009568  08009568  0000a568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a78  08009a78  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009a78  08009a78  0000aa78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a80  08009a80  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a80  08009a80  0000aa80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a84  08009a84  0000aa84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009a88  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  200001d4  08009c5c  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b8  08009c5c  0000b6b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011786  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e5d  00000000  00000000  0001c983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  0001f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000beb  00000000  00000000  00020758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d18  00000000  00000000  00021343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014035  00000000  00000000  0003a05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096226  00000000  00000000  0004e090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e42b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005248  00000000  00000000  000e42fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e9544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	08009550 	.word	0x08009550

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	08009550 	.word	0x08009550

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <strcmp>:
 8000190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000198:	2a01      	cmp	r2, #1
 800019a:	bf28      	it	cs
 800019c:	429a      	cmpcs	r2, r3
 800019e:	d0f7      	beq.n	8000190 <strcmp>
 80001a0:	1ad0      	subs	r0, r2, r3
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	@ 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	3c01      	subs	r4, #1
 80002e0:	bf28      	it	cs
 80002e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002e6:	d2e9      	bcs.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmpun>:
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x10>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d10a      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d102      	bne.n	8000a70 <__aeabi_dcmpun+0x20>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0001 	mov.w	r0, #1
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_frsub>:
 8000b6c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b70:	e002      	b.n	8000b78 <__addsf3>
 8000b72:	bf00      	nop

08000b74 <__aeabi_fsub>:
 8000b74:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b78 <__addsf3>:
 8000b78:	0042      	lsls	r2, r0, #1
 8000b7a:	bf1f      	itttt	ne
 8000b7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b80:	ea92 0f03 	teqne	r2, r3
 8000b84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8c:	d06a      	beq.n	8000c64 <__addsf3+0xec>
 8000b8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b96:	bfc1      	itttt	gt
 8000b98:	18d2      	addgt	r2, r2, r3
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	4048      	eorgt	r0, r1
 8000b9e:	4041      	eorgt	r1, r0
 8000ba0:	bfb8      	it	lt
 8000ba2:	425b      	neglt	r3, r3
 8000ba4:	2b19      	cmp	r3, #25
 8000ba6:	bf88      	it	hi
 8000ba8:	4770      	bxhi	lr
 8000baa:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bc2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4249      	negne	r1, r1
 8000bca:	ea92 0f03 	teq	r2, r3
 8000bce:	d03f      	beq.n	8000c50 <__addsf3+0xd8>
 8000bd0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd4:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd8:	eb10 000c 	adds.w	r0, r0, ip
 8000bdc:	f1c3 0320 	rsb	r3, r3, #32
 8000be0:	fa01 f103 	lsl.w	r1, r1, r3
 8000be4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be8:	d502      	bpl.n	8000bf0 <__addsf3+0x78>
 8000bea:	4249      	negs	r1, r1
 8000bec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf4:	d313      	bcc.n	8000c1e <__addsf3+0xa6>
 8000bf6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bfa:	d306      	bcc.n	8000c0a <__addsf3+0x92>
 8000bfc:	0840      	lsrs	r0, r0, #1
 8000bfe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c02:	f102 0201 	add.w	r2, r2, #1
 8000c06:	2afe      	cmp	r2, #254	@ 0xfe
 8000c08:	d251      	bcs.n	8000cae <__addsf3+0x136>
 8000c0a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c12:	bf08      	it	eq
 8000c14:	f020 0001 	biceq.w	r0, r0, #1
 8000c18:	ea40 0003 	orr.w	r0, r0, r3
 8000c1c:	4770      	bx	lr
 8000c1e:	0049      	lsls	r1, r1, #1
 8000c20:	eb40 0000 	adc.w	r0, r0, r0
 8000c24:	3a01      	subs	r2, #1
 8000c26:	bf28      	it	cs
 8000c28:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c2c:	d2ed      	bcs.n	8000c0a <__addsf3+0x92>
 8000c2e:	fab0 fc80 	clz	ip, r0
 8000c32:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c36:	ebb2 020c 	subs.w	r2, r2, ip
 8000c3a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3e:	bfaa      	itet	ge
 8000c40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c44:	4252      	neglt	r2, r2
 8000c46:	4318      	orrge	r0, r3
 8000c48:	bfbc      	itt	lt
 8000c4a:	40d0      	lsrlt	r0, r2
 8000c4c:	4318      	orrlt	r0, r3
 8000c4e:	4770      	bx	lr
 8000c50:	f092 0f00 	teq	r2, #0
 8000c54:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c58:	bf06      	itte	eq
 8000c5a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5e:	3201      	addeq	r2, #1
 8000c60:	3b01      	subne	r3, #1
 8000c62:	e7b5      	b.n	8000bd0 <__addsf3+0x58>
 8000c64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c6c:	bf18      	it	ne
 8000c6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c72:	d021      	beq.n	8000cb8 <__addsf3+0x140>
 8000c74:	ea92 0f03 	teq	r2, r3
 8000c78:	d004      	beq.n	8000c84 <__addsf3+0x10c>
 8000c7a:	f092 0f00 	teq	r2, #0
 8000c7e:	bf08      	it	eq
 8000c80:	4608      	moveq	r0, r1
 8000c82:	4770      	bx	lr
 8000c84:	ea90 0f01 	teq	r0, r1
 8000c88:	bf1c      	itt	ne
 8000c8a:	2000      	movne	r0, #0
 8000c8c:	4770      	bxne	lr
 8000c8e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c92:	d104      	bne.n	8000c9e <__addsf3+0x126>
 8000c94:	0040      	lsls	r0, r0, #1
 8000c96:	bf28      	it	cs
 8000c98:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c9c:	4770      	bx	lr
 8000c9e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ca2:	bf3c      	itt	cc
 8000ca4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca8:	4770      	bxcc	lr
 8000caa:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cae:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cb2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb6:	4770      	bx	lr
 8000cb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cbc:	bf16      	itet	ne
 8000cbe:	4608      	movne	r0, r1
 8000cc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc4:	4601      	movne	r1, r0
 8000cc6:	0242      	lsls	r2, r0, #9
 8000cc8:	bf06      	itte	eq
 8000cca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cce:	ea90 0f01 	teqeq	r0, r1
 8000cd2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_ui2f>:
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	e004      	b.n	8000ce8 <__aeabi_i2f+0x8>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_i2f>:
 8000ce0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce4:	bf48      	it	mi
 8000ce6:	4240      	negmi	r0, r0
 8000ce8:	ea5f 0c00 	movs.w	ip, r0
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf4:	4601      	mov	r1, r0
 8000cf6:	f04f 0000 	mov.w	r0, #0
 8000cfa:	e01c      	b.n	8000d36 <__aeabi_l2f+0x2a>

08000cfc <__aeabi_ul2f>:
 8000cfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000d00:	bf08      	it	eq
 8000d02:	4770      	bxeq	lr
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e00a      	b.n	8000d20 <__aeabi_l2f+0x14>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_l2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d18:	d502      	bpl.n	8000d20 <__aeabi_l2f+0x14>
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	ea5f 0c01 	movs.w	ip, r1
 8000d24:	bf02      	ittt	eq
 8000d26:	4684      	moveq	ip, r0
 8000d28:	4601      	moveq	r1, r0
 8000d2a:	2000      	moveq	r0, #0
 8000d2c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d30:	bf08      	it	eq
 8000d32:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d36:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d3a:	fabc f28c 	clz	r2, ip
 8000d3e:	3a08      	subs	r2, #8
 8000d40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d44:	db10      	blt.n	8000d68 <__aeabi_l2f+0x5c>
 8000d46:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d50:	f1c2 0220 	rsb	r2, r2, #32
 8000d54:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d58:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5c:	eb43 0002 	adc.w	r0, r3, r2
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f102 0220 	add.w	r2, r2, #32
 8000d6c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d70:	f1c2 0220 	rsb	r2, r2, #32
 8000d74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d78:	fa21 f202 	lsr.w	r2, r1, r2
 8000d7c:	eb43 0002 	adc.w	r0, r3, r2
 8000d80:	bf08      	it	eq
 8000d82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_fmul>:
 8000d88:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d90:	bf1e      	ittt	ne
 8000d92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d96:	ea92 0f0c 	teqne	r2, ip
 8000d9a:	ea93 0f0c 	teqne	r3, ip
 8000d9e:	d06f      	beq.n	8000e80 <__aeabi_fmul+0xf8>
 8000da0:	441a      	add	r2, r3
 8000da2:	ea80 0c01 	eor.w	ip, r0, r1
 8000da6:	0240      	lsls	r0, r0, #9
 8000da8:	bf18      	it	ne
 8000daa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dae:	d01e      	beq.n	8000dee <__aeabi_fmul+0x66>
 8000db0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dbc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dc0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc8:	bf3e      	ittt	cc
 8000dca:	0049      	lslcc	r1, r1, #1
 8000dcc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dd0:	005b      	lslcc	r3, r3, #1
 8000dd2:	ea40 0001 	orr.w	r0, r0, r1
 8000dd6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dda:	2afd      	cmp	r2, #253	@ 0xfd
 8000ddc:	d81d      	bhi.n	8000e1a <__aeabi_fmul+0x92>
 8000dde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000de2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de6:	bf08      	it	eq
 8000de8:	f020 0001 	biceq.w	r0, r0, #1
 8000dec:	4770      	bx	lr
 8000dee:	f090 0f00 	teq	r0, #0
 8000df2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df6:	bf08      	it	eq
 8000df8:	0249      	lsleq	r1, r1, #9
 8000dfa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e02:	3a7f      	subs	r2, #127	@ 0x7f
 8000e04:	bfc2      	ittt	gt
 8000e06:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0e:	4770      	bxgt	lr
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	3a01      	subs	r2, #1
 8000e1a:	dc5d      	bgt.n	8000ed8 <__aeabi_fmul+0x150>
 8000e1c:	f112 0f19 	cmn.w	r2, #25
 8000e20:	bfdc      	itt	le
 8000e22:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e26:	4770      	bxle	lr
 8000e28:	f1c2 0200 	rsb	r2, r2, #0
 8000e2c:	0041      	lsls	r1, r0, #1
 8000e2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e32:	f1c2 0220 	rsb	r2, r2, #32
 8000e36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3e:	f140 0000 	adc.w	r0, r0, #0
 8000e42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e46:	bf08      	it	eq
 8000e48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e4c:	4770      	bx	lr
 8000e4e:	f092 0f00 	teq	r2, #0
 8000e52:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e56:	bf02      	ittt	eq
 8000e58:	0040      	lsleq	r0, r0, #1
 8000e5a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5e:	3a01      	subeq	r2, #1
 8000e60:	d0f9      	beq.n	8000e56 <__aeabi_fmul+0xce>
 8000e62:	ea40 000c 	orr.w	r0, r0, ip
 8000e66:	f093 0f00 	teq	r3, #0
 8000e6a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6e:	bf02      	ittt	eq
 8000e70:	0049      	lsleq	r1, r1, #1
 8000e72:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e76:	3b01      	subeq	r3, #1
 8000e78:	d0f9      	beq.n	8000e6e <__aeabi_fmul+0xe6>
 8000e7a:	ea41 010c 	orr.w	r1, r1, ip
 8000e7e:	e78f      	b.n	8000da0 <__aeabi_fmul+0x18>
 8000e80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e84:	ea92 0f0c 	teq	r2, ip
 8000e88:	bf18      	it	ne
 8000e8a:	ea93 0f0c 	teqne	r3, ip
 8000e8e:	d00a      	beq.n	8000ea6 <__aeabi_fmul+0x11e>
 8000e90:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e94:	bf18      	it	ne
 8000e96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e9a:	d1d8      	bne.n	8000e4e <__aeabi_fmul+0xc6>
 8000e9c:	ea80 0001 	eor.w	r0, r0, r1
 8000ea0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea4:	4770      	bx	lr
 8000ea6:	f090 0f00 	teq	r0, #0
 8000eaa:	bf17      	itett	ne
 8000eac:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eb0:	4608      	moveq	r0, r1
 8000eb2:	f091 0f00 	teqne	r1, #0
 8000eb6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eba:	d014      	beq.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ebc:	ea92 0f0c 	teq	r2, ip
 8000ec0:	d101      	bne.n	8000ec6 <__aeabi_fmul+0x13e>
 8000ec2:	0242      	lsls	r2, r0, #9
 8000ec4:	d10f      	bne.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ec6:	ea93 0f0c 	teq	r3, ip
 8000eca:	d103      	bne.n	8000ed4 <__aeabi_fmul+0x14c>
 8000ecc:	024b      	lsls	r3, r1, #9
 8000ece:	bf18      	it	ne
 8000ed0:	4608      	movne	r0, r1
 8000ed2:	d108      	bne.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ed4:	ea80 0001 	eor.w	r0, r0, r1
 8000ed8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000edc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee4:	4770      	bx	lr
 8000ee6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eea:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eee:	4770      	bx	lr

08000ef0 <__aeabi_fdiv>:
 8000ef0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef8:	bf1e      	ittt	ne
 8000efa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efe:	ea92 0f0c 	teqne	r2, ip
 8000f02:	ea93 0f0c 	teqne	r3, ip
 8000f06:	d069      	beq.n	8000fdc <__aeabi_fdiv+0xec>
 8000f08:	eba2 0203 	sub.w	r2, r2, r3
 8000f0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f10:	0249      	lsls	r1, r1, #9
 8000f12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f16:	d037      	beq.n	8000f88 <__aeabi_fdiv+0x98>
 8000f18:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f24:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f28:	428b      	cmp	r3, r1
 8000f2a:	bf38      	it	cc
 8000f2c:	005b      	lslcc	r3, r3, #1
 8000f2e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f32:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f36:	428b      	cmp	r3, r1
 8000f38:	bf24      	itt	cs
 8000f3a:	1a5b      	subcs	r3, r3, r1
 8000f3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f52:	bf24      	itt	cs
 8000f54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f60:	bf24      	itt	cs
 8000f62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	bf18      	it	ne
 8000f6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f72:	d1e0      	bne.n	8000f36 <__aeabi_fdiv+0x46>
 8000f74:	2afd      	cmp	r2, #253	@ 0xfd
 8000f76:	f63f af50 	bhi.w	8000e1a <__aeabi_fmul+0x92>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f80:	bf08      	it	eq
 8000f82:	f020 0001 	biceq.w	r0, r0, #1
 8000f86:	4770      	bx	lr
 8000f88:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f90:	327f      	adds	r2, #127	@ 0x7f
 8000f92:	bfc2      	ittt	gt
 8000f94:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f9c:	4770      	bxgt	lr
 8000f9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	3a01      	subs	r2, #1
 8000fa8:	e737      	b.n	8000e1a <__aeabi_fmul+0x92>
 8000faa:	f092 0f00 	teq	r2, #0
 8000fae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fb2:	bf02      	ittt	eq
 8000fb4:	0040      	lsleq	r0, r0, #1
 8000fb6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fba:	3a01      	subeq	r2, #1
 8000fbc:	d0f9      	beq.n	8000fb2 <__aeabi_fdiv+0xc2>
 8000fbe:	ea40 000c 	orr.w	r0, r0, ip
 8000fc2:	f093 0f00 	teq	r3, #0
 8000fc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fca:	bf02      	ittt	eq
 8000fcc:	0049      	lsleq	r1, r1, #1
 8000fce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fd2:	3b01      	subeq	r3, #1
 8000fd4:	d0f9      	beq.n	8000fca <__aeabi_fdiv+0xda>
 8000fd6:	ea41 010c 	orr.w	r1, r1, ip
 8000fda:	e795      	b.n	8000f08 <__aeabi_fdiv+0x18>
 8000fdc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fe0:	ea92 0f0c 	teq	r2, ip
 8000fe4:	d108      	bne.n	8000ff8 <__aeabi_fdiv+0x108>
 8000fe6:	0242      	lsls	r2, r0, #9
 8000fe8:	f47f af7d 	bne.w	8000ee6 <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	f47f af70 	bne.w	8000ed4 <__aeabi_fmul+0x14c>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e776      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ff8:	ea93 0f0c 	teq	r3, ip
 8000ffc:	d104      	bne.n	8001008 <__aeabi_fdiv+0x118>
 8000ffe:	024b      	lsls	r3, r1, #9
 8001000:	f43f af4c 	beq.w	8000e9c <__aeabi_fmul+0x114>
 8001004:	4608      	mov	r0, r1
 8001006:	e76e      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8001008:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800100c:	bf18      	it	ne
 800100e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001012:	d1ca      	bne.n	8000faa <__aeabi_fdiv+0xba>
 8001014:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001018:	f47f af5c 	bne.w	8000ed4 <__aeabi_fmul+0x14c>
 800101c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001020:	f47f af3c 	bne.w	8000e9c <__aeabi_fmul+0x114>
 8001024:	e75f      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8001026:	bf00      	nop

08001028 <__gesf2>:
 8001028:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800102c:	e006      	b.n	800103c <__cmpsf2+0x4>
 800102e:	bf00      	nop

08001030 <__lesf2>:
 8001030:	f04f 0c01 	mov.w	ip, #1
 8001034:	e002      	b.n	800103c <__cmpsf2+0x4>
 8001036:	bf00      	nop

08001038 <__cmpsf2>:
 8001038:	f04f 0c01 	mov.w	ip, #1
 800103c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001040:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001044:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	bf18      	it	ne
 800104e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001052:	d011      	beq.n	8001078 <__cmpsf2+0x40>
 8001054:	b001      	add	sp, #4
 8001056:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800105a:	bf18      	it	ne
 800105c:	ea90 0f01 	teqne	r0, r1
 8001060:	bf58      	it	pl
 8001062:	ebb2 0003 	subspl.w	r0, r2, r3
 8001066:	bf88      	it	hi
 8001068:	17c8      	asrhi	r0, r1, #31
 800106a:	bf38      	it	cc
 800106c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001070:	bf18      	it	ne
 8001072:	f040 0001 	orrne.w	r0, r0, #1
 8001076:	4770      	bx	lr
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	d102      	bne.n	8001084 <__cmpsf2+0x4c>
 800107e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001082:	d105      	bne.n	8001090 <__cmpsf2+0x58>
 8001084:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001088:	d1e4      	bne.n	8001054 <__cmpsf2+0x1c>
 800108a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108e:	d0e1      	beq.n	8001054 <__cmpsf2+0x1c>
 8001090:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <__aeabi_cfrcmple>:
 8001098:	4684      	mov	ip, r0
 800109a:	4608      	mov	r0, r1
 800109c:	4661      	mov	r1, ip
 800109e:	e7ff      	b.n	80010a0 <__aeabi_cfcmpeq>

080010a0 <__aeabi_cfcmpeq>:
 80010a0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010a2:	f7ff ffc9 	bl	8001038 <__cmpsf2>
 80010a6:	2800      	cmp	r0, #0
 80010a8:	bf48      	it	mi
 80010aa:	f110 0f00 	cmnmi.w	r0, #0
 80010ae:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010b0 <__aeabi_fcmpeq>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff fff4 	bl	80010a0 <__aeabi_cfcmpeq>
 80010b8:	bf0c      	ite	eq
 80010ba:	2001      	moveq	r0, #1
 80010bc:	2000      	movne	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmplt>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffea 	bl	80010a0 <__aeabi_cfcmpeq>
 80010cc:	bf34      	ite	cc
 80010ce:	2001      	movcc	r0, #1
 80010d0:	2000      	movcs	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmple>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffe0 	bl	80010a0 <__aeabi_cfcmpeq>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpge>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffd2 	bl	8001098 <__aeabi_cfrcmple>
 80010f4:	bf94      	ite	ls
 80010f6:	2001      	movls	r0, #1
 80010f8:	2000      	movhi	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_fcmpgt>:
 8001100:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001104:	f7ff ffc8 	bl	8001098 <__aeabi_cfrcmple>
 8001108:	bf34      	ite	cc
 800110a:	2001      	movcc	r0, #1
 800110c:	2000      	movcs	r0, #0
 800110e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001112:	bf00      	nop

08001114 <__aeabi_uldivmod>:
 8001114:	b953      	cbnz	r3, 800112c <__aeabi_uldivmod+0x18>
 8001116:	b94a      	cbnz	r2, 800112c <__aeabi_uldivmod+0x18>
 8001118:	2900      	cmp	r1, #0
 800111a:	bf08      	it	eq
 800111c:	2800      	cmpeq	r0, #0
 800111e:	bf1c      	itt	ne
 8001120:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8001124:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001128:	f000 b968 	b.w	80013fc <__aeabi_idiv0>
 800112c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001130:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001134:	f000 f806 	bl	8001144 <__udivmoddi4>
 8001138:	f8dd e004 	ldr.w	lr, [sp, #4]
 800113c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001140:	b004      	add	sp, #16
 8001142:	4770      	bx	lr

08001144 <__udivmoddi4>:
 8001144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001148:	9d08      	ldr	r5, [sp, #32]
 800114a:	460c      	mov	r4, r1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d14e      	bne.n	80011ee <__udivmoddi4+0xaa>
 8001150:	4694      	mov	ip, r2
 8001152:	458c      	cmp	ip, r1
 8001154:	4686      	mov	lr, r0
 8001156:	fab2 f282 	clz	r2, r2
 800115a:	d962      	bls.n	8001222 <__udivmoddi4+0xde>
 800115c:	b14a      	cbz	r2, 8001172 <__udivmoddi4+0x2e>
 800115e:	f1c2 0320 	rsb	r3, r2, #32
 8001162:	4091      	lsls	r1, r2
 8001164:	fa20 f303 	lsr.w	r3, r0, r3
 8001168:	fa0c fc02 	lsl.w	ip, ip, r2
 800116c:	4319      	orrs	r1, r3
 800116e:	fa00 fe02 	lsl.w	lr, r0, r2
 8001172:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001176:	fbb1 f4f7 	udiv	r4, r1, r7
 800117a:	fb07 1114 	mls	r1, r7, r4, r1
 800117e:	fa1f f68c 	uxth.w	r6, ip
 8001182:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001186:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800118a:	fb04 f106 	mul.w	r1, r4, r6
 800118e:	4299      	cmp	r1, r3
 8001190:	d90a      	bls.n	80011a8 <__udivmoddi4+0x64>
 8001192:	eb1c 0303 	adds.w	r3, ip, r3
 8001196:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800119a:	f080 8110 	bcs.w	80013be <__udivmoddi4+0x27a>
 800119e:	4299      	cmp	r1, r3
 80011a0:	f240 810d 	bls.w	80013be <__udivmoddi4+0x27a>
 80011a4:	3c02      	subs	r4, #2
 80011a6:	4463      	add	r3, ip
 80011a8:	1a59      	subs	r1, r3, r1
 80011aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80011ae:	fb07 1110 	mls	r1, r7, r0, r1
 80011b2:	fb00 f606 	mul.w	r6, r0, r6
 80011b6:	fa1f f38e 	uxth.w	r3, lr
 80011ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011be:	429e      	cmp	r6, r3
 80011c0:	d90a      	bls.n	80011d8 <__udivmoddi4+0x94>
 80011c2:	eb1c 0303 	adds.w	r3, ip, r3
 80011c6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80011ca:	f080 80fa 	bcs.w	80013c2 <__udivmoddi4+0x27e>
 80011ce:	429e      	cmp	r6, r3
 80011d0:	f240 80f7 	bls.w	80013c2 <__udivmoddi4+0x27e>
 80011d4:	4463      	add	r3, ip
 80011d6:	3802      	subs	r0, #2
 80011d8:	2100      	movs	r1, #0
 80011da:	1b9b      	subs	r3, r3, r6
 80011dc:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80011e0:	b11d      	cbz	r5, 80011ea <__udivmoddi4+0xa6>
 80011e2:	40d3      	lsrs	r3, r2
 80011e4:	2200      	movs	r2, #0
 80011e6:	e9c5 3200 	strd	r3, r2, [r5]
 80011ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ee:	428b      	cmp	r3, r1
 80011f0:	d905      	bls.n	80011fe <__udivmoddi4+0xba>
 80011f2:	b10d      	cbz	r5, 80011f8 <__udivmoddi4+0xb4>
 80011f4:	e9c5 0100 	strd	r0, r1, [r5]
 80011f8:	2100      	movs	r1, #0
 80011fa:	4608      	mov	r0, r1
 80011fc:	e7f5      	b.n	80011ea <__udivmoddi4+0xa6>
 80011fe:	fab3 f183 	clz	r1, r3
 8001202:	2900      	cmp	r1, #0
 8001204:	d146      	bne.n	8001294 <__udivmoddi4+0x150>
 8001206:	42a3      	cmp	r3, r4
 8001208:	d302      	bcc.n	8001210 <__udivmoddi4+0xcc>
 800120a:	4290      	cmp	r0, r2
 800120c:	f0c0 80ee 	bcc.w	80013ec <__udivmoddi4+0x2a8>
 8001210:	1a86      	subs	r6, r0, r2
 8001212:	eb64 0303 	sbc.w	r3, r4, r3
 8001216:	2001      	movs	r0, #1
 8001218:	2d00      	cmp	r5, #0
 800121a:	d0e6      	beq.n	80011ea <__udivmoddi4+0xa6>
 800121c:	e9c5 6300 	strd	r6, r3, [r5]
 8001220:	e7e3      	b.n	80011ea <__udivmoddi4+0xa6>
 8001222:	2a00      	cmp	r2, #0
 8001224:	f040 808f 	bne.w	8001346 <__udivmoddi4+0x202>
 8001228:	eba1 040c 	sub.w	r4, r1, ip
 800122c:	2101      	movs	r1, #1
 800122e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001232:	fa1f f78c 	uxth.w	r7, ip
 8001236:	fbb4 f6f8 	udiv	r6, r4, r8
 800123a:	fb08 4416 	mls	r4, r8, r6, r4
 800123e:	fb07 f006 	mul.w	r0, r7, r6
 8001242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001246:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800124a:	4298      	cmp	r0, r3
 800124c:	d908      	bls.n	8001260 <__udivmoddi4+0x11c>
 800124e:	eb1c 0303 	adds.w	r3, ip, r3
 8001252:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8001256:	d202      	bcs.n	800125e <__udivmoddi4+0x11a>
 8001258:	4298      	cmp	r0, r3
 800125a:	f200 80cb 	bhi.w	80013f4 <__udivmoddi4+0x2b0>
 800125e:	4626      	mov	r6, r4
 8001260:	1a1c      	subs	r4, r3, r0
 8001262:	fbb4 f0f8 	udiv	r0, r4, r8
 8001266:	fb08 4410 	mls	r4, r8, r0, r4
 800126a:	fb00 f707 	mul.w	r7, r0, r7
 800126e:	fa1f f38e 	uxth.w	r3, lr
 8001272:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001276:	429f      	cmp	r7, r3
 8001278:	d908      	bls.n	800128c <__udivmoddi4+0x148>
 800127a:	eb1c 0303 	adds.w	r3, ip, r3
 800127e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8001282:	d202      	bcs.n	800128a <__udivmoddi4+0x146>
 8001284:	429f      	cmp	r7, r3
 8001286:	f200 80ae 	bhi.w	80013e6 <__udivmoddi4+0x2a2>
 800128a:	4620      	mov	r0, r4
 800128c:	1bdb      	subs	r3, r3, r7
 800128e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001292:	e7a5      	b.n	80011e0 <__udivmoddi4+0x9c>
 8001294:	f1c1 0720 	rsb	r7, r1, #32
 8001298:	408b      	lsls	r3, r1
 800129a:	fa22 fc07 	lsr.w	ip, r2, r7
 800129e:	ea4c 0c03 	orr.w	ip, ip, r3
 80012a2:	fa24 f607 	lsr.w	r6, r4, r7
 80012a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012aa:	fbb6 f8f9 	udiv	r8, r6, r9
 80012ae:	fa1f fe8c 	uxth.w	lr, ip
 80012b2:	fb09 6618 	mls	r6, r9, r8, r6
 80012b6:	fa20 f307 	lsr.w	r3, r0, r7
 80012ba:	408c      	lsls	r4, r1
 80012bc:	fa00 fa01 	lsl.w	sl, r0, r1
 80012c0:	fb08 f00e 	mul.w	r0, r8, lr
 80012c4:	431c      	orrs	r4, r3
 80012c6:	0c23      	lsrs	r3, r4, #16
 80012c8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80012cc:	4298      	cmp	r0, r3
 80012ce:	fa02 f201 	lsl.w	r2, r2, r1
 80012d2:	d90a      	bls.n	80012ea <__udivmoddi4+0x1a6>
 80012d4:	eb1c 0303 	adds.w	r3, ip, r3
 80012d8:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 80012dc:	f080 8081 	bcs.w	80013e2 <__udivmoddi4+0x29e>
 80012e0:	4298      	cmp	r0, r3
 80012e2:	d97e      	bls.n	80013e2 <__udivmoddi4+0x29e>
 80012e4:	f1a8 0802 	sub.w	r8, r8, #2
 80012e8:	4463      	add	r3, ip
 80012ea:	1a1e      	subs	r6, r3, r0
 80012ec:	fbb6 f3f9 	udiv	r3, r6, r9
 80012f0:	fb09 6613 	mls	r6, r9, r3, r6
 80012f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80012f8:	b2a4      	uxth	r4, r4
 80012fa:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80012fe:	45a6      	cmp	lr, r4
 8001300:	d908      	bls.n	8001314 <__udivmoddi4+0x1d0>
 8001302:	eb1c 0404 	adds.w	r4, ip, r4
 8001306:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800130a:	d266      	bcs.n	80013da <__udivmoddi4+0x296>
 800130c:	45a6      	cmp	lr, r4
 800130e:	d964      	bls.n	80013da <__udivmoddi4+0x296>
 8001310:	3b02      	subs	r3, #2
 8001312:	4464      	add	r4, ip
 8001314:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001318:	fba0 8302 	umull	r8, r3, r0, r2
 800131c:	eba4 040e 	sub.w	r4, r4, lr
 8001320:	429c      	cmp	r4, r3
 8001322:	46c6      	mov	lr, r8
 8001324:	461e      	mov	r6, r3
 8001326:	d350      	bcc.n	80013ca <__udivmoddi4+0x286>
 8001328:	d04d      	beq.n	80013c6 <__udivmoddi4+0x282>
 800132a:	b155      	cbz	r5, 8001342 <__udivmoddi4+0x1fe>
 800132c:	ebba 030e 	subs.w	r3, sl, lr
 8001330:	eb64 0406 	sbc.w	r4, r4, r6
 8001334:	fa04 f707 	lsl.w	r7, r4, r7
 8001338:	40cb      	lsrs	r3, r1
 800133a:	431f      	orrs	r7, r3
 800133c:	40cc      	lsrs	r4, r1
 800133e:	e9c5 7400 	strd	r7, r4, [r5]
 8001342:	2100      	movs	r1, #0
 8001344:	e751      	b.n	80011ea <__udivmoddi4+0xa6>
 8001346:	fa0c fc02 	lsl.w	ip, ip, r2
 800134a:	f1c2 0320 	rsb	r3, r2, #32
 800134e:	40d9      	lsrs	r1, r3
 8001350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001354:	fa20 f303 	lsr.w	r3, r0, r3
 8001358:	fa00 fe02 	lsl.w	lr, r0, r2
 800135c:	fbb1 f0f8 	udiv	r0, r1, r8
 8001360:	fb08 1110 	mls	r1, r8, r0, r1
 8001364:	4094      	lsls	r4, r2
 8001366:	431c      	orrs	r4, r3
 8001368:	fa1f f78c 	uxth.w	r7, ip
 800136c:	0c23      	lsrs	r3, r4, #16
 800136e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001372:	fb00 f107 	mul.w	r1, r0, r7
 8001376:	4299      	cmp	r1, r3
 8001378:	d908      	bls.n	800138c <__udivmoddi4+0x248>
 800137a:	eb1c 0303 	adds.w	r3, ip, r3
 800137e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001382:	d22c      	bcs.n	80013de <__udivmoddi4+0x29a>
 8001384:	4299      	cmp	r1, r3
 8001386:	d92a      	bls.n	80013de <__udivmoddi4+0x29a>
 8001388:	3802      	subs	r0, #2
 800138a:	4463      	add	r3, ip
 800138c:	1a5b      	subs	r3, r3, r1
 800138e:	fbb3 f1f8 	udiv	r1, r3, r8
 8001392:	fb08 3311 	mls	r3, r8, r1, r3
 8001396:	b2a4      	uxth	r4, r4
 8001398:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800139c:	fb01 f307 	mul.w	r3, r1, r7
 80013a0:	42a3      	cmp	r3, r4
 80013a2:	d908      	bls.n	80013b6 <__udivmoddi4+0x272>
 80013a4:	eb1c 0404 	adds.w	r4, ip, r4
 80013a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80013ac:	d213      	bcs.n	80013d6 <__udivmoddi4+0x292>
 80013ae:	42a3      	cmp	r3, r4
 80013b0:	d911      	bls.n	80013d6 <__udivmoddi4+0x292>
 80013b2:	3902      	subs	r1, #2
 80013b4:	4464      	add	r4, ip
 80013b6:	1ae4      	subs	r4, r4, r3
 80013b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013bc:	e73b      	b.n	8001236 <__udivmoddi4+0xf2>
 80013be:	4604      	mov	r4, r0
 80013c0:	e6f2      	b.n	80011a8 <__udivmoddi4+0x64>
 80013c2:	4608      	mov	r0, r1
 80013c4:	e708      	b.n	80011d8 <__udivmoddi4+0x94>
 80013c6:	45c2      	cmp	sl, r8
 80013c8:	d2af      	bcs.n	800132a <__udivmoddi4+0x1e6>
 80013ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80013ce:	eb63 060c 	sbc.w	r6, r3, ip
 80013d2:	3801      	subs	r0, #1
 80013d4:	e7a9      	b.n	800132a <__udivmoddi4+0x1e6>
 80013d6:	4631      	mov	r1, r6
 80013d8:	e7ed      	b.n	80013b6 <__udivmoddi4+0x272>
 80013da:	4603      	mov	r3, r0
 80013dc:	e79a      	b.n	8001314 <__udivmoddi4+0x1d0>
 80013de:	4630      	mov	r0, r6
 80013e0:	e7d4      	b.n	800138c <__udivmoddi4+0x248>
 80013e2:	46b0      	mov	r8, r6
 80013e4:	e781      	b.n	80012ea <__udivmoddi4+0x1a6>
 80013e6:	4463      	add	r3, ip
 80013e8:	3802      	subs	r0, #2
 80013ea:	e74f      	b.n	800128c <__udivmoddi4+0x148>
 80013ec:	4606      	mov	r6, r0
 80013ee:	4623      	mov	r3, r4
 80013f0:	4608      	mov	r0, r1
 80013f2:	e711      	b.n	8001218 <__udivmoddi4+0xd4>
 80013f4:	3e02      	subs	r6, #2
 80013f6:	4463      	add	r3, ip
 80013f8:	e732      	b.n	8001260 <__udivmoddi4+0x11c>
 80013fa:	bf00      	nop

080013fc <__aeabi_idiv0>:
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop

08001400 <HC12_Init>:

static UART_HandleTypeDef *huart_hc12;
static UART_HandleTypeDef *huart_debug;


void HC12_Init(UART_HandleTypeDef *uart_hc12, UART_HandleTypeDef *uart_debug) {
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
    huart_hc12 = uart_hc12;
 800140a:	4a05      	ldr	r2, [pc, #20]	@ (8001420 <HC12_Init+0x20>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6013      	str	r3, [r2, #0]
    huart_debug = uart_debug;
 8001410:	4a04      	ldr	r2, [pc, #16]	@ (8001424 <HC12_Init+0x24>)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	6013      	str	r3, [r2, #0]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	200001f0 	.word	0x200001f0
 8001424:	200001f4 	.word	0x200001f4

08001428 <HC12_Send_Data_With_Confirmation>:

    HAL_Delay(2000);
}


void HC12_Send_Data_With_Confirmation(const char *confirmation_request, const char *message, Queue *q) {
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b0a8      	sub	sp, #160	@ 0xa0
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
    int attempts = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    int max_attempts = 3;
 800143a:	2303      	movs	r3, #3
 800143c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    char received_char;
    char response[20] = {0};
 8001440:	2300      	movs	r3, #0
 8001442:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001444:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]

    while (attempts < max_attempts) {
 8001452:	e0c7      	b.n	80015e4 <HC12_Send_Data_With_Confirmation+0x1bc>
        HAL_UART_Transmit(huart_hc12, (uint8_t*)confirmation_request, strlen(confirmation_request), HAL_MAX_DELAY);
 8001454:	4ba2      	ldr	r3, [pc, #648]	@ (80016e0 <HC12_Send_Data_With_Confirmation+0x2b8>)
 8001456:	681c      	ldr	r4, [r3, #0]
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f7fe fe91 	bl	8000180 <strlen>
 800145e:	4603      	mov	r3, r0
 8001460:	b29a      	uxth	r2, r3
 8001462:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001466:	68f9      	ldr	r1, [r7, #12]
 8001468:	4620      	mov	r0, r4
 800146a:	f004 fb4d 	bl	8005b08 <HAL_UART_Transmit>

        int i = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        memset(response, 0, sizeof(response));
 8001474:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001478:	2214      	movs	r2, #20
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f005 ff50 	bl	8007322 <memset>

        while (HAL_UART_Receive(huart_hc12, (uint8_t*)&received_char, 1, 2000) == HAL_OK) {
 8001482:	e01f      	b.n	80014c4 <HC12_Send_Data_With_Confirmation+0x9c>
            response[i++] = received_char;
 8001484:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800148e:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8001492:	33a0      	adds	r3, #160	@ 0xa0
 8001494:	443b      	add	r3, r7
 8001496:	f803 2c28 	strb.w	r2, [r3, #-40]

            if (huart_debug != NULL) {
 800149a:	4b92      	ldr	r3, [pc, #584]	@ (80016e4 <HC12_Send_Data_With_Confirmation+0x2bc>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d008      	beq.n	80014b4 <HC12_Send_Data_With_Confirmation+0x8c>
                HAL_UART_Transmit(huart_debug, (uint8_t*)&received_char, 1, HAL_MAX_DELAY);
 80014a2:	4b90      	ldr	r3, [pc, #576]	@ (80016e4 <HC12_Send_Data_With_Confirmation+0x2bc>)
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	f107 018f 	add.w	r1, r7, #143	@ 0x8f
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014ae:	2201      	movs	r2, #1
 80014b0:	f004 fb2a 	bl	8005b08 <HAL_UART_Transmit>
            }

            if (received_char == '\n' || i >= sizeof(response) - 1) {
 80014b4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80014b8:	2b0a      	cmp	r3, #10
 80014ba:	d00f      	beq.n	80014dc <HC12_Send_Data_With_Confirmation+0xb4>
 80014bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014c0:	2b12      	cmp	r3, #18
 80014c2:	d80b      	bhi.n	80014dc <HC12_Send_Data_With_Confirmation+0xb4>
        while (HAL_UART_Receive(huart_hc12, (uint8_t*)&received_char, 1, 2000) == HAL_OK) {
 80014c4:	4b86      	ldr	r3, [pc, #536]	@ (80016e0 <HC12_Send_Data_With_Confirmation+0x2b8>)
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	f107 018f 	add.w	r1, r7, #143	@ 0x8f
 80014cc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80014d0:	2201      	movs	r2, #1
 80014d2:	f004 fb9c 	bl	8005c0e <HAL_UART_Receive>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0d3      	beq.n	8001484 <HC12_Send_Data_With_Confirmation+0x5c>
                break;
            }
        }

        int len = strlen(response);
 80014dc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7fe fe4d 	bl	8000180 <strlen>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        while (len > 0 && (response[len - 1] == '\r' || response[len - 1] == '\n')) {
 80014ec:	e00b      	b.n	8001506 <HC12_Send_Data_With_Confirmation+0xde>
            response[--len] = '\0';
 80014ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80014f8:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80014fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001500:	4413      	add	r3, r2
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
        while (len > 0 && (response[len - 1] == '\r' || response[len - 1] == '\n')) {
 8001506:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800150a:	2b00      	cmp	r3, #0
 800150c:	dd11      	ble.n	8001532 <HC12_Send_Data_With_Confirmation+0x10a>
 800150e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001512:	3b01      	subs	r3, #1
 8001514:	33a0      	adds	r3, #160	@ 0xa0
 8001516:	443b      	add	r3, r7
 8001518:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800151c:	2b0d      	cmp	r3, #13
 800151e:	d0e6      	beq.n	80014ee <HC12_Send_Data_With_Confirmation+0xc6>
 8001520:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001524:	3b01      	subs	r3, #1
 8001526:	33a0      	adds	r3, #160	@ 0xa0
 8001528:	443b      	add	r3, r7
 800152a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800152e:	2b0a      	cmp	r3, #10
 8001530:	d0dd      	beq.n	80014ee <HC12_Send_Data_With_Confirmation+0xc6>
        }

        if (strcmp(response, "OK ABCD1234") == 0) {
 8001532:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001536:	496c      	ldr	r1, [pc, #432]	@ (80016e8 <HC12_Send_Data_With_Confirmation+0x2c0>)
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fe29 	bl	8000190 <strcmp>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d12c      	bne.n	800159e <HC12_Send_Data_With_Confirmation+0x176>
            HAL_UART_Transmit(huart_hc12, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8001544:	4b66      	ldr	r3, [pc, #408]	@ (80016e0 <HC12_Send_Data_With_Confirmation+0x2b8>)
 8001546:	681c      	ldr	r4, [r3, #0]
 8001548:	68b8      	ldr	r0, [r7, #8]
 800154a:	f7fe fe19 	bl	8000180 <strlen>
 800154e:	4603      	mov	r3, r0
 8001550:	b29a      	uxth	r2, r3
 8001552:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	4620      	mov	r0, r4
 800155a:	f004 fad5 	bl	8005b08 <HAL_UART_Transmit>

            if (huart_debug != NULL) {
 800155e:	4b61      	ldr	r3, [pc, #388]	@ (80016e4 <HC12_Send_Data_With_Confirmation+0x2bc>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 80b7 	beq.w	80016d6 <HC12_Send_Data_With_Confirmation+0x2ae>
                char confirm[] = "Message sent via HC-12.\r\n";
 8001568:	4b60      	ldr	r3, [pc, #384]	@ (80016ec <HC12_Send_Data_With_Confirmation+0x2c4>)
 800156a:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 800156e:	461d      	mov	r5, r3
 8001570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001574:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001578:	c403      	stmia	r4!, {r0, r1}
 800157a:	8022      	strh	r2, [r4, #0]
                HAL_UART_Transmit(huart_debug, (uint8_t*)confirm, strlen(confirm), HAL_MAX_DELAY);
 800157c:	4b59      	ldr	r3, [pc, #356]	@ (80016e4 <HC12_Send_Data_With_Confirmation+0x2bc>)
 800157e:	681c      	ldr	r4, [r3, #0]
 8001580:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe fdfb 	bl	8000180 <strlen>
 800158a:	4603      	mov	r3, r0
 800158c:	b29a      	uxth	r2, r3
 800158e:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8001592:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001596:	4620      	mov	r0, r4
 8001598:	f004 fab6 	bl	8005b08 <HAL_UART_Transmit>
 800159c:	e09c      	b.n	80016d8 <HC12_Send_Data_With_Confirmation+0x2b0>
            }
            return;
        }

        attempts++;
 800159e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80015a2:	3301      	adds	r3, #1
 80015a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

        if (huart_debug != NULL) {
 80015a8:	4b4e      	ldr	r3, [pc, #312]	@ (80016e4 <HC12_Send_Data_With_Confirmation+0x2bc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d015      	beq.n	80015dc <HC12_Send_Data_With_Confirmation+0x1b4>
            char retry[] = "Retrying...\r\n";
 80015b0:	4b4f      	ldr	r3, [pc, #316]	@ (80016f0 <HC12_Send_Data_With_Confirmation+0x2c8>)
 80015b2:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 80015b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015b8:	c407      	stmia	r4!, {r0, r1, r2}
 80015ba:	8023      	strh	r3, [r4, #0]
            HAL_UART_Transmit(huart_debug, (uint8_t*)retry, strlen(retry), HAL_MAX_DELAY);
 80015bc:	4b49      	ldr	r3, [pc, #292]	@ (80016e4 <HC12_Send_Data_With_Confirmation+0x2bc>)
 80015be:	681c      	ldr	r4, [r3, #0]
 80015c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe fddb 	bl	8000180 <strlen>
 80015ca:	4603      	mov	r3, r0
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015d6:	4620      	mov	r0, r4
 80015d8:	f004 fa96 	bl	8005b08 <HAL_UART_Transmit>
        }

        HAL_Delay(5000);
 80015dc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80015e0:	f001 f994 	bl	800290c <HAL_Delay>
    while (attempts < max_attempts) {
 80015e4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80015e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80015ec:	429a      	cmp	r2, r3
 80015ee:	f6ff af31 	blt.w	8001454 <HC12_Send_Data_With_Confirmation+0x2c>
    }

    if (!enqueue(q, message)) {
 80015f2:	68b9      	ldr	r1, [r7, #8]
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 fd1d 	bl	8002034 <enqueue>
 80015fa:	4603      	mov	r3, r0
 80015fc:	f083 0301 	eor.w	r3, r3, #1
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d021      	beq.n	800164a <HC12_Send_Data_With_Confirmation+0x222>
        if (huart_debug != NULL) {
 8001606:	4b37      	ldr	r3, [pc, #220]	@ (80016e4 <HC12_Send_Data_With_Confirmation+0x2bc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d03d      	beq.n	800168a <HC12_Send_Data_With_Confirmation+0x262>
            char queue_full[] = "Queue is full, cannot add message.\r\n";
 800160e:	4b39      	ldr	r3, [pc, #228]	@ (80016f4 <HC12_Send_Data_With_Confirmation+0x2cc>)
 8001610:	f107 0410 	add.w	r4, r7, #16
 8001614:	461d      	mov	r5, r3
 8001616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800161a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800161c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800161e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001622:	6020      	str	r0, [r4, #0]
 8001624:	3404      	adds	r4, #4
 8001626:	7021      	strb	r1, [r4, #0]
            HAL_UART_Transmit(huart_debug, (uint8_t*)queue_full, strlen(queue_full), HAL_MAX_DELAY);
 8001628:	4b2e      	ldr	r3, [pc, #184]	@ (80016e4 <HC12_Send_Data_With_Confirmation+0x2bc>)
 800162a:	681c      	ldr	r4, [r3, #0]
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe fda5 	bl	8000180 <strlen>
 8001636:	4603      	mov	r3, r0
 8001638:	b29a      	uxth	r2, r3
 800163a:	f107 0110 	add.w	r1, r7, #16
 800163e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001642:	4620      	mov	r0, r4
 8001644:	f004 fa60 	bl	8005b08 <HAL_UART_Transmit>
 8001648:	e01f      	b.n	800168a <HC12_Send_Data_With_Confirmation+0x262>
        }
    } else {
        if (huart_debug != NULL) {
 800164a:	4b26      	ldr	r3, [pc, #152]	@ (80016e4 <HC12_Send_Data_With_Confirmation+0x2bc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d01b      	beq.n	800168a <HC12_Send_Data_With_Confirmation+0x262>
            char message_in_queue[] = "Message added to queue after failed attempts.\r\n";
 8001652:	4b29      	ldr	r3, [pc, #164]	@ (80016f8 <HC12_Send_Data_With_Confirmation+0x2d0>)
 8001654:	f107 0410 	add.w	r4, r7, #16
 8001658:	461d      	mov	r5, r3
 800165a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800165c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800165e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001662:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001666:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            HAL_UART_Transmit(huart_debug, (uint8_t*)message_in_queue, strlen(message_in_queue), HAL_MAX_DELAY);
 800166a:	4b1e      	ldr	r3, [pc, #120]	@ (80016e4 <HC12_Send_Data_With_Confirmation+0x2bc>)
 800166c:	681c      	ldr	r4, [r3, #0]
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fd84 	bl	8000180 <strlen>
 8001678:	4603      	mov	r3, r0
 800167a:	b29a      	uxth	r2, r3
 800167c:	f107 0110 	add.w	r1, r7, #16
 8001680:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001684:	4620      	mov	r0, r4
 8001686:	f004 fa3f 	bl	8005b08 <HAL_UART_Transmit>
        }
    }

    if (huart_debug != NULL) {
 800168a:	4b16      	ldr	r3, [pc, #88]	@ (80016e4 <HC12_Send_Data_With_Confirmation+0x2bc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d022      	beq.n	80016d8 <HC12_Send_Data_With_Confirmation+0x2b0>
        char error[] = "Failed to send message after 3 attempts, added to queue.\r\n";
 8001692:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <HC12_Send_Data_With_Confirmation+0x2d4>)
 8001694:	f107 0410 	add.w	r4, r7, #16
 8001698:	461d      	mov	r5, r3
 800169a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016aa:	c403      	stmia	r4!, {r0, r1}
 80016ac:	8022      	strh	r2, [r4, #0]
 80016ae:	3402      	adds	r4, #2
 80016b0:	0c13      	lsrs	r3, r2, #16
 80016b2:	7023      	strb	r3, [r4, #0]
        HAL_UART_Transmit(huart_debug, (uint8_t*)error, strlen(error), HAL_MAX_DELAY);
 80016b4:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <HC12_Send_Data_With_Confirmation+0x2bc>)
 80016b6:	681c      	ldr	r4, [r3, #0]
 80016b8:	f107 0310 	add.w	r3, r7, #16
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe fd5f 	bl	8000180 <strlen>
 80016c2:	4603      	mov	r3, r0
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	f107 0110 	add.w	r1, r7, #16
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016ce:	4620      	mov	r0, r4
 80016d0:	f004 fa1a 	bl	8005b08 <HAL_UART_Transmit>
 80016d4:	e000      	b.n	80016d8 <HC12_Send_Data_With_Confirmation+0x2b0>
            return;
 80016d6:	bf00      	nop
    }
}
 80016d8:	37a0      	adds	r7, #160	@ 0xa0
 80016da:	46bd      	mov	sp, r7
 80016dc:	bdb0      	pop	{r4, r5, r7, pc}
 80016de:	bf00      	nop
 80016e0:	200001f0 	.word	0x200001f0
 80016e4:	200001f4 	.word	0x200001f4
 80016e8:	08009584 	.word	0x08009584
 80016ec:	08009568 	.word	0x08009568
 80016f0:	08009590 	.word	0x08009590
 80016f4:	080095a0 	.word	0x080095a0
 80016f8:	080095c8 	.word	0x080095c8
 80016fc:	080095f8 	.word	0x080095f8

08001700 <HTS221_ReadCalibration>:
#include "hts221.h"

static HTS221_Calibration_t hts221_cal;

void HTS221_ReadCalibration(I2C_HandleTypeDef *hi2c) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b08c      	sub	sp, #48	@ 0x30
 8001704:	af04      	add	r7, sp, #16
 8001706:	6078      	str	r0, [r7, #4]
    uint8_t buffer[16];
    uint8_t t0_t1_msb;

    HAL_I2C_Mem_Read(hi2c, HTS221_ADDRESS_READ, 0x30 | 0x80, I2C_MEMADD_SIZE_8BIT, buffer, 16, HAL_MAX_DELAY);
 8001708:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800170c:	9302      	str	r3, [sp, #8]
 800170e:	2310      	movs	r3, #16
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2301      	movs	r3, #1
 800171a:	22b0      	movs	r2, #176	@ 0xb0
 800171c:	21bf      	movs	r1, #191	@ 0xbf
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f002 fa3a 	bl	8003b98 <HAL_I2C_Mem_Read>

    hts221_cal.H0_rH_x2 = buffer[0];
 8001724:	7c3a      	ldrb	r2, [r7, #16]
 8001726:	4b4c      	ldr	r3, [pc, #304]	@ (8001858 <HTS221_ReadCalibration+0x158>)
 8001728:	701a      	strb	r2, [r3, #0]
    hts221_cal.H1_rH_x2 = buffer[1];
 800172a:	7c7a      	ldrb	r2, [r7, #17]
 800172c:	4b4a      	ldr	r3, [pc, #296]	@ (8001858 <HTS221_ReadCalibration+0x158>)
 800172e:	705a      	strb	r2, [r3, #1]
    hts221_cal.T0_degC_x8 = buffer[2];
 8001730:	7cbb      	ldrb	r3, [r7, #18]
 8001732:	461a      	mov	r2, r3
 8001734:	4b48      	ldr	r3, [pc, #288]	@ (8001858 <HTS221_ReadCalibration+0x158>)
 8001736:	805a      	strh	r2, [r3, #2]
    hts221_cal.T1_degC_x8 = buffer[3];
 8001738:	7cfb      	ldrb	r3, [r7, #19]
 800173a:	461a      	mov	r2, r3
 800173c:	4b46      	ldr	r3, [pc, #280]	@ (8001858 <HTS221_ReadCalibration+0x158>)
 800173e:	809a      	strh	r2, [r3, #4]

    HAL_I2C_Mem_Read(hi2c, HTS221_ADDRESS_READ, 0x35, I2C_MEMADD_SIZE_8BIT, &t0_t1_msb, 1, HAL_MAX_DELAY);
 8001740:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001744:	9302      	str	r3, [sp, #8]
 8001746:	2301      	movs	r3, #1
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	f107 030f 	add.w	r3, r7, #15
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2301      	movs	r3, #1
 8001752:	2235      	movs	r2, #53	@ 0x35
 8001754:	21bf      	movs	r1, #191	@ 0xbf
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f002 fa1e 	bl	8003b98 <HAL_I2C_Mem_Read>

    hts221_cal.T0_degC_x8 |= (uint16_t)(t0_t1_msb & 0x03) << 8;
 800175c:	4b3e      	ldr	r3, [pc, #248]	@ (8001858 <HTS221_ReadCalibration+0x158>)
 800175e:	885b      	ldrh	r3, [r3, #2]
 8001760:	b21a      	sxth	r2, r3
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	b21b      	sxth	r3, r3
 8001768:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800176c:	b21b      	sxth	r3, r3
 800176e:	4313      	orrs	r3, r2
 8001770:	b21b      	sxth	r3, r3
 8001772:	b29a      	uxth	r2, r3
 8001774:	4b38      	ldr	r3, [pc, #224]	@ (8001858 <HTS221_ReadCalibration+0x158>)
 8001776:	805a      	strh	r2, [r3, #2]
    hts221_cal.T1_degC_x8 |= (uint16_t)((t0_t1_msb & 0x0C) >> 2) << 8;
 8001778:	4b37      	ldr	r3, [pc, #220]	@ (8001858 <HTS221_ReadCalibration+0x158>)
 800177a:	889b      	ldrh	r3, [r3, #4]
 800177c:	b21a      	sxth	r2, r3
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	109b      	asrs	r3, r3, #2
 8001782:	b29b      	uxth	r3, r3
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	b21b      	sxth	r3, r3
 8001788:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800178c:	b21b      	sxth	r3, r3
 800178e:	4313      	orrs	r3, r2
 8001790:	b21b      	sxth	r3, r3
 8001792:	b29a      	uxth	r2, r3
 8001794:	4b30      	ldr	r3, [pc, #192]	@ (8001858 <HTS221_ReadCalibration+0x158>)
 8001796:	809a      	strh	r2, [r3, #4]

    HAL_I2C_Mem_Read(hi2c, HTS221_ADDRESS_READ, 0x36 | 0x80, I2C_MEMADD_SIZE_8BIT, buffer, 2, HAL_MAX_DELAY);
 8001798:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800179c:	9302      	str	r3, [sp, #8]
 800179e:	2302      	movs	r3, #2
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	2301      	movs	r3, #1
 80017aa:	22b6      	movs	r2, #182	@ 0xb6
 80017ac:	21bf      	movs	r1, #191	@ 0xbf
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f002 f9f2 	bl	8003b98 <HAL_I2C_Mem_Read>
    hts221_cal.H0_T0_OUT = (int16_t)(buffer[1] << 8 | buffer[0]);
 80017b4:	7c7b      	ldrb	r3, [r7, #17]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	b21a      	sxth	r2, r3
 80017ba:	7c3b      	ldrb	r3, [r7, #16]
 80017bc:	b21b      	sxth	r3, r3
 80017be:	4313      	orrs	r3, r2
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	4b25      	ldr	r3, [pc, #148]	@ (8001858 <HTS221_ReadCalibration+0x158>)
 80017c4:	80da      	strh	r2, [r3, #6]

    HAL_I2C_Mem_Read(hi2c, HTS221_ADDRESS_READ, 0x3A | 0x80, I2C_MEMADD_SIZE_8BIT, buffer, 2, HAL_MAX_DELAY);
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017ca:	9302      	str	r3, [sp, #8]
 80017cc:	2302      	movs	r3, #2
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	2301      	movs	r3, #1
 80017d8:	22ba      	movs	r2, #186	@ 0xba
 80017da:	21bf      	movs	r1, #191	@ 0xbf
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f002 f9db 	bl	8003b98 <HAL_I2C_Mem_Read>
    hts221_cal.H1_T0_OUT = (int16_t)(buffer[1] << 8 | buffer[0]);
 80017e2:	7c7b      	ldrb	r3, [r7, #17]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	7c3b      	ldrb	r3, [r7, #16]
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	4313      	orrs	r3, r2
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HTS221_ReadCalibration+0x158>)
 80017f2:	811a      	strh	r2, [r3, #8]

    HAL_I2C_Mem_Read(hi2c, HTS221_ADDRESS_READ, 0x3C | 0x80, I2C_MEMADD_SIZE_8BIT, buffer, 2, HAL_MAX_DELAY);
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017f8:	9302      	str	r3, [sp, #8]
 80017fa:	2302      	movs	r3, #2
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	f107 0310 	add.w	r3, r7, #16
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2301      	movs	r3, #1
 8001806:	22bc      	movs	r2, #188	@ 0xbc
 8001808:	21bf      	movs	r1, #191	@ 0xbf
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f002 f9c4 	bl	8003b98 <HAL_I2C_Mem_Read>
    hts221_cal.T0_OUT = (int16_t)(buffer[1] << 8 | buffer[0]);
 8001810:	7c7b      	ldrb	r3, [r7, #17]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	b21a      	sxth	r2, r3
 8001816:	7c3b      	ldrb	r3, [r7, #16]
 8001818:	b21b      	sxth	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	b21a      	sxth	r2, r3
 800181e:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <HTS221_ReadCalibration+0x158>)
 8001820:	815a      	strh	r2, [r3, #10]

    HAL_I2C_Mem_Read(hi2c, HTS221_ADDRESS_READ, 0x3E | 0x80, I2C_MEMADD_SIZE_8BIT, buffer, 2, HAL_MAX_DELAY);
 8001822:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001826:	9302      	str	r3, [sp, #8]
 8001828:	2302      	movs	r3, #2
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2301      	movs	r3, #1
 8001834:	22be      	movs	r2, #190	@ 0xbe
 8001836:	21bf      	movs	r1, #191	@ 0xbf
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f002 f9ad 	bl	8003b98 <HAL_I2C_Mem_Read>
    hts221_cal.T1_OUT = (int16_t)(buffer[1] << 8 | buffer[0]);
 800183e:	7c7b      	ldrb	r3, [r7, #17]
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	b21a      	sxth	r2, r3
 8001844:	7c3b      	ldrb	r3, [r7, #16]
 8001846:	b21b      	sxth	r3, r3
 8001848:	4313      	orrs	r3, r2
 800184a:	b21a      	sxth	r2, r3
 800184c:	4b02      	ldr	r3, [pc, #8]	@ (8001858 <HTS221_ReadCalibration+0x158>)
 800184e:	819a      	strh	r2, [r3, #12]
}
 8001850:	bf00      	nop
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	200001f8 	.word	0x200001f8

0800185c <HTS221_ReadHumidity>:

float HTS221_ReadHumidity(I2C_HandleTypeDef *hi2c) {
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b08d      	sub	sp, #52	@ 0x34
 8001860:	af04      	add	r7, sp, #16
 8001862:	6078      	str	r0, [r7, #4]
    uint8_t buffer[2];
    HAL_I2C_Mem_Read(hi2c, HTS221_ADDRESS_READ, HTS221_HUMIDITY_OUT_L | 0x80, I2C_MEMADD_SIZE_8BIT, buffer, 2, HAL_MAX_DELAY);
 8001864:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001868:	9302      	str	r3, [sp, #8]
 800186a:	2302      	movs	r3, #2
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2301      	movs	r3, #1
 8001876:	22a8      	movs	r2, #168	@ 0xa8
 8001878:	21bf      	movs	r1, #191	@ 0xbf
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f002 f98c 	bl	8003b98 <HAL_I2C_Mem_Read>

    int16_t H_OUT = (int16_t)(buffer[1] << 8 | buffer[0]);
 8001880:	7b7b      	ldrb	r3, [r7, #13]
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	b21a      	sxth	r2, r3
 8001886:	7b3b      	ldrb	r3, [r7, #12]
 8001888:	b21b      	sxth	r3, r3
 800188a:	4313      	orrs	r3, r2
 800188c:	837b      	strh	r3, [r7, #26]

    float H0_rH = hts221_cal.H0_rH_x2 / 2.0f;
 800188e:	4b2f      	ldr	r3, [pc, #188]	@ (800194c <HTS221_ReadHumidity+0xf0>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fa24 	bl	8000ce0 <__aeabi_i2f>
 8001898:	4603      	mov	r3, r0
 800189a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fb26 	bl	8000ef0 <__aeabi_fdiv>
 80018a4:	4603      	mov	r3, r0
 80018a6:	617b      	str	r3, [r7, #20]
    float H1_rH = hts221_cal.H1_rH_x2 / 2.0f;
 80018a8:	4b28      	ldr	r3, [pc, #160]	@ (800194c <HTS221_ReadHumidity+0xf0>)
 80018aa:	785b      	ldrb	r3, [r3, #1]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fa17 	bl	8000ce0 <__aeabi_i2f>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fb19 	bl	8000ef0 <__aeabi_fdiv>
 80018be:	4603      	mov	r3, r0
 80018c0:	613b      	str	r3, [r7, #16]

    float humidity = (H_OUT - hts221_cal.H0_T0_OUT) * (H1_rH - H0_rH) / (hts221_cal.H1_T0_OUT - hts221_cal.H0_T0_OUT) + H0_rH;
 80018c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80018c6:	4a21      	ldr	r2, [pc, #132]	@ (800194c <HTS221_ReadHumidity+0xf0>)
 80018c8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80018cc:	1a9b      	subs	r3, r3, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fa06 	bl	8000ce0 <__aeabi_i2f>
 80018d4:	4604      	mov	r4, r0
 80018d6:	6979      	ldr	r1, [r7, #20]
 80018d8:	6938      	ldr	r0, [r7, #16]
 80018da:	f7ff f94b 	bl	8000b74 <__aeabi_fsub>
 80018de:	4603      	mov	r3, r0
 80018e0:	4619      	mov	r1, r3
 80018e2:	4620      	mov	r0, r4
 80018e4:	f7ff fa50 	bl	8000d88 <__aeabi_fmul>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461c      	mov	r4, r3
 80018ec:	4b17      	ldr	r3, [pc, #92]	@ (800194c <HTS221_ReadHumidity+0xf0>)
 80018ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b15      	ldr	r3, [pc, #84]	@ (800194c <HTS221_ReadHumidity+0xf0>)
 80018f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff f9ef 	bl	8000ce0 <__aeabi_i2f>
 8001902:	4603      	mov	r3, r0
 8001904:	4619      	mov	r1, r3
 8001906:	4620      	mov	r0, r4
 8001908:	f7ff faf2 	bl	8000ef0 <__aeabi_fdiv>
 800190c:	4603      	mov	r3, r0
 800190e:	4619      	mov	r1, r3
 8001910:	6978      	ldr	r0, [r7, #20]
 8001912:	f7ff f931 	bl	8000b78 <__addsf3>
 8001916:	4603      	mov	r3, r0
 8001918:	61fb      	str	r3, [r7, #28]

    if (humidity < 0) humidity = 0;
 800191a:	f04f 0100 	mov.w	r1, #0
 800191e:	69f8      	ldr	r0, [r7, #28]
 8001920:	f7ff fbd0 	bl	80010c4 <__aeabi_fcmplt>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <HTS221_ReadHumidity+0xd4>
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
    if (humidity > 100) humidity = 100;
 8001930:	4907      	ldr	r1, [pc, #28]	@ (8001950 <HTS221_ReadHumidity+0xf4>)
 8001932:	69f8      	ldr	r0, [r7, #28]
 8001934:	f7ff fbe4 	bl	8001100 <__aeabi_fcmpgt>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HTS221_ReadHumidity+0xe6>
 800193e:	4b04      	ldr	r3, [pc, #16]	@ (8001950 <HTS221_ReadHumidity+0xf4>)
 8001940:	61fb      	str	r3, [r7, #28]

    return humidity;
 8001942:	69fb      	ldr	r3, [r7, #28]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3724      	adds	r7, #36	@ 0x24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd90      	pop	{r4, r7, pc}
 800194c:	200001f8 	.word	0x200001f8
 8001950:	42c80000 	.word	0x42c80000

08001954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001958:	b0b8      	sub	sp, #224	@ 0xe0
 800195a:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195c:	f000 ff67 	bl	800282e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001960:	f000 f8f4 	bl	8001b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001964:	f000 fa94 	bl	8001e90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001968:	f000 fa3e 	bl	8001de8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800196c:	f000 fa66 	bl	8001e3c <MX_USART3_UART_Init>
  MX_ADC_Init();
 8001970:	f000 f950 	bl	8001c14 <MX_ADC_Init>
  MX_RTC_Init();
 8001974:	f000 f9d4 	bl	8001d20 <MX_RTC_Init>
  MX_I2C1_Init();
 8001978:	f000 f9a4 	bl	8001cc4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  init_queue(&message_queue);
 800197c:	4867      	ldr	r0, [pc, #412]	@ (8001b1c <main+0x1c8>)
 800197e:	f000 fb31 	bl	8001fe4 <init_queue>
  STLM75_HandleTypeDef stlm75;
  STLM75_Init(&stlm75, &hi2c1);
 8001982:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001986:	4966      	ldr	r1, [pc, #408]	@ (8001b20 <main+0x1cc>)
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fb99 	bl	80020c0 <STLM75_Init>
  HC12_Init(&huart3, &huart2);
 800198e:	4965      	ldr	r1, [pc, #404]	@ (8001b24 <main+0x1d0>)
 8001990:	4865      	ldr	r0, [pc, #404]	@ (8001b28 <main+0x1d4>)
 8001992:	f7ff fd35 	bl	8001400 <HC12_Init>
  TDS_Sensor_Init(&hadc);
 8001996:	4865      	ldr	r0, [pc, #404]	@ (8001b2c <main+0x1d8>)
 8001998:	f000 fe50 	bl	800263c <TDS_Sensor_Init>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800199c:	2200      	movs	r2, #0
 800199e:	f245 010b 	movw	r1, #20491	@ 0x500b
 80019a2:	4863      	ldr	r0, [pc, #396]	@ (8001b30 <main+0x1dc>)
 80019a4:	f003 ff7c 	bl	80058a0 <HAL_RTCEx_SetWakeUpTimer_IT>

  HTS221_ReadCalibration(&hi2c1);
 80019a8:	485d      	ldr	r0, [pc, #372]	@ (8001b20 <main+0x1cc>)
 80019aa:	f7ff fea9 	bl	8001700 <HTS221_ReadCalibration>
  float temp = 0;
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_SuspendTick();
 80019b6:	f000 ffcb 	bl	8002950 <HAL_SuspendTick>

	    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80019ba:	4b5e      	ldr	r3, [pc, #376]	@ (8001b34 <main+0x1e0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a5d      	ldr	r2, [pc, #372]	@ (8001b34 <main+0x1e0>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	6013      	str	r3, [r2, #0]
	    HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80019c6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80019ca:	f002 fde1 	bl	8004590 <HAL_PWR_EnableWakeUpPin>

	    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80019ce:	2101      	movs	r1, #1
 80019d0:	2001      	movs	r0, #1
 80019d2:	f002 fdf9 	bl	80045c8 <HAL_PWR_EnterSTOPMode>

	    SystemClock_Config();
 80019d6:	f000 f8b9 	bl	8001b4c <SystemClock_Config>

	    HAL_ResumeTick();
 80019da:	f000 ffc7 	bl	800296c <HAL_ResumeTick>

	    if (wakeup_counter >= 60) {
 80019de:	4b56      	ldr	r3, [pc, #344]	@ (8001b38 <main+0x1e4>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b3b      	cmp	r3, #59	@ 0x3b
 80019e6:	d9e6      	bls.n	80019b6 <main+0x62>
	        wakeup_counter = 0;
 80019e8:	4b53      	ldr	r3, [pc, #332]	@ (8001b38 <main+0x1e4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]

	        HAL_Delay(1000);
 80019ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019f2:	f000 ff8b 	bl	800290c <HAL_Delay>

	        float humidity = HTS221_ReadHumidity(&hi2c1);
 80019f6:	484a      	ldr	r0, [pc, #296]	@ (8001b20 <main+0x1cc>)
 80019f8:	f7ff ff30 	bl	800185c <HTS221_ReadHumidity>
 80019fc:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

	        float tds_value = TDS_Sensor_Read();
 8001a00:	f000 fec6 	bl	8002790 <TDS_Sensor_Read>
 8001a04:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc

	        float temperature = 0.0f;
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	        if (STLM75_ReadTemperature(&stlm75, &temperature) == HAL_OK) {
 8001a10:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8001a14:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 fb5e 	bl	80020dc <STLM75_ReadTemperature>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d129      	bne.n	8001a7a <main+0x126>
	            char uart_buffer[128];
	            sprintf(uart_buffer, "Temperature: %.2f°C, TDS: %.2f, Humidity: %.2f%%\r\n", temperature, tds_value, humidity);
 8001a26:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fd1e 	bl	800046c <__aeabi_f2d>
 8001a30:	4680      	mov	r8, r0
 8001a32:	4689      	mov	r9, r1
 8001a34:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001a38:	f7fe fd18 	bl	800046c <__aeabi_f2d>
 8001a3c:	4604      	mov	r4, r0
 8001a3e:	460d      	mov	r5, r1
 8001a40:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8001a44:	f7fe fd12 	bl	800046c <__aeabi_f2d>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4638      	mov	r0, r7
 8001a4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a52:	e9cd 4500 	strd	r4, r5, [sp]
 8001a56:	4642      	mov	r2, r8
 8001a58:	464b      	mov	r3, r9
 8001a5a:	4938      	ldr	r1, [pc, #224]	@ (8001b3c <main+0x1e8>)
 8001a5c:	f005 fb6c 	bl	8007138 <siprintf>
	            HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001a60:	463b      	mov	r3, r7
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fb8c 	bl	8000180 <strlen>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	4639      	mov	r1, r7
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a72:	482c      	ldr	r0, [pc, #176]	@ (8001b24 <main+0x1d0>)
 8001a74:	f004 f848 	bl	8005b08 <HAL_UART_Transmit>
 8001a78:	e016      	b.n	8001aa8 <main+0x154>
	        } else {
	            char error_message[] = "Failed to read temperature from STLM75\r\n";
 8001a7a:	4b31      	ldr	r3, [pc, #196]	@ (8001b40 <main+0x1ec>)
 8001a7c:	463c      	mov	r4, r7
 8001a7e:	461d      	mov	r5, r3
 8001a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a8c:	c403      	stmia	r4!, {r0, r1}
 8001a8e:	7022      	strb	r2, [r4, #0]
	            HAL_UART_Transmit(&huart2, (uint8_t*)error_message, strlen(error_message), HAL_MAX_DELAY);
 8001a90:	463b      	mov	r3, r7
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fb74 	bl	8000180 <strlen>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	4639      	mov	r1, r7
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aa2:	4820      	ldr	r0, [pc, #128]	@ (8001b24 <main+0x1d0>)
 8001aa4:	f004 f830 	bl	8005b08 <HAL_UART_Transmit>
	        }

	        char message[128];
	        sprintf(message, "ABCD1234,%.2f,%.2f,%.2f,%.2f,50.730066,18.106040,1730239978",
 8001aa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fcdd 	bl	800046c <__aeabi_f2d>
 8001ab2:	4682      	mov	sl, r0
 8001ab4:	468b      	mov	fp, r1
 8001ab6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fcd6 	bl	800046c <__aeabi_f2d>
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	460d      	mov	r5, r1
 8001ac4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001ac8:	f7fe fcd0 	bl	800046c <__aeabi_f2d>
 8001acc:	4680      	mov	r8, r0
 8001ace:	4689      	mov	r9, r1
 8001ad0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8001ad4:	f7fe fcca 	bl	800046c <__aeabi_f2d>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4638      	mov	r0, r7
 8001ade:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ae2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001ae6:	e9cd 4500 	strd	r4, r5, [sp]
 8001aea:	4652      	mov	r2, sl
 8001aec:	465b      	mov	r3, fp
 8001aee:	4915      	ldr	r1, [pc, #84]	@ (8001b44 <main+0x1f0>)
 8001af0:	f005 fb22 	bl	8007138 <siprintf>
	                temperature, temperature, tds_value, humidity);

	        HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8001af4:	463b      	mov	r3, r7
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fb42 	bl	8000180 <strlen>
 8001afc:	4603      	mov	r3, r0
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	4639      	mov	r1, r7
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b06:	4807      	ldr	r0, [pc, #28]	@ (8001b24 <main+0x1d0>)
 8001b08:	f003 fffe 	bl	8005b08 <HAL_UART_Transmit>

	        HC12_Send_Data_With_Confirmation("REQUEST ABCD1234", message, &message_queue);
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	4a03      	ldr	r2, [pc, #12]	@ (8001b1c <main+0x1c8>)
 8001b10:	4619      	mov	r1, r3
 8001b12:	480d      	ldr	r0, [pc, #52]	@ (8001b48 <main+0x1f4>)
 8001b14:	f7ff fc88 	bl	8001428 <HC12_Send_Data_With_Confirmation>
	    HAL_SuspendTick();
 8001b18:	e74d      	b.n	80019b6 <main+0x62>
 8001b1a:	bf00      	nop
 8001b1c:	20000208 	.word	0x20000208
 8001b20:	2000045c 	.word	0x2000045c
 8001b24:	200004d0 	.word	0x200004d0
 8001b28:	20000518 	.word	0x20000518
 8001b2c:	20000408 	.word	0x20000408
 8001b30:	200004b0 	.word	0x200004b0
 8001b34:	40007000 	.word	0x40007000
 8001b38:	20000206 	.word	0x20000206
 8001b3c:	08009634 	.word	0x08009634
 8001b40:	080096b8 	.word	0x080096b8
 8001b44:	08009668 	.word	0x08009668
 8001b48:	080096a4 	.word	0x080096a4

08001b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b096      	sub	sp, #88	@ 0x58
 8001b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b56:	2234      	movs	r2, #52	@ 0x34
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f005 fbe1 	bl	8007322 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b60:	f107 0310 	add.w	r3, r7, #16
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b7a:	4b25      	ldr	r3, [pc, #148]	@ (8001c10 <SystemClock_Config+0xc4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8001b82:	4a23      	ldr	r2, [pc, #140]	@ (8001c10 <SystemClock_Config+0xc4>)
 8001b84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b88:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001b8a:	2306      	movs	r3, #6
 8001b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b92:	2301      	movs	r3, #1
 8001b94:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b96:	2310      	movs	r3, #16
 8001b98:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001ba2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001ba6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001ba8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001bac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f002 fd34 	bl	8004620 <HAL_RCC_OscConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001bbe:	f000 fa0b 	bl	8001fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc2:	230f      	movs	r3, #15
 8001bc4:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bd6:	f107 0310 	add.w	r3, r7, #16
 8001bda:	2101      	movs	r1, #1
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f003 f84f 	bl	8004c80 <HAL_RCC_ClockConfig>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001be8:	f000 f9f6 	bl	8001fd8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bec:	2301      	movs	r3, #1
 8001bee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001bf0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bf4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f003 fb07 	bl	800520c <HAL_RCCEx_PeriphCLKConfig>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001c04:	f000 f9e8 	bl	8001fd8 <Error_Handler>
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3758      	adds	r7, #88	@ 0x58
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40007000 	.word	0x40007000

08001c14 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001c24:	4b25      	ldr	r3, [pc, #148]	@ (8001cbc <MX_ADC_Init+0xa8>)
 8001c26:	4a26      	ldr	r2, [pc, #152]	@ (8001cc0 <MX_ADC_Init+0xac>)
 8001c28:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c2a:	4b24      	ldr	r3, [pc, #144]	@ (8001cbc <MX_ADC_Init+0xa8>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001c30:	4b22      	ldr	r3, [pc, #136]	@ (8001cbc <MX_ADC_Init+0xa8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c36:	4b21      	ldr	r3, [pc, #132]	@ (8001cbc <MX_ADC_Init+0xa8>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cbc <MX_ADC_Init+0xa8>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001c42:	4b1e      	ldr	r3, [pc, #120]	@ (8001cbc <MX_ADC_Init+0xa8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001c48:	4b1c      	ldr	r3, [pc, #112]	@ (8001cbc <MX_ADC_Init+0xa8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cbc <MX_ADC_Init+0xa8>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001c54:	4b19      	ldr	r3, [pc, #100]	@ (8001cbc <MX_ADC_Init+0xa8>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001c5a:	4b18      	ldr	r3, [pc, #96]	@ (8001cbc <MX_ADC_Init+0xa8>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8001c62:	4b16      	ldr	r3, [pc, #88]	@ (8001cbc <MX_ADC_Init+0xa8>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001c68:	4b14      	ldr	r3, [pc, #80]	@ (8001cbc <MX_ADC_Init+0xa8>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c70:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <MX_ADC_Init+0xa8>)
 8001c72:	2210      	movs	r2, #16
 8001c74:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c76:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <MX_ADC_Init+0xa8>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cbc <MX_ADC_Init+0xa8>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001c84:	480d      	ldr	r0, [pc, #52]	@ (8001cbc <MX_ADC_Init+0xa8>)
 8001c86:	f000 fe7f 	bl	8002988 <HAL_ADC_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8001c90:	f000 f9a2 	bl	8001fd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001c94:	230a      	movs	r3, #10
 8001c96:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4805      	ldr	r0, [pc, #20]	@ (8001cbc <MX_ADC_Init+0xa8>)
 8001ca6:	f001 f8dd 	bl	8002e64 <HAL_ADC_ConfigChannel>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001cb0:	f000 f992 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000408 	.word	0x20000408
 8001cc0:	40012400 	.word	0x40012400

08001cc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cc8:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cca:	4a13      	ldr	r2, [pc, #76]	@ (8001d18 <MX_I2C1_Init+0x54>)
 8001ccc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cce:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cd0:	4a12      	ldr	r2, [pc, #72]	@ (8001d1c <MX_I2C1_Init+0x58>)
 8001cd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cda:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001ce2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ce6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cee:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf4:	4b07      	ldr	r3, [pc, #28]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cfa:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d00:	4804      	ldr	r0, [pc, #16]	@ (8001d14 <MX_I2C1_Init+0x50>)
 8001d02:	f001 fe05 	bl	8003910 <HAL_I2C_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d0c:	f000 f964 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	2000045c 	.word	0x2000045c
 8001d18:	40005400 	.word	0x40005400
 8001d1c:	000186a0 	.word	0x000186a0

08001d20 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001d34:	2300      	movs	r3, #0
 8001d36:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d38:	4b29      	ldr	r3, [pc, #164]	@ (8001de0 <MX_RTC_Init+0xc0>)
 8001d3a:	4a2a      	ldr	r2, [pc, #168]	@ (8001de4 <MX_RTC_Init+0xc4>)
 8001d3c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d3e:	4b28      	ldr	r3, [pc, #160]	@ (8001de0 <MX_RTC_Init+0xc0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001d44:	4b26      	ldr	r3, [pc, #152]	@ (8001de0 <MX_RTC_Init+0xc0>)
 8001d46:	227f      	movs	r2, #127	@ 0x7f
 8001d48:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d4a:	4b25      	ldr	r3, [pc, #148]	@ (8001de0 <MX_RTC_Init+0xc0>)
 8001d4c:	22ff      	movs	r2, #255	@ 0xff
 8001d4e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d50:	4b23      	ldr	r3, [pc, #140]	@ (8001de0 <MX_RTC_Init+0xc0>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d56:	4b22      	ldr	r3, [pc, #136]	@ (8001de0 <MX_RTC_Init+0xc0>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d5c:	4b20      	ldr	r3, [pc, #128]	@ (8001de0 <MX_RTC_Init+0xc0>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d62:	481f      	ldr	r0, [pc, #124]	@ (8001de0 <MX_RTC_Init+0xc0>)
 8001d64:	f003 fb5c 	bl	8005420 <HAL_RTC_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001d6e:	f000 f933 	bl	8001fd8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	2201      	movs	r2, #1
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4814      	ldr	r0, [pc, #80]	@ (8001de0 <MX_RTC_Init+0xc0>)
 8001d8e:	f003 fbca 	bl	8005526 <HAL_RTC_SetTime>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001d98:	f000 f91e 	bl	8001fd8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001da0:	2301      	movs	r3, #1
 8001da2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001da4:	2301      	movs	r3, #1
 8001da6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001dac:	463b      	mov	r3, r7
 8001dae:	2201      	movs	r2, #1
 8001db0:	4619      	mov	r1, r3
 8001db2:	480b      	ldr	r0, [pc, #44]	@ (8001de0 <MX_RTC_Init+0xc0>)
 8001db4:	f003 fc51 	bl	800565a <HAL_RTC_SetDate>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001dbe:	f000 f90b 	bl	8001fd8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f245 010b 	movw	r1, #20491	@ 0x500b
 8001dc8:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <MX_RTC_Init+0xc0>)
 8001dca:	f003 fd69 	bl	80058a0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8001dd4:	f000 f900 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	200004b0 	.word	0x200004b0
 8001de4:	40002800 	.word	0x40002800

08001de8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dec:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	@ (8001e38 <MX_USART2_UART_Init+0x50>)
 8001df0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001df2:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001df4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001df8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e0e:	220c      	movs	r2, #12
 8001e10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e12:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e1e:	4805      	ldr	r0, [pc, #20]	@ (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e20:	f003 fe22 	bl	8005a68 <HAL_UART_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e2a:	f000 f8d5 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200004d0 	.word	0x200004d0
 8001e38:	40004400 	.word	0x40004400

08001e3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e40:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <MX_USART3_UART_Init+0x4c>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	@ (8001e8c <MX_USART3_UART_Init+0x50>)
 8001e44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <MX_USART3_UART_Init+0x4c>)
 8001e48:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <MX_USART3_UART_Init+0x4c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	@ (8001e88 <MX_USART3_UART_Init+0x4c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <MX_USART3_UART_Init+0x4c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e60:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <MX_USART3_UART_Init+0x4c>)
 8001e62:	220c      	movs	r2, #12
 8001e64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e66:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <MX_USART3_UART_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <MX_USART3_UART_Init+0x4c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	@ (8001e88 <MX_USART3_UART_Init+0x4c>)
 8001e74:	f003 fdf8 	bl	8005a68 <HAL_UART_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e7e:	f000 f8ab 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000518 	.word	0x20000518
 8001e8c:	40004800 	.word	0x40004800

08001e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	@ 0x28
 8001e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]
 8001ea4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea6:	4b2e      	ldr	r3, [pc, #184]	@ (8001f60 <MX_GPIO_Init+0xd0>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8001f60 <MX_GPIO_Init+0xd0>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	61d3      	str	r3, [r2, #28]
 8001eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001f60 <MX_GPIO_Init+0xd0>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ebe:	4b28      	ldr	r3, [pc, #160]	@ (8001f60 <MX_GPIO_Init+0xd0>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a27      	ldr	r2, [pc, #156]	@ (8001f60 <MX_GPIO_Init+0xd0>)
 8001ec4:	f043 0320 	orr.w	r3, r3, #32
 8001ec8:	61d3      	str	r3, [r2, #28]
 8001eca:	4b25      	ldr	r3, [pc, #148]	@ (8001f60 <MX_GPIO_Init+0xd0>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 0320 	and.w	r3, r3, #32
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	4b22      	ldr	r3, [pc, #136]	@ (8001f60 <MX_GPIO_Init+0xd0>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	4a21      	ldr	r2, [pc, #132]	@ (8001f60 <MX_GPIO_Init+0xd0>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	61d3      	str	r3, [r2, #28]
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <MX_GPIO_Init+0xd0>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eee:	4b1c      	ldr	r3, [pc, #112]	@ (8001f60 <MX_GPIO_Init+0xd0>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f60 <MX_GPIO_Init+0xd0>)
 8001ef4:	f043 0302 	orr.w	r3, r3, #2
 8001ef8:	61d3      	str	r3, [r2, #28]
 8001efa:	4b19      	ldr	r3, [pc, #100]	@ (8001f60 <MX_GPIO_Init+0xd0>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2120      	movs	r1, #32
 8001f0a:	4816      	ldr	r0, [pc, #88]	@ (8001f64 <MX_GPIO_Init+0xd4>)
 8001f0c:	f001 fcd0 	bl	80038b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f16:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	4810      	ldr	r0, [pc, #64]	@ (8001f68 <MX_GPIO_Init+0xd8>)
 8001f28:	f001 fb32 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f30:	2301      	movs	r3, #1
 8001f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	4619      	mov	r1, r3
 8001f42:	4808      	ldr	r0, [pc, #32]	@ (8001f64 <MX_GPIO_Init+0xd4>)
 8001f44:	f001 fb24 	bl	8003590 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2028      	movs	r0, #40	@ 0x28
 8001f4e:	f001 fa6a 	bl	8003426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f52:	2028      	movs	r0, #40	@ 0x28
 8001f54:	f001 fa83 	bl	800345e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f58:	bf00      	nop
 8001f5a:	3728      	adds	r7, #40	@ 0x28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020000 	.word	0x40020000
 8001f68:	40020800 	.word	0x40020800

08001f6c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13) {
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f7c:	d108      	bne.n	8001f90 <HAL_GPIO_EXTI_Callback+0x24>
        __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8001f7e:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <HAL_GPIO_EXTI_Callback+0x30>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a06      	ldr	r2, [pc, #24]	@ (8001f9c <HAL_GPIO_EXTI_Callback+0x30>)
 8001f84:	f043 0304 	orr.w	r3, r3, #4
 8001f88:	6013      	str	r3, [r2, #0]
        wakeup_counter = 62;
 8001f8a:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <HAL_GPIO_EXTI_Callback+0x34>)
 8001f8c:	223e      	movs	r2, #62	@ 0x3e
 8001f8e:	701a      	strb	r2, [r3, #0]
    }
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	20000206 	.word	0x20000206

08001fa4 <HAL_RTCEx_WakeUpTimerEventCallback>:
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8001fac:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a07      	ldr	r2, [pc, #28]	@ (8001fd0 <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>)
 8001fb2:	f043 0304 	orr.w	r3, r3, #4
 8001fb6:	6013      	str	r3, [r2, #0]
    wakeup_counter++;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <HAL_RTCEx_WakeUpTimerEventCallback+0x30>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4b04      	ldr	r3, [pc, #16]	@ (8001fd4 <HAL_RTCEx_WakeUpTimerEventCallback+0x30>)
 8001fc4:	701a      	strb	r2, [r3, #0]
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	20000206 	.word	0x20000206

08001fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fdc:	b672      	cpsid	i
}
 8001fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <Error_Handler+0x8>

08001fe4 <init_queue>:
// queue.c
#include "queue.h"

void init_queue(Queue *q) {
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
    q->front = 0;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
    q->rear = -1;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ffa:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8
    q->count = 0;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f8c3 21fc 	str.w	r2, [r3, #508]	@ 0x1fc
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <is_queue_full>:

bool is_queue_full(Queue *q) {
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    return q->count == QUEUE_SIZE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 800201e:	2b0a      	cmp	r3, #10
 8002020:	bf0c      	ite	eq
 8002022:	2301      	moveq	r3, #1
 8002024:	2300      	movne	r3, #0
 8002026:	b2db      	uxtb	r3, r3
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
	...

08002034 <enqueue>:

bool is_queue_empty(Queue *q) {
    return q->count == 0;
}

bool enqueue(Queue *q, const char *message) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
    if (is_queue_full(q)) {
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ffe6 	bl	8002010 <is_queue_full>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <enqueue+0x1a>
        return false;
 800204a:	2300      	movs	r3, #0
 800204c:	e031      	b.n	80020b2 <enqueue+0x7e>
    }
    q->rear = (q->rear + 1) % QUEUE_SIZE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f8d3 31f8 	ldr.w	r3, [r3, #504]	@ 0x1f8
 8002054:	1c59      	adds	r1, r3, #1
 8002056:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <enqueue+0x88>)
 8002058:	fb83 2301 	smull	r2, r3, r3, r1
 800205c:	109a      	asrs	r2, r3, #2
 800205e:	17cb      	asrs	r3, r1, #31
 8002060:	1ad2      	subs	r2, r2, r3
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	1aca      	subs	r2, r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8
    strncpy(q->data[q->rear], message, MESSAGE_MAX_LENGTH - 1);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f8d3 31f8 	ldr.w	r3, [r3, #504]	@ 0x1f8
 8002078:	2232      	movs	r2, #50	@ 0x32
 800207a:	fb02 f303 	mul.w	r3, r2, r3
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	2231      	movs	r2, #49	@ 0x31
 8002084:	6839      	ldr	r1, [r7, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f005 f938 	bl	80072fc <strncpy>
    q->data[q->rear][MESSAGE_MAX_LENGTH - 1] = '\0';
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f8d3 31f8 	ldr.w	r3, [r3, #504]	@ 0x1f8
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	2132      	movs	r1, #50	@ 0x32
 8002096:	fb01 f303 	mul.w	r3, r1, r3
 800209a:	4413      	add	r3, r2
 800209c:	3331      	adds	r3, #49	@ 0x31
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
    q->count++;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f8c3 21fc 	str.w	r2, [r3, #508]	@ 0x1fc
    return true;
 80020b0:	2301      	movs	r3, #1
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	66666667 	.word	0x66666667

080020c0 <STLM75_Init>:
#include "stlm75.h"

void STLM75_Init(STLM75_HandleTypeDef *stlm75, I2C_HandleTypeDef *hi2c) {
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
    stlm75->hi2c = hi2c;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	601a      	str	r2, [r3, #0]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
	...

080020dc <STLM75_ReadTemperature>:

HAL_StatusTypeDef STLM75_ReadTemperature(STLM75_HandleTypeDef *stlm75, float *temperature) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af04      	add	r7, sp, #16
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
    uint8_t temp_data[2] = {0};
 80020e6:	2300      	movs	r3, #0
 80020e8:	813b      	strh	r3, [r7, #8]

    HAL_StatusTypeDef result = HAL_I2C_Mem_Read(stlm75->hi2c, STLM75_I2C_ADDR, TEMP_REG, I2C_MEMADD_SIZE_8BIT, temp_data, 2, HAL_MAX_DELAY);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020f2:	9302      	str	r3, [sp, #8]
 80020f4:	2302      	movs	r3, #2
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	f107 0308 	add.w	r3, r7, #8
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	2301      	movs	r3, #1
 8002100:	2200      	movs	r2, #0
 8002102:	2190      	movs	r1, #144	@ 0x90
 8002104:	f001 fd48 	bl	8003b98 <HAL_I2C_Mem_Read>
 8002108:	4603      	mov	r3, r0
 800210a:	73fb      	strb	r3, [r7, #15]

    if (result == HAL_OK) {
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d11d      	bne.n	800214e <STLM75_ReadTemperature+0x72>
        int16_t raw_temp = (temp_data[0] << 8) | temp_data[1];
 8002112:	7a3b      	ldrb	r3, [r7, #8]
 8002114:	021b      	lsls	r3, r3, #8
 8002116:	b21a      	sxth	r2, r3
 8002118:	7a7b      	ldrb	r3, [r7, #9]
 800211a:	b21b      	sxth	r3, r3
 800211c:	4313      	orrs	r3, r2
 800211e:	81bb      	strh	r3, [r7, #12]
        raw_temp >>= 7;
 8002120:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002124:	11db      	asrs	r3, r3, #7
 8002126:	81bb      	strh	r3, [r7, #12]
        *temperature = raw_temp * 0.5;
 8002128:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe f98b 	bl	8000448 <__aeabi_i2d>
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <STLM75_ReadTemperature+0x7c>)
 8002138:	f7fe f9f0 	bl	800051c <__aeabi_dmul>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4610      	mov	r0, r2
 8002142:	4619      	mov	r1, r3
 8002144:	f7fe fcc2 	bl	8000acc <__aeabi_d2f>
 8002148:	4602      	mov	r2, r0
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	601a      	str	r2, [r3, #0]
    }

    return result;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	3fe00000 	.word	0x3fe00000

0800215c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002162:	4b15      	ldr	r3, [pc, #84]	@ (80021b8 <HAL_MspInit+0x5c>)
 8002164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002166:	4a14      	ldr	r2, [pc, #80]	@ (80021b8 <HAL_MspInit+0x5c>)
 8002168:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800216c:	6253      	str	r3, [r2, #36]	@ 0x24
 800216e:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <HAL_MspInit+0x5c>)
 8002170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002172:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217a:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <HAL_MspInit+0x5c>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	4a0e      	ldr	r2, [pc, #56]	@ (80021b8 <HAL_MspInit+0x5c>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6213      	str	r3, [r2, #32]
 8002186:	4b0c      	ldr	r3, [pc, #48]	@ (80021b8 <HAL_MspInit+0x5c>)
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <HAL_MspInit+0x5c>)
 8002194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002196:	4a08      	ldr	r2, [pc, #32]	@ (80021b8 <HAL_MspInit+0x5c>)
 8002198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800219c:	6253      	str	r3, [r2, #36]	@ 0x24
 800219e:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <HAL_MspInit+0x5c>)
 80021a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021aa:	2007      	movs	r0, #7
 80021ac:	f001 f930 	bl	8003410 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40023800 	.word	0x40023800

080021bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	@ 0x28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a15      	ldr	r2, [pc, #84]	@ (8002230 <HAL_ADC_MspInit+0x74>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d123      	bne.n	8002226 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021de:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <HAL_ADC_MspInit+0x78>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4a14      	ldr	r2, [pc, #80]	@ (8002234 <HAL_ADC_MspInit+0x78>)
 80021e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021e8:	6213      	str	r3, [r2, #32]
 80021ea:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <HAL_ADC_MspInit+0x78>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <HAL_ADC_MspInit+0x78>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002234 <HAL_ADC_MspInit+0x78>)
 80021fc:	f043 0304 	orr.w	r3, r3, #4
 8002200:	61d3      	str	r3, [r2, #28]
 8002202:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <HAL_ADC_MspInit+0x78>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC0     ------> ADC_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800220e:	2301      	movs	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002212:	2303      	movs	r3, #3
 8002214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	4619      	mov	r1, r3
 8002220:	4805      	ldr	r0, [pc, #20]	@ (8002238 <HAL_ADC_MspInit+0x7c>)
 8002222:	f001 f9b5 	bl	8003590 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002226:	bf00      	nop
 8002228:	3728      	adds	r7, #40	@ 0x28
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40012400 	.word	0x40012400
 8002234:	40023800 	.word	0x40023800
 8002238:	40020800 	.word	0x40020800

0800223c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	@ 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a17      	ldr	r2, [pc, #92]	@ (80022b8 <HAL_I2C_MspInit+0x7c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d128      	bne.n	80022b0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225e:	4b17      	ldr	r3, [pc, #92]	@ (80022bc <HAL_I2C_MspInit+0x80>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	4a16      	ldr	r2, [pc, #88]	@ (80022bc <HAL_I2C_MspInit+0x80>)
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	61d3      	str	r3, [r2, #28]
 800226a:	4b14      	ldr	r3, [pc, #80]	@ (80022bc <HAL_I2C_MspInit+0x80>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002276:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800227a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800227c:	2312      	movs	r3, #18
 800227e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002284:	2303      	movs	r3, #3
 8002286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002288:	2304      	movs	r3, #4
 800228a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	4619      	mov	r1, r3
 8002292:	480b      	ldr	r0, [pc, #44]	@ (80022c0 <HAL_I2C_MspInit+0x84>)
 8002294:	f001 f97c 	bl	8003590 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002298:	4b08      	ldr	r3, [pc, #32]	@ (80022bc <HAL_I2C_MspInit+0x80>)
 800229a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229c:	4a07      	ldr	r2, [pc, #28]	@ (80022bc <HAL_I2C_MspInit+0x80>)
 800229e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022a2:	6253      	str	r3, [r2, #36]	@ 0x24
 80022a4:	4b05      	ldr	r3, [pc, #20]	@ (80022bc <HAL_I2C_MspInit+0x80>)
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80022b0:	bf00      	nop
 80022b2:	3728      	adds	r7, #40	@ 0x28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40005400 	.word	0x40005400
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40020400 	.word	0x40020400

080022c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a08      	ldr	r2, [pc, #32]	@ (80022f4 <HAL_RTC_MspInit+0x30>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d10a      	bne.n	80022ec <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022d6:	4b08      	ldr	r3, [pc, #32]	@ (80022f8 <HAL_RTC_MspInit+0x34>)
 80022d8:	2201      	movs	r2, #1
 80022da:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80022dc:	2200      	movs	r2, #0
 80022de:	2100      	movs	r1, #0
 80022e0:	2003      	movs	r0, #3
 80022e2:	f001 f8a0 	bl	8003426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80022e6:	2003      	movs	r0, #3
 80022e8:	f001 f8b9 	bl	800345e <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40002800 	.word	0x40002800
 80022f8:	424706d8 	.word	0x424706d8

080022fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08c      	sub	sp, #48	@ 0x30
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 031c 	add.w	r3, r7, #28
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a36      	ldr	r2, [pc, #216]	@ (80023f4 <HAL_UART_MspInit+0xf8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d130      	bne.n	8002380 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800231e:	4b36      	ldr	r3, [pc, #216]	@ (80023f8 <HAL_UART_MspInit+0xfc>)
 8002320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002322:	4a35      	ldr	r2, [pc, #212]	@ (80023f8 <HAL_UART_MspInit+0xfc>)
 8002324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002328:	6253      	str	r3, [r2, #36]	@ 0x24
 800232a:	4b33      	ldr	r3, [pc, #204]	@ (80023f8 <HAL_UART_MspInit+0xfc>)
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	4b30      	ldr	r3, [pc, #192]	@ (80023f8 <HAL_UART_MspInit+0xfc>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	4a2f      	ldr	r2, [pc, #188]	@ (80023f8 <HAL_UART_MspInit+0xfc>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	61d3      	str	r3, [r2, #28]
 8002342:	4b2d      	ldr	r3, [pc, #180]	@ (80023f8 <HAL_UART_MspInit+0xfc>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800234e:	230c      	movs	r3, #12
 8002350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002352:	2302      	movs	r3, #2
 8002354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235a:	2303      	movs	r3, #3
 800235c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800235e:	2307      	movs	r3, #7
 8002360:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002362:	f107 031c 	add.w	r3, r7, #28
 8002366:	4619      	mov	r1, r3
 8002368:	4824      	ldr	r0, [pc, #144]	@ (80023fc <HAL_UART_MspInit+0x100>)
 800236a:	f001 f911 	bl	8003590 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2100      	movs	r1, #0
 8002372:	2026      	movs	r0, #38	@ 0x26
 8002374:	f001 f857 	bl	8003426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002378:	2026      	movs	r0, #38	@ 0x26
 800237a:	f001 f870 	bl	800345e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800237e:	e035      	b.n	80023ec <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a1e      	ldr	r2, [pc, #120]	@ (8002400 <HAL_UART_MspInit+0x104>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d130      	bne.n	80023ec <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800238a:	4b1b      	ldr	r3, [pc, #108]	@ (80023f8 <HAL_UART_MspInit+0xfc>)
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	4a1a      	ldr	r2, [pc, #104]	@ (80023f8 <HAL_UART_MspInit+0xfc>)
 8002390:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002394:	6253      	str	r3, [r2, #36]	@ 0x24
 8002396:	4b18      	ldr	r3, [pc, #96]	@ (80023f8 <HAL_UART_MspInit+0xfc>)
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a2:	4b15      	ldr	r3, [pc, #84]	@ (80023f8 <HAL_UART_MspInit+0xfc>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	4a14      	ldr	r2, [pc, #80]	@ (80023f8 <HAL_UART_MspInit+0xfc>)
 80023a8:	f043 0302 	orr.w	r3, r3, #2
 80023ac:	61d3      	str	r3, [r2, #28]
 80023ae:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <HAL_UART_MspInit+0xfc>)
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80023be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c0:	2302      	movs	r3, #2
 80023c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c8:	2303      	movs	r3, #3
 80023ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023cc:	2307      	movs	r3, #7
 80023ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d0:	f107 031c 	add.w	r3, r7, #28
 80023d4:	4619      	mov	r1, r3
 80023d6:	480b      	ldr	r0, [pc, #44]	@ (8002404 <HAL_UART_MspInit+0x108>)
 80023d8:	f001 f8da 	bl	8003590 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80023dc:	2200      	movs	r2, #0
 80023de:	2100      	movs	r1, #0
 80023e0:	2027      	movs	r0, #39	@ 0x27
 80023e2:	f001 f820 	bl	8003426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023e6:	2027      	movs	r0, #39	@ 0x27
 80023e8:	f001 f839 	bl	800345e <HAL_NVIC_EnableIRQ>
}
 80023ec:	bf00      	nop
 80023ee:	3730      	adds	r7, #48	@ 0x30
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40004400 	.word	0x40004400
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40020000 	.word	0x40020000
 8002400:	40004800 	.word	0x40004800
 8002404:	40020400 	.word	0x40020400

08002408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800240c:	bf00      	nop
 800240e:	e7fd      	b.n	800240c <NMI_Handler+0x4>

08002410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002414:	bf00      	nop
 8002416:	e7fd      	b.n	8002414 <HardFault_Handler+0x4>

08002418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800241c:	bf00      	nop
 800241e:	e7fd      	b.n	800241c <MemManage_Handler+0x4>

08002420 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002424:	bf00      	nop
 8002426:	e7fd      	b.n	8002424 <BusFault_Handler+0x4>

08002428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800242c:	bf00      	nop
 800242e:	e7fd      	b.n	800242c <UsageFault_Handler+0x4>

08002430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr

0800243c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002458:	f000 fa3c 	bl	80028d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}

08002460 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002464:	4802      	ldr	r0, [pc, #8]	@ (8002470 <RTC_WKUP_IRQHandler+0x10>)
 8002466:	f003 fadb 	bl	8005a20 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200004b0 	.word	0x200004b0

08002474 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002478:	4802      	ldr	r0, [pc, #8]	@ (8002484 <USART2_IRQHandler+0x10>)
 800247a:	f003 fc5b 	bl	8005d34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	200004d0 	.word	0x200004d0

08002488 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800248c:	4802      	ldr	r0, [pc, #8]	@ (8002498 <USART3_IRQHandler+0x10>)
 800248e:	f003 fc51 	bl	8005d34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000518 	.word	0x20000518

0800249c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80024a0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80024a4:	f001 fa1c 	bl	80038e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return 1;
 80024b0:	2301      	movs	r3, #1
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr

080024ba <_kill>:

int _kill(int pid, int sig)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024c4:	f004 ff3a 	bl	800733c <__errno>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2216      	movs	r2, #22
 80024cc:	601a      	str	r2, [r3, #0]
  return -1;
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <_exit>:

void _exit (int status)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024e2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ffe7 	bl	80024ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80024ec:	bf00      	nop
 80024ee:	e7fd      	b.n	80024ec <_exit+0x12>

080024f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	e00a      	b.n	8002518 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002502:	f3af 8000 	nop.w
 8002506:	4601      	mov	r1, r0
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	60ba      	str	r2, [r7, #8]
 800250e:	b2ca      	uxtb	r2, r1
 8002510:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3301      	adds	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	429a      	cmp	r2, r3
 800251e:	dbf0      	blt.n	8002502 <_read+0x12>
  }

  return len;
 8002520:	687b      	ldr	r3, [r7, #4]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	e009      	b.n	8002550 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	60ba      	str	r2, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	3301      	adds	r3, #1
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	dbf1      	blt.n	800253c <_write+0x12>
  }
  return len;
 8002558:	687b      	ldr	r3, [r7, #4]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <_close>:

int _close(int file)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002588:	605a      	str	r2, [r3, #4]
  return 0;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr

08002596 <_isatty>:

int _isatty(int file)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800259e:	2301      	movs	r3, #1
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr

080025aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b085      	sub	sp, #20
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
	...

080025c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025cc:	4a14      	ldr	r2, [pc, #80]	@ (8002620 <_sbrk+0x5c>)
 80025ce:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <_sbrk+0x60>)
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025d8:	4b13      	ldr	r3, [pc, #76]	@ (8002628 <_sbrk+0x64>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d102      	bne.n	80025e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e0:	4b11      	ldr	r3, [pc, #68]	@ (8002628 <_sbrk+0x64>)
 80025e2:	4a12      	ldr	r2, [pc, #72]	@ (800262c <_sbrk+0x68>)
 80025e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025e6:	4b10      	ldr	r3, [pc, #64]	@ (8002628 <_sbrk+0x64>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d207      	bcs.n	8002604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025f4:	f004 fea2 	bl	800733c <__errno>
 80025f8:	4603      	mov	r3, r0
 80025fa:	220c      	movs	r2, #12
 80025fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002602:	e009      	b.n	8002618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002604:	4b08      	ldr	r3, [pc, #32]	@ (8002628 <_sbrk+0x64>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800260a:	4b07      	ldr	r3, [pc, #28]	@ (8002628 <_sbrk+0x64>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	4a05      	ldr	r2, [pc, #20]	@ (8002628 <_sbrk+0x64>)
 8002614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002616:	68fb      	ldr	r3, [r7, #12]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20014000 	.word	0x20014000
 8002624:	00000400 	.word	0x00000400
 8002628:	20000560 	.word	0x20000560
 800262c:	200006b8 	.word	0x200006b8

08002630 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <TDS_Sensor_Init>:
#include "tds_sensor.h"

static ADC_HandleTypeDef *tds_hadc;

void TDS_Sensor_Init(ADC_HandleTypeDef *hadc) {
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
    tds_hadc = hadc;
 8002644:	4a03      	ldr	r2, [pc, #12]	@ (8002654 <TDS_Sensor_Init+0x18>)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6013      	str	r3, [r2, #0]
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr
 8002654:	20000564 	.word	0x20000564

08002658 <Calculate_TDS>:

static float Calculate_TDS(uint32_t adc_value) {
 8002658:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
    float voltage = (adc_value / 4095.0) * 5;
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7fd fee0 	bl	8000428 <__aeabi_ui2d>
 8002668:	a33f      	add	r3, pc, #252	@ (adr r3, 8002768 <Calculate_TDS+0x110>)
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	f7fe f87f 	bl	8000770 <__aeabi_ddiv>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	4610      	mov	r0, r2
 8002678:	4619      	mov	r1, r3
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	4b42      	ldr	r3, [pc, #264]	@ (8002788 <Calculate_TDS+0x130>)
 8002680:	f7fd ff4c 	bl	800051c <__aeabi_dmul>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	f7fe fa1e 	bl	8000acc <__aeabi_d2f>
 8002690:	4603      	mov	r3, r0
 8002692:	60fb      	str	r3, [r7, #12]
    float tds = (133.42 * voltage * voltage * voltage) - (255.86 * voltage * voltage) + (857.39 * voltage) * 0.5;
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f7fd fee9 	bl	800046c <__aeabi_f2d>
 800269a:	a335      	add	r3, pc, #212	@ (adr r3, 8002770 <Calculate_TDS+0x118>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f7fd ff3c 	bl	800051c <__aeabi_dmul>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4614      	mov	r4, r2
 80026aa:	461d      	mov	r5, r3
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f7fd fedd 	bl	800046c <__aeabi_f2d>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4620      	mov	r0, r4
 80026b8:	4629      	mov	r1, r5
 80026ba:	f7fd ff2f 	bl	800051c <__aeabi_dmul>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4614      	mov	r4, r2
 80026c4:	461d      	mov	r5, r3
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f7fd fed0 	bl	800046c <__aeabi_f2d>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4620      	mov	r0, r4
 80026d2:	4629      	mov	r1, r5
 80026d4:	f7fd ff22 	bl	800051c <__aeabi_dmul>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4614      	mov	r4, r2
 80026de:	461d      	mov	r5, r3
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f7fd fec3 	bl	800046c <__aeabi_f2d>
 80026e6:	a324      	add	r3, pc, #144	@ (adr r3, 8002778 <Calculate_TDS+0x120>)
 80026e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ec:	f7fd ff16 	bl	800051c <__aeabi_dmul>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4690      	mov	r8, r2
 80026f6:	4699      	mov	r9, r3
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f7fd feb7 	bl	800046c <__aeabi_f2d>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4640      	mov	r0, r8
 8002704:	4649      	mov	r1, r9
 8002706:	f7fd ff09 	bl	800051c <__aeabi_dmul>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4620      	mov	r0, r4
 8002710:	4629      	mov	r1, r5
 8002712:	f7fd fd4b 	bl	80001ac <__aeabi_dsub>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4614      	mov	r4, r2
 800271c:	461d      	mov	r5, r3
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f7fd fea4 	bl	800046c <__aeabi_f2d>
 8002724:	a316      	add	r3, pc, #88	@ (adr r3, 8002780 <Calculate_TDS+0x128>)
 8002726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272a:	f7fd fef7 	bl	800051c <__aeabi_dmul>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	4b14      	ldr	r3, [pc, #80]	@ (800278c <Calculate_TDS+0x134>)
 800273c:	f7fd feee 	bl	800051c <__aeabi_dmul>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4620      	mov	r0, r4
 8002746:	4629      	mov	r1, r5
 8002748:	f7fd fd32 	bl	80001b0 <__adddf3>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4610      	mov	r0, r2
 8002752:	4619      	mov	r1, r3
 8002754:	f7fe f9ba 	bl	8000acc <__aeabi_d2f>
 8002758:	4603      	mov	r3, r0
 800275a:	60bb      	str	r3, [r7, #8]
    return tds;
 800275c:	68bb      	ldr	r3, [r7, #8]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002768:	00000000 	.word	0x00000000
 800276c:	40affe00 	.word	0x40affe00
 8002770:	a3d70a3d 	.word	0xa3d70a3d
 8002774:	4060ad70 	.word	0x4060ad70
 8002778:	1eb851ec 	.word	0x1eb851ec
 800277c:	406ffb85 	.word	0x406ffb85
 8002780:	b851eb85 	.word	0xb851eb85
 8002784:	408acb1e 	.word	0x408acb1e
 8002788:	40140000 	.word	0x40140000
 800278c:	3fe00000 	.word	0x3fe00000

08002790 <TDS_Sensor_Read>:

float TDS_Sensor_Read(void) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
    uint32_t adc_value = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]

    HAL_ADC_Start(tds_hadc);
 800279a:	4b11      	ldr	r3, [pc, #68]	@ (80027e0 <TDS_Sensor_Read+0x50>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 fa38 	bl	8002c14 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(tds_hadc, HAL_MAX_DELAY) == HAL_OK) {
 80027a4:	4b0e      	ldr	r3, [pc, #56]	@ (80027e0 <TDS_Sensor_Read+0x50>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fabd 	bl	8002d2c <HAL_ADC_PollForConversion>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <TDS_Sensor_Read+0x34>
        adc_value = HAL_ADC_GetValue(tds_hadc);
 80027b8:	4b09      	ldr	r3, [pc, #36]	@ (80027e0 <TDS_Sensor_Read+0x50>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 fb45 	bl	8002e4c <HAL_ADC_GetValue>
 80027c2:	6078      	str	r0, [r7, #4]
    }
    HAL_ADC_Stop(tds_hadc);
 80027c4:	4b06      	ldr	r3, [pc, #24]	@ (80027e0 <TDS_Sensor_Read+0x50>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 fa83 	bl	8002cd4 <HAL_ADC_Stop>

    return Calculate_TDS(adc_value);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ff42 	bl	8002658 <Calculate_TDS>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000564 	.word	0x20000564

080027e4 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80027e4:	f7ff ff24 	bl	8002630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027e8:	480b      	ldr	r0, [pc, #44]	@ (8002818 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027ea:	490c      	ldr	r1, [pc, #48]	@ (800281c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002820 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f0:	e002      	b.n	80027f8 <LoopCopyDataInit>

080027f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027f6:	3304      	adds	r3, #4

080027f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027fc:	d3f9      	bcc.n	80027f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027fe:	4a09      	ldr	r2, [pc, #36]	@ (8002824 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002800:	4c09      	ldr	r4, [pc, #36]	@ (8002828 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002804:	e001      	b.n	800280a <LoopFillZerobss>

08002806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002808:	3204      	adds	r2, #4

0800280a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800280a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800280c:	d3fb      	bcc.n	8002806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800280e:	f004 fd9b 	bl	8007348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002812:	f7ff f89f 	bl	8001954 <main>
  bx lr
 8002816:	4770      	bx	lr
  ldr r0, =_sdata
 8002818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800281c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002820:	08009a88 	.word	0x08009a88
  ldr r2, =_sbss
 8002824:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002828:	200006b8 	.word	0x200006b8

0800282c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800282c:	e7fe      	b.n	800282c <ADC1_IRQHandler>

0800282e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002838:	2003      	movs	r0, #3
 800283a:	f000 fde9 	bl	8003410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800283e:	2000      	movs	r0, #0
 8002840:	f000 f80e 	bl	8002860 <HAL_InitTick>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	71fb      	strb	r3, [r7, #7]
 800284e:	e001      	b.n	8002854 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002850:	f7ff fc84 	bl	800215c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002854:	79fb      	ldrb	r3, [r7, #7]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800286c:	4b16      	ldr	r3, [pc, #88]	@ (80028c8 <HAL_InitTick+0x68>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d022      	beq.n	80028ba <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002874:	4b15      	ldr	r3, [pc, #84]	@ (80028cc <HAL_InitTick+0x6c>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4b13      	ldr	r3, [pc, #76]	@ (80028c8 <HAL_InitTick+0x68>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002880:	fbb1 f3f3 	udiv	r3, r1, r3
 8002884:	fbb2 f3f3 	udiv	r3, r2, r3
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fdf6 	bl	800347a <HAL_SYSTICK_Config>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10f      	bne.n	80028b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b0f      	cmp	r3, #15
 8002898:	d809      	bhi.n	80028ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800289a:	2200      	movs	r2, #0
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028a2:	f000 fdc0 	bl	8003426 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028a6:	4a0a      	ldr	r2, [pc, #40]	@ (80028d0 <HAL_InitTick+0x70>)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	e007      	b.n	80028be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
 80028b2:	e004      	b.n	80028be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
 80028b8:	e001      	b.n	80028be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028be:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000008 	.word	0x20000008
 80028cc:	20000000 	.word	0x20000000
 80028d0:	20000004 	.word	0x20000004

080028d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028d8:	4b05      	ldr	r3, [pc, #20]	@ (80028f0 <HAL_IncTick+0x1c>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <HAL_IncTick+0x20>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4413      	add	r3, r2
 80028e2:	4a03      	ldr	r2, [pc, #12]	@ (80028f0 <HAL_IncTick+0x1c>)
 80028e4:	6013      	str	r3, [r2, #0]
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000568 	.word	0x20000568
 80028f4:	20000008 	.word	0x20000008

080028f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return uwTick;
 80028fc:	4b02      	ldr	r3, [pc, #8]	@ (8002908 <HAL_GetTick+0x10>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	20000568 	.word	0x20000568

0800290c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002914:	f7ff fff0 	bl	80028f8 <HAL_GetTick>
 8002918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002924:	d004      	beq.n	8002930 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002926:	4b09      	ldr	r3, [pc, #36]	@ (800294c <HAL_Delay+0x40>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4413      	add	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002930:	bf00      	nop
 8002932:	f7ff ffe1 	bl	80028f8 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	429a      	cmp	r2, r3
 8002940:	d8f7      	bhi.n	8002932 <HAL_Delay+0x26>
  {
  }
}
 8002942:	bf00      	nop
 8002944:	bf00      	nop
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000008 	.word	0x20000008

08002950 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002954:	4b04      	ldr	r3, [pc, #16]	@ (8002968 <HAL_SuspendTick+0x18>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a03      	ldr	r2, [pc, #12]	@ (8002968 <HAL_SuspendTick+0x18>)
 800295a:	f023 0302 	bic.w	r3, r3, #2
 800295e:	6013      	str	r3, [r2, #0]
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	e000e010 	.word	0xe000e010

0800296c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002970:	4b04      	ldr	r3, [pc, #16]	@ (8002984 <HAL_ResumeTick+0x18>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a03      	ldr	r2, [pc, #12]	@ (8002984 <HAL_ResumeTick+0x18>)
 8002976:	f043 0302 	orr.w	r3, r3, #2
 800297a:	6013      	str	r3, [r2, #0]
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	e000e010 	.word	0xe000e010

08002988 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08e      	sub	sp, #56	@ 0x38
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e127      	b.n	8002bf8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d115      	bne.n	80029e2 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c4:	4b8e      	ldr	r3, [pc, #568]	@ (8002c00 <HAL_ADC_Init+0x278>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	4a8d      	ldr	r2, [pc, #564]	@ (8002c00 <HAL_ADC_Init+0x278>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6213      	str	r3, [r2, #32]
 80029d0:	4b8b      	ldr	r3, [pc, #556]	@ (8002c00 <HAL_ADC_Init+0x278>)
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff fbed 	bl	80021bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f040 80ff 	bne.w	8002bee <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029f8:	f023 0302 	bic.w	r3, r3, #2
 80029fc:	f043 0202 	orr.w	r2, r3, #2
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8002a04:	4b7f      	ldr	r3, [pc, #508]	@ (8002c04 <HAL_ADC_Init+0x27c>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	497c      	ldr	r1, [pc, #496]	@ (8002c04 <HAL_ADC_Init+0x27c>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002a1e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a26:	4619      	mov	r1, r3
 8002a28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a2c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8002a42:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002a48:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a50:	4619      	mov	r1, r3
 8002a52:	2302      	movs	r3, #2
 8002a54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8002a6a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002a6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a76:	2b10      	cmp	r3, #16
 8002a78:	d007      	beq.n	8002a8a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002a82:	4313      	orrs	r3, r2
 8002a84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a86:	4313      	orrs	r3, r2
 8002a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a94:	2b40      	cmp	r3, #64	@ 0x40
 8002a96:	d04f      	beq.n	8002b38 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002aaa:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6912      	ldr	r2, [r2, #16]
 8002ab0:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8002ab4:	d003      	beq.n	8002abe <HAL_ADC_Init+0x136>
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6912      	ldr	r2, [r2, #16]
 8002aba:	2a01      	cmp	r2, #1
 8002abc:	d102      	bne.n	8002ac4 <HAL_ADC_Init+0x13c>
 8002abe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ac2:	e000      	b.n	8002ac6 <HAL_ADC_Init+0x13e>
 8002ac4:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8002ac6:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002ac8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002aca:	4313      	orrs	r3, r2
 8002acc:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d125      	bne.n	8002b24 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d114      	bne.n	8002b0c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8002aec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	fa92 f2a2 	rbit	r2, r2
 8002af4:	617a      	str	r2, [r7, #20]
  return result;
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	fab2 f282 	clz	r2, r2
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	4093      	lsls	r3, r2
 8002b00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b06:	4313      	orrs	r3, r2
 8002b08:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b0a:	e00b      	b.n	8002b24 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b10:	f043 0220 	orr.w	r2, r3, #32
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b1c:	f043 0201 	orr.w	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	4b37      	ldr	r3, [pc, #220]	@ (8002c08 <HAL_ADC_Init+0x280>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b34:	430b      	orrs	r3, r1
 8002b36:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	4b33      	ldr	r3, [pc, #204]	@ (8002c0c <HAL_ADC_Init+0x284>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b54:	d003      	beq.n	8002b5e <HAL_ADC_Init+0x1d6>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d119      	bne.n	8002b92 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b64:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 8002b72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	fa92 f2a2 	rbit	r2, r2
 8002b7a:	60fa      	str	r2, [r7, #12]
  return result;
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	fab2 f282 	clz	r2, r2
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	fa03 f202 	lsl.w	r2, r3, r2
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b90:	e007      	b.n	8002ba2 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8002ba0:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	4b19      	ldr	r3, [pc, #100]	@ (8002c10 <HAL_ADC_Init+0x288>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d10b      	bne.n	8002bca <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bbc:	f023 0303 	bic.w	r3, r3, #3
 8002bc0:	f043 0201 	orr.w	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002bc8:	e014      	b.n	8002bf4 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bce:	f023 0312 	bic.w	r3, r3, #18
 8002bd2:	f043 0210 	orr.w	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bde:	f043 0201 	orr.w	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002bec:	e002      	b.n	8002bf4 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bf4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3738      	adds	r7, #56	@ 0x38
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40012700 	.word	0x40012700
 8002c08:	fcfc16ff 	.word	0xfcfc16ff
 8002c0c:	c0fff189 	.word	0xc0fff189
 8002c10:	bf80fffe 	.word	0xbf80fffe

08002c14 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_Start+0x1a>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e04e      	b.n	8002ccc <HAL_ADC_Start+0xb8>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fa80 	bl	800313c <ADC_Enable>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d141      	bne.n	8002cca <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002c4e:	f023 0301 	bic.w	r3, r3, #1
 8002c52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d007      	beq.n	8002c78 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c6c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c70:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c84:	d106      	bne.n	8002c94 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c8a:	f023 0206 	bic.w	r2, r3, #6
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c92:	e002      	b.n	8002c9a <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002caa:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d107      	bne.n	8002cca <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002cc8:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_ADC_Stop+0x1a>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e01a      	b.n	8002d24 <HAL_ADC_Stop+0x50>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fa7c 	bl	80031f4 <ADC_ConversionStop_Disable>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d109      	bne.n	8002d1a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	f043 0201 	orr.w	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d48:	d113      	bne.n	8002d72 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d58:	d10b      	bne.n	8002d72 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5e:	f043 0220 	orr.w	r2, r3, #32
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e068      	b.n	8002e44 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d72:	f7ff fdc1 	bl	80028f8 <HAL_GetTick>
 8002d76:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002d78:	e021      	b.n	8002dbe <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d80:	d01d      	beq.n	8002dbe <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d007      	beq.n	8002d98 <HAL_ADC_PollForConversion+0x6c>
 8002d88:	f7ff fdb6 	bl	80028f8 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d212      	bcs.n	8002dbe <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10b      	bne.n	8002dbe <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002daa:	f043 0204 	orr.w	r2, r3, #4
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e042      	b.n	8002e44 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0d6      	beq.n	8002d7a <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d104      	bne.n	8002dde <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0212 	mvn.w	r2, #18
 8002ddc:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d124      	bne.n	8002e42 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d11f      	bne.n	8002e42 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e08:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d006      	beq.n	8002e1e <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d111      	bne.n	8002e42 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d105      	bne.n	8002e42 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3a:	f043 0201 	orr.w	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x20>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e14f      	b.n	8003124 <HAL_ADC_ConfigChannel+0x2c0>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b06      	cmp	r3, #6
 8002e92:	d81c      	bhi.n	8002ece <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3b05      	subs	r3, #5
 8002ea6:	221f      	movs	r2, #31
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	4019      	ands	r1, r3
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3b05      	subs	r3, #5
 8002ec0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ecc:	e07e      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b0c      	cmp	r3, #12
 8002ed4:	d81c      	bhi.n	8002f10 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3b23      	subs	r3, #35	@ 0x23
 8002ee8:	221f      	movs	r2, #31
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	4019      	ands	r1, r3
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	3b23      	subs	r3, #35	@ 0x23
 8002f02:	fa00 f203 	lsl.w	r2, r0, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002f0e:	e05d      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b12      	cmp	r3, #18
 8002f16:	d81c      	bhi.n	8002f52 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	3b41      	subs	r3, #65	@ 0x41
 8002f2a:	221f      	movs	r2, #31
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	4019      	ands	r1, r3
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	3b41      	subs	r3, #65	@ 0x41
 8002f44:	fa00 f203 	lsl.w	r2, r0, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f50:	e03c      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b18      	cmp	r3, #24
 8002f58:	d81c      	bhi.n	8002f94 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	3b5f      	subs	r3, #95	@ 0x5f
 8002f6c:	221f      	movs	r2, #31
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	4019      	ands	r1, r3
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	3b5f      	subs	r3, #95	@ 0x5f
 8002f86:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f92:	e01b      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3b7d      	subs	r3, #125	@ 0x7d
 8002fa6:	221f      	movs	r2, #31
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	4019      	ands	r1, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6818      	ldr	r0, [r3, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3b7d      	subs	r3, #125	@ 0x7d
 8002fc0:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b09      	cmp	r3, #9
 8002fd2:	d81a      	bhi.n	800300a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6959      	ldr	r1, [r3, #20]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	4413      	add	r3, r2
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	4019      	ands	r1, r3
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6898      	ldr	r0, [r3, #8]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	4413      	add	r3, r2
 8002ffc:	fa00 f203 	lsl.w	r2, r0, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	615a      	str	r2, [r3, #20]
 8003008:	e05d      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b13      	cmp	r3, #19
 8003010:	d81c      	bhi.n	800304c <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6919      	ldr	r1, [r3, #16]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4613      	mov	r3, r2
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4413      	add	r3, r2
 8003022:	3b1e      	subs	r3, #30
 8003024:	2207      	movs	r2, #7
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	4019      	ands	r1, r3
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	6898      	ldr	r0, [r3, #8]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4413      	add	r3, r2
 800303c:	3b1e      	subs	r3, #30
 800303e:	fa00 f203 	lsl.w	r2, r0, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	611a      	str	r2, [r3, #16]
 800304a:	e03c      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b1d      	cmp	r3, #29
 8003052:	d81c      	bhi.n	800308e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68d9      	ldr	r1, [r3, #12]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	3b3c      	subs	r3, #60	@ 0x3c
 8003066:	2207      	movs	r2, #7
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	4019      	ands	r1, r3
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	6898      	ldr	r0, [r3, #8]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4613      	mov	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4413      	add	r3, r2
 800307e:	3b3c      	subs	r3, #60	@ 0x3c
 8003080:	fa00 f203 	lsl.w	r2, r0, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	60da      	str	r2, [r3, #12]
 800308c:	e01b      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	3b5a      	subs	r3, #90	@ 0x5a
 80030a0:	2207      	movs	r2, #7
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	4019      	ands	r1, r3
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6898      	ldr	r0, [r3, #8]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4613      	mov	r3, r2
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	4413      	add	r3, r2
 80030b8:	3b5a      	subs	r3, #90	@ 0x5a
 80030ba:	fa00 f203 	lsl.w	r2, r0, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b10      	cmp	r3, #16
 80030cc:	d003      	beq.n	80030d6 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030d2:	2b11      	cmp	r3, #17
 80030d4:	d121      	bne.n	800311a <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80030d6:	4b16      	ldr	r3, [pc, #88]	@ (8003130 <HAL_ADC_ConfigChannel+0x2cc>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d11b      	bne.n	800311a <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80030e2:	4b13      	ldr	r3, [pc, #76]	@ (8003130 <HAL_ADC_ConfigChannel+0x2cc>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4a12      	ldr	r2, [pc, #72]	@ (8003130 <HAL_ADC_ConfigChannel+0x2cc>)
 80030e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030ec:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b10      	cmp	r3, #16
 80030f4:	d111      	bne.n	800311a <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80030f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003134 <HAL_ADC_ConfigChannel+0x2d0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a0f      	ldr	r2, [pc, #60]	@ (8003138 <HAL_ADC_ConfigChannel+0x2d4>)
 80030fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003100:	0c9a      	lsrs	r2, r3, #18
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800310c:	e002      	b.n	8003114 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	3b01      	subs	r3, #1
 8003112:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f9      	bne.n	800310e <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8003122:	7bfb      	ldrb	r3, [r7, #15]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40012700 	.word	0x40012700
 8003134:	20000000 	.word	0x20000000
 8003138:	431bde83 	.word	0x431bde83

0800313c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003156:	2b40      	cmp	r3, #64	@ 0x40
 8003158:	d043      	beq.n	80031e2 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 0201 	orr.w	r2, r2, #1
 8003168:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800316a:	4b20      	ldr	r3, [pc, #128]	@ (80031ec <ADC_Enable+0xb0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a20      	ldr	r2, [pc, #128]	@ (80031f0 <ADC_Enable+0xb4>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	0c9a      	lsrs	r2, r3, #18
 8003176:	4613      	mov	r3, r2
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	4413      	add	r3, r2
 800317c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800317e:	e002      	b.n	8003186 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	3b01      	subs	r3, #1
 8003184:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f9      	bne.n	8003180 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800318c:	f7ff fbb4 	bl	80028f8 <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003192:	e01f      	b.n	80031d4 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8003194:	f7ff fbb0 	bl	80028f8 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d918      	bls.n	80031d4 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ac:	2b40      	cmp	r3, #64	@ 0x40
 80031ae:	d011      	beq.n	80031d4 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b4:	f043 0210 	orr.w	r2, r3, #16
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031c0:	f043 0201 	orr.w	r2, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e007      	b.n	80031e4 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031de:	2b40      	cmp	r3, #64	@ 0x40
 80031e0:	d1d8      	bne.n	8003194 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20000000 	.word	0x20000000
 80031f0:	431bde83 	.word	0x431bde83

080031f4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320a:	2b40      	cmp	r3, #64	@ 0x40
 800320c:	d12e      	bne.n	800326c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0201 	bic.w	r2, r2, #1
 800321c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800321e:	f7ff fb6b 	bl	80028f8 <HAL_GetTick>
 8003222:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003224:	e01b      	b.n	800325e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8003226:	f7ff fb67 	bl	80028f8 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d914      	bls.n	800325e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323e:	2b40      	cmp	r3, #64	@ 0x40
 8003240:	d10d      	bne.n	800325e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003246:	f043 0210 	orr.w	r2, r3, #16
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003252:	f043 0201 	orr.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e007      	b.n	800326e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003268:	2b40      	cmp	r3, #64	@ 0x40
 800326a:	d0dc      	beq.n	8003226 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003288:	4b0c      	ldr	r3, [pc, #48]	@ (80032bc <__NVIC_SetPriorityGrouping+0x44>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003294:	4013      	ands	r3, r2
 8003296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032aa:	4a04      	ldr	r2, [pc, #16]	@ (80032bc <__NVIC_SetPriorityGrouping+0x44>)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	60d3      	str	r3, [r2, #12]
}
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	e000ed00 	.word	0xe000ed00

080032c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032c4:	4b04      	ldr	r3, [pc, #16]	@ (80032d8 <__NVIC_GetPriorityGrouping+0x18>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	0a1b      	lsrs	r3, r3, #8
 80032ca:	f003 0307 	and.w	r3, r3, #7
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	db0b      	blt.n	8003306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	f003 021f 	and.w	r2, r3, #31
 80032f4:	4906      	ldr	r1, [pc, #24]	@ (8003310 <__NVIC_EnableIRQ+0x34>)
 80032f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	2001      	movs	r0, #1
 80032fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr
 8003310:	e000e100 	.word	0xe000e100

08003314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	6039      	str	r1, [r7, #0]
 800331e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003324:	2b00      	cmp	r3, #0
 8003326:	db0a      	blt.n	800333e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	b2da      	uxtb	r2, r3
 800332c:	490c      	ldr	r1, [pc, #48]	@ (8003360 <__NVIC_SetPriority+0x4c>)
 800332e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003332:	0112      	lsls	r2, r2, #4
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	440b      	add	r3, r1
 8003338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800333c:	e00a      	b.n	8003354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	b2da      	uxtb	r2, r3
 8003342:	4908      	ldr	r1, [pc, #32]	@ (8003364 <__NVIC_SetPriority+0x50>)
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	3b04      	subs	r3, #4
 800334c:	0112      	lsls	r2, r2, #4
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	440b      	add	r3, r1
 8003352:	761a      	strb	r2, [r3, #24]
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	e000e100 	.word	0xe000e100
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003368:	b480      	push	{r7}
 800336a:	b089      	sub	sp, #36	@ 0x24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f1c3 0307 	rsb	r3, r3, #7
 8003382:	2b04      	cmp	r3, #4
 8003384:	bf28      	it	cs
 8003386:	2304      	movcs	r3, #4
 8003388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	3304      	adds	r3, #4
 800338e:	2b06      	cmp	r3, #6
 8003390:	d902      	bls.n	8003398 <NVIC_EncodePriority+0x30>
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	3b03      	subs	r3, #3
 8003396:	e000      	b.n	800339a <NVIC_EncodePriority+0x32>
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800339c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43da      	mvns	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	401a      	ands	r2, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ba:	43d9      	mvns	r1, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c0:	4313      	orrs	r3, r2
         );
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3724      	adds	r7, #36	@ 0x24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033dc:	d301      	bcc.n	80033e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033de:	2301      	movs	r3, #1
 80033e0:	e00f      	b.n	8003402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033e2:	4a0a      	ldr	r2, [pc, #40]	@ (800340c <SysTick_Config+0x40>)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ea:	210f      	movs	r1, #15
 80033ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033f0:	f7ff ff90 	bl	8003314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033f4:	4b05      	ldr	r3, [pc, #20]	@ (800340c <SysTick_Config+0x40>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033fa:	4b04      	ldr	r3, [pc, #16]	@ (800340c <SysTick_Config+0x40>)
 80033fc:	2207      	movs	r2, #7
 80033fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	e000e010 	.word	0xe000e010

08003410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff ff2d 	bl	8003278 <__NVIC_SetPriorityGrouping>
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b086      	sub	sp, #24
 800342a:	af00      	add	r7, sp, #0
 800342c:	4603      	mov	r3, r0
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003438:	f7ff ff42 	bl	80032c0 <__NVIC_GetPriorityGrouping>
 800343c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	68b9      	ldr	r1, [r7, #8]
 8003442:	6978      	ldr	r0, [r7, #20]
 8003444:	f7ff ff90 	bl	8003368 <NVIC_EncodePriority>
 8003448:	4602      	mov	r2, r0
 800344a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800344e:	4611      	mov	r1, r2
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff ff5f 	bl	8003314 <__NVIC_SetPriority>
}
 8003456:	bf00      	nop
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	4603      	mov	r3, r0
 8003466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff ff35 	bl	80032dc <__NVIC_EnableIRQ>
}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff ffa2 	bl	80033cc <SysTick_Config>
 8003488:	4603      	mov	r3, r0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003492:	b480      	push	{r7}
 8003494:	b085      	sub	sp, #20
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d008      	beq.n	80034bc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2204      	movs	r2, #4
 80034ae:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e022      	b.n	8003502 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 020e 	bic.w	r2, r2, #14
 80034ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0201 	bic.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	f003 021c 	and.w	r2, r3, #28
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e8:	2101      	movs	r1, #1
 80034ea:	fa01 f202 	lsl.w	r2, r1, r2
 80034ee:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8003500:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d005      	beq.n	8003530 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2204      	movs	r2, #4
 8003528:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
 800352e:	e029      	b.n	8003584 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 020e 	bic.w	r2, r2, #14
 800353e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0201 	bic.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003554:	f003 021c 	and.w	r2, r3, #28
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355c:	2101      	movs	r1, #1
 800355e:	fa01 f202 	lsl.w	r2, r1, r2
 8003562:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4798      	blx	r3
    }
  }
  return status;
 8003584:	7bfb      	ldrb	r3, [r7, #15]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80035a6:	e160      	b.n	800386a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	2101      	movs	r1, #1
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	fa01 f303 	lsl.w	r3, r1, r3
 80035b4:	4013      	ands	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 8152 	beq.w	8003864 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d005      	beq.n	80035d8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d130      	bne.n	800363a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	2203      	movs	r2, #3
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4013      	ands	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800360e:	2201      	movs	r2, #1
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	f003 0201 	and.w	r2, r3, #1
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b03      	cmp	r3, #3
 8003644:	d017      	beq.n	8003676 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	2203      	movs	r2, #3
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d123      	bne.n	80036ca <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	08da      	lsrs	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3208      	adds	r2, #8
 800368a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800368e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	220f      	movs	r2, #15
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4013      	ands	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	08da      	lsrs	r2, r3, #3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3208      	adds	r2, #8
 80036c4:	6939      	ldr	r1, [r7, #16]
 80036c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	2203      	movs	r2, #3
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f003 0203 	and.w	r2, r3, #3
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80ac 	beq.w	8003864 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800370c:	4b5e      	ldr	r3, [pc, #376]	@ (8003888 <HAL_GPIO_Init+0x2f8>)
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	4a5d      	ldr	r2, [pc, #372]	@ (8003888 <HAL_GPIO_Init+0x2f8>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6213      	str	r3, [r2, #32]
 8003718:	4b5b      	ldr	r3, [pc, #364]	@ (8003888 <HAL_GPIO_Init+0x2f8>)
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003724:	4a59      	ldr	r2, [pc, #356]	@ (800388c <HAL_GPIO_Init+0x2fc>)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	089b      	lsrs	r3, r3, #2
 800372a:	3302      	adds	r3, #2
 800372c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003730:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	220f      	movs	r2, #15
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4013      	ands	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a51      	ldr	r2, [pc, #324]	@ (8003890 <HAL_GPIO_Init+0x300>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d025      	beq.n	800379c <HAL_GPIO_Init+0x20c>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a50      	ldr	r2, [pc, #320]	@ (8003894 <HAL_GPIO_Init+0x304>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d01f      	beq.n	8003798 <HAL_GPIO_Init+0x208>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a4f      	ldr	r2, [pc, #316]	@ (8003898 <HAL_GPIO_Init+0x308>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d019      	beq.n	8003794 <HAL_GPIO_Init+0x204>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a4e      	ldr	r2, [pc, #312]	@ (800389c <HAL_GPIO_Init+0x30c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d013      	beq.n	8003790 <HAL_GPIO_Init+0x200>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a4d      	ldr	r2, [pc, #308]	@ (80038a0 <HAL_GPIO_Init+0x310>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00d      	beq.n	800378c <HAL_GPIO_Init+0x1fc>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a4c      	ldr	r2, [pc, #304]	@ (80038a4 <HAL_GPIO_Init+0x314>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d007      	beq.n	8003788 <HAL_GPIO_Init+0x1f8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a4b      	ldr	r2, [pc, #300]	@ (80038a8 <HAL_GPIO_Init+0x318>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d101      	bne.n	8003784 <HAL_GPIO_Init+0x1f4>
 8003780:	2306      	movs	r3, #6
 8003782:	e00c      	b.n	800379e <HAL_GPIO_Init+0x20e>
 8003784:	2307      	movs	r3, #7
 8003786:	e00a      	b.n	800379e <HAL_GPIO_Init+0x20e>
 8003788:	2305      	movs	r3, #5
 800378a:	e008      	b.n	800379e <HAL_GPIO_Init+0x20e>
 800378c:	2304      	movs	r3, #4
 800378e:	e006      	b.n	800379e <HAL_GPIO_Init+0x20e>
 8003790:	2303      	movs	r3, #3
 8003792:	e004      	b.n	800379e <HAL_GPIO_Init+0x20e>
 8003794:	2302      	movs	r3, #2
 8003796:	e002      	b.n	800379e <HAL_GPIO_Init+0x20e>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <HAL_GPIO_Init+0x20e>
 800379c:	2300      	movs	r3, #0
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	f002 0203 	and.w	r2, r2, #3
 80037a4:	0092      	lsls	r2, r2, #2
 80037a6:	4093      	lsls	r3, r2
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80037ae:	4937      	ldr	r1, [pc, #220]	@ (800388c <HAL_GPIO_Init+0x2fc>)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	3302      	adds	r3, #2
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037bc:	4b3b      	ldr	r3, [pc, #236]	@ (80038ac <HAL_GPIO_Init+0x31c>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	43db      	mvns	r3, r3
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4013      	ands	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80037e0:	4a32      	ldr	r2, [pc, #200]	@ (80038ac <HAL_GPIO_Init+0x31c>)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037e6:	4b31      	ldr	r3, [pc, #196]	@ (80038ac <HAL_GPIO_Init+0x31c>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	43db      	mvns	r3, r3
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4013      	ands	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800380a:	4a28      	ldr	r2, [pc, #160]	@ (80038ac <HAL_GPIO_Init+0x31c>)
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003810:	4b26      	ldr	r3, [pc, #152]	@ (80038ac <HAL_GPIO_Init+0x31c>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	43db      	mvns	r3, r3
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003834:	4a1d      	ldr	r2, [pc, #116]	@ (80038ac <HAL_GPIO_Init+0x31c>)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800383a:	4b1c      	ldr	r3, [pc, #112]	@ (80038ac <HAL_GPIO_Init+0x31c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	43db      	mvns	r3, r3
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4013      	ands	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800385e:	4a13      	ldr	r2, [pc, #76]	@ (80038ac <HAL_GPIO_Init+0x31c>)
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	3301      	adds	r3, #1
 8003868:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	f47f ae97 	bne.w	80035a8 <HAL_GPIO_Init+0x18>
  }
}
 800387a:	bf00      	nop
 800387c:	bf00      	nop
 800387e:	371c      	adds	r7, #28
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40023800 	.word	0x40023800
 800388c:	40010000 	.word	0x40010000
 8003890:	40020000 	.word	0x40020000
 8003894:	40020400 	.word	0x40020400
 8003898:	40020800 	.word	0x40020800
 800389c:	40020c00 	.word	0x40020c00
 80038a0:	40021000 	.word	0x40021000
 80038a4:	40021400 	.word	0x40021400
 80038a8:	40021800 	.word	0x40021800
 80038ac:	40010400 	.word	0x40010400

080038b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	807b      	strh	r3, [r7, #2]
 80038bc:	4613      	mov	r3, r2
 80038be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038c0:	787b      	ldrb	r3, [r7, #1]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038c6:	887a      	ldrh	r2, [r7, #2]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80038cc:	e003      	b.n	80038d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80038ce:	887b      	ldrh	r3, [r7, #2]
 80038d0:	041a      	lsls	r2, r3, #16
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	619a      	str	r2, [r3, #24]
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr

080038e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038ea:	4b08      	ldr	r3, [pc, #32]	@ (800390c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d006      	beq.n	8003904 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038f6:	4a05      	ldr	r2, [pc, #20]	@ (800390c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038fc:	88fb      	ldrh	r3, [r7, #6]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe fb34 	bl	8001f6c <HAL_GPIO_EXTI_Callback>
  }
}
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40010400 	.word	0x40010400

08003910 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e12b      	b.n	8003b7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fe fc80 	bl	800223c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2224      	movs	r2, #36	@ 0x24
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003962:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003972:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003974:	f001 fbc2 	bl	80050fc <HAL_RCC_GetPCLK1Freq>
 8003978:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	4a81      	ldr	r2, [pc, #516]	@ (8003b84 <HAL_I2C_Init+0x274>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d807      	bhi.n	8003994 <HAL_I2C_Init+0x84>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4a80      	ldr	r2, [pc, #512]	@ (8003b88 <HAL_I2C_Init+0x278>)
 8003988:	4293      	cmp	r3, r2
 800398a:	bf94      	ite	ls
 800398c:	2301      	movls	r3, #1
 800398e:	2300      	movhi	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	e006      	b.n	80039a2 <HAL_I2C_Init+0x92>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4a7d      	ldr	r2, [pc, #500]	@ (8003b8c <HAL_I2C_Init+0x27c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	bf94      	ite	ls
 800399c:	2301      	movls	r3, #1
 800399e:	2300      	movhi	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e0e7      	b.n	8003b7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4a78      	ldr	r2, [pc, #480]	@ (8003b90 <HAL_I2C_Init+0x280>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	0c9b      	lsrs	r3, r3, #18
 80039b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	4a6a      	ldr	r2, [pc, #424]	@ (8003b84 <HAL_I2C_Init+0x274>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d802      	bhi.n	80039e4 <HAL_I2C_Init+0xd4>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	3301      	adds	r3, #1
 80039e2:	e009      	b.n	80039f8 <HAL_I2C_Init+0xe8>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
 80039ee:	4a69      	ldr	r2, [pc, #420]	@ (8003b94 <HAL_I2C_Init+0x284>)
 80039f0:	fba2 2303 	umull	r2, r3, r2, r3
 80039f4:	099b      	lsrs	r3, r3, #6
 80039f6:	3301      	adds	r3, #1
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	430b      	orrs	r3, r1
 80039fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	495c      	ldr	r1, [pc, #368]	@ (8003b84 <HAL_I2C_Init+0x274>)
 8003a14:	428b      	cmp	r3, r1
 8003a16:	d819      	bhi.n	8003a4c <HAL_I2C_Init+0x13c>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	1e59      	subs	r1, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a26:	1c59      	adds	r1, r3, #1
 8003a28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a2c:	400b      	ands	r3, r1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_I2C_Init+0x138>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1e59      	subs	r1, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a40:	3301      	adds	r3, #1
 8003a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a46:	e051      	b.n	8003aec <HAL_I2C_Init+0x1dc>
 8003a48:	2304      	movs	r3, #4
 8003a4a:	e04f      	b.n	8003aec <HAL_I2C_Init+0x1dc>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d111      	bne.n	8003a78 <HAL_I2C_Init+0x168>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1e58      	subs	r0, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6859      	ldr	r1, [r3, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	440b      	add	r3, r1
 8003a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a66:	3301      	adds	r3, #1
 8003a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	e012      	b.n	8003a9e <HAL_I2C_Init+0x18e>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1e58      	subs	r0, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6859      	ldr	r1, [r3, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	0099      	lsls	r1, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a8e:	3301      	adds	r3, #1
 8003a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bf0c      	ite	eq
 8003a98:	2301      	moveq	r3, #1
 8003a9a:	2300      	movne	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_I2C_Init+0x196>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e022      	b.n	8003aec <HAL_I2C_Init+0x1dc>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10e      	bne.n	8003acc <HAL_I2C_Init+0x1bc>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1e58      	subs	r0, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6859      	ldr	r1, [r3, #4]
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	440b      	add	r3, r1
 8003abc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aca:	e00f      	b.n	8003aec <HAL_I2C_Init+0x1dc>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	1e58      	subs	r0, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6859      	ldr	r1, [r3, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	0099      	lsls	r1, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	6809      	ldr	r1, [r1, #0]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69da      	ldr	r2, [r3, #28]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6911      	ldr	r1, [r2, #16]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68d2      	ldr	r2, [r2, #12]
 8003b26:	4311      	orrs	r1, r2
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	000186a0 	.word	0x000186a0
 8003b88:	001e847f 	.word	0x001e847f
 8003b8c:	003d08ff 	.word	0x003d08ff
 8003b90:	431bde83 	.word	0x431bde83
 8003b94:	10624dd3 	.word	0x10624dd3

08003b98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08c      	sub	sp, #48	@ 0x30
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	817b      	strh	r3, [r7, #10]
 8003baa:	460b      	mov	r3, r1
 8003bac:	813b      	strh	r3, [r7, #8]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bb2:	f7fe fea1 	bl	80028f8 <HAL_GetTick>
 8003bb6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	f040 8208 	bne.w	8003fd6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	2319      	movs	r3, #25
 8003bcc:	2201      	movs	r2, #1
 8003bce:	497b      	ldr	r1, [pc, #492]	@ (8003dbc <HAL_I2C_Mem_Read+0x224>)
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 faef 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e1fb      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_I2C_Mem_Read+0x56>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e1f4      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d007      	beq.n	8003c14 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2222      	movs	r2, #34	@ 0x22
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2240      	movs	r2, #64	@ 0x40
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4a5b      	ldr	r2, [pc, #364]	@ (8003dc0 <HAL_I2C_Mem_Read+0x228>)
 8003c54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c56:	88f8      	ldrh	r0, [r7, #6]
 8003c58:	893a      	ldrh	r2, [r7, #8]
 8003c5a:	8979      	ldrh	r1, [r7, #10]
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5e:	9301      	str	r3, [sp, #4]
 8003c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	4603      	mov	r3, r0
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f9bc 	bl	8003fe4 <I2C_RequestMemoryRead>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e1b0      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d113      	bne.n	8003ca6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	623b      	str	r3, [r7, #32]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	623b      	str	r3, [r7, #32]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	623b      	str	r3, [r7, #32]
 8003c92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	e184      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d11b      	bne.n	8003ce6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e164      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d11b      	bne.n	8003d26 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cfc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	e144      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d3c:	e138      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	f200 80f1 	bhi.w	8003f2a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d123      	bne.n	8003d98 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d52:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 fb8f 	bl	8004478 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e139      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d96:	e10b      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d14e      	bne.n	8003e3e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da6:	2200      	movs	r2, #0
 8003da8:	4906      	ldr	r1, [pc, #24]	@ (8003dc4 <HAL_I2C_Mem_Read+0x22c>)
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 fa02 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d008      	beq.n	8003dc8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e10e      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
 8003dba:	bf00      	nop
 8003dbc:	00100002 	.word	0x00100002
 8003dc0:	ffff0000 	.word	0xffff0000
 8003dc4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e3c:	e0b8      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e44:	2200      	movs	r2, #0
 8003e46:	4966      	ldr	r1, [pc, #408]	@ (8003fe0 <HAL_I2C_Mem_Read+0x448>)
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f9b3 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0bf      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	494f      	ldr	r1, [pc, #316]	@ (8003fe0 <HAL_I2C_Mem_Read+0x448>)
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 f985 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e091      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ec2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f28:	e042      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f2c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 faa2 	bl	8004478 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e04c      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d118      	bne.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f47f aec2 	bne.w	8003d3e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e000      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003fd6:	2302      	movs	r3, #2
  }
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3728      	adds	r7, #40	@ 0x28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	00010004 	.word	0x00010004

08003fe4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	4608      	mov	r0, r1
 8003fee:	4611      	mov	r1, r2
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	817b      	strh	r3, [r7, #10]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	813b      	strh	r3, [r7, #8]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800400c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800401c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	2200      	movs	r2, #0
 8004026:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 f8c2 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00d      	beq.n	8004052 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004040:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004044:	d103      	bne.n	800404e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800404c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e0aa      	b.n	80041a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004052:	897b      	ldrh	r3, [r7, #10]
 8004054:	b2db      	uxtb	r3, r3
 8004056:	461a      	mov	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004060:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	6a3a      	ldr	r2, [r7, #32]
 8004066:	4952      	ldr	r1, [pc, #328]	@ (80041b0 <I2C_RequestMemoryRead+0x1cc>)
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f91d 	bl	80042a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e097      	b.n	80041a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800408e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004090:	6a39      	ldr	r1, [r7, #32]
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 f9a8 	bl	80043e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00d      	beq.n	80040ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d107      	bne.n	80040b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e076      	b.n	80041a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040ba:	88fb      	ldrh	r3, [r7, #6]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d105      	bne.n	80040cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040c0:	893b      	ldrh	r3, [r7, #8]
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	611a      	str	r2, [r3, #16]
 80040ca:	e021      	b.n	8004110 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040cc:	893b      	ldrh	r3, [r7, #8]
 80040ce:	0a1b      	lsrs	r3, r3, #8
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040dc:	6a39      	ldr	r1, [r7, #32]
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 f982 	bl	80043e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00d      	beq.n	8004106 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d107      	bne.n	8004102 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004100:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e050      	b.n	80041a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004106:	893b      	ldrh	r3, [r7, #8]
 8004108:	b2da      	uxtb	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004112:	6a39      	ldr	r1, [r7, #32]
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 f967 	bl	80043e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00d      	beq.n	800413c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004124:	2b04      	cmp	r3, #4
 8004126:	d107      	bne.n	8004138 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004136:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e035      	b.n	80041a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800414a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800414c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	2200      	movs	r2, #0
 8004154:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f82b 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00d      	beq.n	8004180 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800416e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004172:	d103      	bne.n	800417c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800417a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e013      	b.n	80041a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004180:	897b      	ldrh	r3, [r7, #10]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	b2da      	uxtb	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004192:	6a3a      	ldr	r2, [r7, #32]
 8004194:	4906      	ldr	r1, [pc, #24]	@ (80041b0 <I2C_RequestMemoryRead+0x1cc>)
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 f886 	bl	80042a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e000      	b.n	80041a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	00010002 	.word	0x00010002

080041b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	4613      	mov	r3, r2
 80041c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041c4:	e048      	b.n	8004258 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041cc:	d044      	beq.n	8004258 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ce:	f7fe fb93 	bl	80028f8 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d302      	bcc.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d139      	bne.n	8004258 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	0c1b      	lsrs	r3, r3, #16
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d10d      	bne.n	800420a <I2C_WaitOnFlagUntilTimeout+0x56>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	43da      	mvns	r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4013      	ands	r3, r2
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	e00c      	b.n	8004224 <I2C_WaitOnFlagUntilTimeout+0x70>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	43da      	mvns	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	4013      	ands	r3, r2
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	429a      	cmp	r2, r3
 8004228:	d116      	bne.n	8004258 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004244:	f043 0220 	orr.w	r2, r3, #32
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e023      	b.n	80042a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	0c1b      	lsrs	r3, r3, #16
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b01      	cmp	r3, #1
 8004260:	d10d      	bne.n	800427e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	43da      	mvns	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4013      	ands	r3, r2
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	bf0c      	ite	eq
 8004274:	2301      	moveq	r3, #1
 8004276:	2300      	movne	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	e00c      	b.n	8004298 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	43da      	mvns	r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	4013      	ands	r3, r2
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	bf0c      	ite	eq
 8004290:	2301      	moveq	r3, #1
 8004292:	2300      	movne	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	429a      	cmp	r2, r3
 800429c:	d093      	beq.n	80041c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042b6:	e071      	b.n	800439c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042c6:	d123      	bne.n	8004310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fc:	f043 0204 	orr.w	r2, r3, #4
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e067      	b.n	80043e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004316:	d041      	beq.n	800439c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004318:	f7fe faee 	bl	80028f8 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	429a      	cmp	r2, r3
 8004326:	d302      	bcc.n	800432e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d136      	bne.n	800439c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	0c1b      	lsrs	r3, r3, #16
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	d10c      	bne.n	8004352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	43da      	mvns	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4013      	ands	r3, r2
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	bf14      	ite	ne
 800434a:	2301      	movne	r3, #1
 800434c:	2300      	moveq	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	e00b      	b.n	800436a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	43da      	mvns	r2, r3
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4013      	ands	r3, r2
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d016      	beq.n	800439c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004388:	f043 0220 	orr.w	r2, r3, #32
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e021      	b.n	80043e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	0c1b      	lsrs	r3, r3, #16
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d10c      	bne.n	80043c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	43da      	mvns	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	4013      	ands	r3, r2
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	bf14      	ite	ne
 80043b8:	2301      	movne	r3, #1
 80043ba:	2300      	moveq	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	e00b      	b.n	80043d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	43da      	mvns	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4013      	ands	r3, r2
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	bf14      	ite	ne
 80043d2:	2301      	movne	r3, #1
 80043d4:	2300      	moveq	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f47f af6d 	bne.w	80042b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043f4:	e034      	b.n	8004460 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f89b 	bl	8004532 <I2C_IsAcknowledgeFailed>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e034      	b.n	8004470 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800440c:	d028      	beq.n	8004460 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440e:	f7fe fa73 	bl	80028f8 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	429a      	cmp	r2, r3
 800441c:	d302      	bcc.n	8004424 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d11d      	bne.n	8004460 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442e:	2b80      	cmp	r3, #128	@ 0x80
 8004430:	d016      	beq.n	8004460 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444c:	f043 0220 	orr.w	r2, r3, #32
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e007      	b.n	8004470 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446a:	2b80      	cmp	r3, #128	@ 0x80
 800446c:	d1c3      	bne.n	80043f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004484:	e049      	b.n	800451a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b10      	cmp	r3, #16
 8004492:	d119      	bne.n	80044c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0210 	mvn.w	r2, #16
 800449c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e030      	b.n	800452a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c8:	f7fe fa16 	bl	80028f8 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d302      	bcc.n	80044de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d11d      	bne.n	800451a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e8:	2b40      	cmp	r3, #64	@ 0x40
 80044ea:	d016      	beq.n	800451a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	f043 0220 	orr.w	r2, r3, #32
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e007      	b.n	800452a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004524:	2b40      	cmp	r3, #64	@ 0x40
 8004526:	d1ae      	bne.n	8004486 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004544:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004548:	d11b      	bne.n	8004582 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004552:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2220      	movs	r2, #32
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456e:	f043 0204 	orr.w	r2, r3, #4
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr
	...

08004590 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3: Only on product with GPIOE available
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	fa93 f3a3 	rbit	r3, r3
 80045a2:	60bb      	str	r3, [r7, #8]
  return result;
 80045a4:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 80045a6:	fab3 f383 	clz	r3, r3
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	461a      	mov	r2, r3
 80045b0:	4b04      	ldr	r3, [pc, #16]	@ (80045c4 <HAL_PWR_EnableWakeUpPin+0x34>)
 80045b2:	4413      	add	r3, r2
 80045b4:	461a      	mov	r2, r3
 80045b6:	2301      	movs	r3, #1
 80045b8:	6013      	str	r3, [r2, #0]
}
 80045ba:	bf00      	nop
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr
 80045c4:	420e0080 	.word	0x420e0080

080045c8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode: Set PDDS and LPSDSR bit according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 80045d4:	4b10      	ldr	r3, [pc, #64]	@ (8004618 <HAL_PWR_EnterSTOPMode+0x50>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f023 0203 	bic.w	r2, r3, #3
 80045dc:	490e      	ldr	r1, [pc, #56]	@ (8004618 <HAL_PWR_EnterSTOPMode+0x50>)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80045e4:	4b0d      	ldr	r3, [pc, #52]	@ (800461c <HAL_PWR_EnterSTOPMode+0x54>)
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	4a0c      	ldr	r2, [pc, #48]	@ (800461c <HAL_PWR_EnterSTOPMode+0x54>)
 80045ea:	f043 0304 	orr.w	r3, r3, #4
 80045ee:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <HAL_PWR_EnterSTOPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80045f6:	bf30      	wfi
 80045f8:	e002      	b.n	8004600 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80045fa:	bf40      	sev
    __WFE();
 80045fc:	bf20      	wfe
    __WFE();
 80045fe:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004600:	4b06      	ldr	r3, [pc, #24]	@ (800461c <HAL_PWR_EnterSTOPMode+0x54>)
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	4a05      	ldr	r2, [pc, #20]	@ (800461c <HAL_PWR_EnterSTOPMode+0x54>)
 8004606:	f023 0304 	bic.w	r3, r3, #4
 800460a:	6113      	str	r3, [r2, #16]
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40007000 	.word	0x40007000
 800461c:	e000ed00 	.word	0xe000ed00

08004620 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e31d      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004632:	4b94      	ldr	r3, [pc, #592]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 030c 	and.w	r3, r3, #12
 800463a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800463c:	4b91      	ldr	r3, [pc, #580]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004644:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d07b      	beq.n	800474a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	2b08      	cmp	r3, #8
 8004656:	d006      	beq.n	8004666 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	2b0c      	cmp	r3, #12
 800465c:	d10f      	bne.n	800467e <HAL_RCC_OscConfig+0x5e>
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004664:	d10b      	bne.n	800467e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004666:	4b87      	ldr	r3, [pc, #540]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d06a      	beq.n	8004748 <HAL_RCC_OscConfig+0x128>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d166      	bne.n	8004748 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e2f7      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d106      	bne.n	8004694 <HAL_RCC_OscConfig+0x74>
 8004686:	4b7f      	ldr	r3, [pc, #508]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a7e      	ldr	r2, [pc, #504]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 800468c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	e02d      	b.n	80046f0 <HAL_RCC_OscConfig+0xd0>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10c      	bne.n	80046b6 <HAL_RCC_OscConfig+0x96>
 800469c:	4b79      	ldr	r3, [pc, #484]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a78      	ldr	r2, [pc, #480]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 80046a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	4b76      	ldr	r3, [pc, #472]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a75      	ldr	r2, [pc, #468]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 80046ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	e01c      	b.n	80046f0 <HAL_RCC_OscConfig+0xd0>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b05      	cmp	r3, #5
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCC_OscConfig+0xb8>
 80046be:	4b71      	ldr	r3, [pc, #452]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a70      	ldr	r2, [pc, #448]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 80046c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	4b6e      	ldr	r3, [pc, #440]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a6d      	ldr	r2, [pc, #436]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 80046d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	e00b      	b.n	80046f0 <HAL_RCC_OscConfig+0xd0>
 80046d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a69      	ldr	r2, [pc, #420]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 80046de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	4b67      	ldr	r3, [pc, #412]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a66      	ldr	r2, [pc, #408]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 80046ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d013      	beq.n	8004720 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fe f8fe 	bl	80028f8 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004700:	f7fe f8fa 	bl	80028f8 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b64      	cmp	r3, #100	@ 0x64
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e2ad      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004712:	4b5c      	ldr	r3, [pc, #368]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0xe0>
 800471e:	e014      	b.n	800474a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004720:	f7fe f8ea 	bl	80028f8 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004728:	f7fe f8e6 	bl	80028f8 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b64      	cmp	r3, #100	@ 0x64
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e299      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800473a:	4b52      	ldr	r3, [pc, #328]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1f0      	bne.n	8004728 <HAL_RCC_OscConfig+0x108>
 8004746:	e000      	b.n	800474a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d05a      	beq.n	800480c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b04      	cmp	r3, #4
 800475a:	d005      	beq.n	8004768 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	2b0c      	cmp	r3, #12
 8004760:	d119      	bne.n	8004796 <HAL_RCC_OscConfig+0x176>
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d116      	bne.n	8004796 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004768:	4b46      	ldr	r3, [pc, #280]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_OscConfig+0x160>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d001      	beq.n	8004780 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e276      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004780:	4b40      	ldr	r3, [pc, #256]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	493d      	ldr	r1, [pc, #244]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 8004790:	4313      	orrs	r3, r2
 8004792:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004794:	e03a      	b.n	800480c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d020      	beq.n	80047e0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800479e:	4b3a      	ldr	r3, [pc, #232]	@ (8004888 <HAL_RCC_OscConfig+0x268>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a4:	f7fe f8a8 	bl	80028f8 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ac:	f7fe f8a4 	bl	80028f8 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e257      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047be:	4b31      	ldr	r3, [pc, #196]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ca:	4b2e      	ldr	r3, [pc, #184]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	021b      	lsls	r3, r3, #8
 80047d8:	492a      	ldr	r1, [pc, #168]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	604b      	str	r3, [r1, #4]
 80047de:	e015      	b.n	800480c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047e0:	4b29      	ldr	r3, [pc, #164]	@ (8004888 <HAL_RCC_OscConfig+0x268>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e6:	f7fe f887 	bl	80028f8 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ee:	f7fe f883 	bl	80028f8 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e236      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004800:	4b20      	ldr	r3, [pc, #128]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1f0      	bne.n	80047ee <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 80b8 	beq.w	800498a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d170      	bne.n	8004902 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004820:	4b18      	ldr	r3, [pc, #96]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_RCC_OscConfig+0x218>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e21a      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1a      	ldr	r2, [r3, #32]
 800483c:	4b11      	ldr	r3, [pc, #68]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004844:	429a      	cmp	r2, r3
 8004846:	d921      	bls.n	800488c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fc7d 	bl	800514c <RCC_SetFlashLatencyFromMSIRange>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e208      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800485c:	4b09      	ldr	r3, [pc, #36]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	4906      	ldr	r1, [pc, #24]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 800486a:	4313      	orrs	r3, r2
 800486c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800486e:	4b05      	ldr	r3, [pc, #20]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	061b      	lsls	r3, r3, #24
 800487c:	4901      	ldr	r1, [pc, #4]	@ (8004884 <HAL_RCC_OscConfig+0x264>)
 800487e:	4313      	orrs	r3, r2
 8004880:	604b      	str	r3, [r1, #4]
 8004882:	e020      	b.n	80048c6 <HAL_RCC_OscConfig+0x2a6>
 8004884:	40023800 	.word	0x40023800
 8004888:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800488c:	4b99      	ldr	r3, [pc, #612]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	4996      	ldr	r1, [pc, #600]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 800489a:	4313      	orrs	r3, r2
 800489c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800489e:	4b95      	ldr	r3, [pc, #596]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	061b      	lsls	r3, r3, #24
 80048ac:	4991      	ldr	r1, [pc, #580]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fc48 	bl	800514c <RCC_SetFlashLatencyFromMSIRange>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e1d3      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	0b5b      	lsrs	r3, r3, #13
 80048cc:	3301      	adds	r3, #1
 80048ce:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80048d6:	4a87      	ldr	r2, [pc, #540]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 80048d8:	6892      	ldr	r2, [r2, #8]
 80048da:	0912      	lsrs	r2, r2, #4
 80048dc:	f002 020f 	and.w	r2, r2, #15
 80048e0:	4985      	ldr	r1, [pc, #532]	@ (8004af8 <HAL_RCC_OscConfig+0x4d8>)
 80048e2:	5c8a      	ldrb	r2, [r1, r2]
 80048e4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80048e6:	4a85      	ldr	r2, [pc, #532]	@ (8004afc <HAL_RCC_OscConfig+0x4dc>)
 80048e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048ea:	4b85      	ldr	r3, [pc, #532]	@ (8004b00 <HAL_RCC_OscConfig+0x4e0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fd ffb6 	bl	8002860 <HAL_InitTick>
 80048f4:	4603      	mov	r3, r0
 80048f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d045      	beq.n	800498a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	e1b5      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d029      	beq.n	800495e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800490a:	4b7e      	ldr	r3, [pc, #504]	@ (8004b04 <HAL_RCC_OscConfig+0x4e4>)
 800490c:	2201      	movs	r2, #1
 800490e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004910:	f7fd fff2 	bl	80028f8 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004918:	f7fd ffee 	bl	80028f8 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e1a1      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800492a:	4b72      	ldr	r3, [pc, #456]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0f0      	beq.n	8004918 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004936:	4b6f      	ldr	r3, [pc, #444]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	496c      	ldr	r1, [pc, #432]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004944:	4313      	orrs	r3, r2
 8004946:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004948:	4b6a      	ldr	r3, [pc, #424]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	061b      	lsls	r3, r3, #24
 8004956:	4967      	ldr	r1, [pc, #412]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004958:	4313      	orrs	r3, r2
 800495a:	604b      	str	r3, [r1, #4]
 800495c:	e015      	b.n	800498a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800495e:	4b69      	ldr	r3, [pc, #420]	@ (8004b04 <HAL_RCC_OscConfig+0x4e4>)
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004964:	f7fd ffc8 	bl	80028f8 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800496c:	f7fd ffc4 	bl	80028f8 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e177      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800497e:	4b5d      	ldr	r3, [pc, #372]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f0      	bne.n	800496c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d030      	beq.n	80049f8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d016      	beq.n	80049cc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800499e:	4b5a      	ldr	r3, [pc, #360]	@ (8004b08 <HAL_RCC_OscConfig+0x4e8>)
 80049a0:	2201      	movs	r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a4:	f7fd ffa8 	bl	80028f8 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049ac:	f7fd ffa4 	bl	80028f8 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e157      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049be:	4b4d      	ldr	r3, [pc, #308]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 80049c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0f0      	beq.n	80049ac <HAL_RCC_OscConfig+0x38c>
 80049ca:	e015      	b.n	80049f8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049cc:	4b4e      	ldr	r3, [pc, #312]	@ (8004b08 <HAL_RCC_OscConfig+0x4e8>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049d2:	f7fd ff91 	bl	80028f8 <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049da:	f7fd ff8d 	bl	80028f8 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e140      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049ec:	4b41      	ldr	r3, [pc, #260]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 80049ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1f0      	bne.n	80049da <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 80b5 	beq.w	8004b70 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a06:	2300      	movs	r3, #0
 8004a08:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a0a:	4b3a      	ldr	r3, [pc, #232]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10d      	bne.n	8004a32 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a16:	4b37      	ldr	r3, [pc, #220]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1a:	4a36      	ldr	r2, [pc, #216]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a20:	6253      	str	r3, [r2, #36]	@ 0x24
 8004a22:	4b34      	ldr	r3, [pc, #208]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a2a:	60bb      	str	r3, [r7, #8]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a32:	4b36      	ldr	r3, [pc, #216]	@ (8004b0c <HAL_RCC_OscConfig+0x4ec>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d118      	bne.n	8004a70 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a3e:	4b33      	ldr	r3, [pc, #204]	@ (8004b0c <HAL_RCC_OscConfig+0x4ec>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a32      	ldr	r2, [pc, #200]	@ (8004b0c <HAL_RCC_OscConfig+0x4ec>)
 8004a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a4a:	f7fd ff55 	bl	80028f8 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a52:	f7fd ff51 	bl	80028f8 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b64      	cmp	r3, #100	@ 0x64
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e104      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a64:	4b29      	ldr	r3, [pc, #164]	@ (8004b0c <HAL_RCC_OscConfig+0x4ec>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0f0      	beq.n	8004a52 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d106      	bne.n	8004a86 <HAL_RCC_OscConfig+0x466>
 8004a78:	4b1e      	ldr	r3, [pc, #120]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004a7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a82:	6353      	str	r3, [r2, #52]	@ 0x34
 8004a84:	e02d      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4c2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10c      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x488>
 8004a8e:	4b19      	ldr	r3, [pc, #100]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a92:	4a18      	ldr	r2, [pc, #96]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004a94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a98:	6353      	str	r3, [r2, #52]	@ 0x34
 8004a9a:	4b16      	ldr	r3, [pc, #88]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a9e:	4a15      	ldr	r2, [pc, #84]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004aa0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004aa4:	6353      	str	r3, [r2, #52]	@ 0x34
 8004aa6:	e01c      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4c2>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b05      	cmp	r3, #5
 8004aae:	d10c      	bne.n	8004aca <HAL_RCC_OscConfig+0x4aa>
 8004ab0:	4b10      	ldr	r3, [pc, #64]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab4:	4a0f      	ldr	r2, [pc, #60]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004ab6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004aba:	6353      	str	r3, [r2, #52]	@ 0x34
 8004abc:	4b0d      	ldr	r3, [pc, #52]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac0:	4a0c      	ldr	r2, [pc, #48]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004ac2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ac6:	6353      	str	r3, [r2, #52]	@ 0x34
 8004ac8:	e00b      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4c2>
 8004aca:	4b0a      	ldr	r3, [pc, #40]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ace:	4a09      	ldr	r2, [pc, #36]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ad4:	6353      	str	r3, [r2, #52]	@ 0x34
 8004ad6:	4b07      	ldr	r3, [pc, #28]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ada:	4a06      	ldr	r2, [pc, #24]	@ (8004af4 <HAL_RCC_OscConfig+0x4d4>)
 8004adc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ae0:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d024      	beq.n	8004b34 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aea:	f7fd ff05 	bl	80028f8 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004af0:	e019      	b.n	8004b26 <HAL_RCC_OscConfig+0x506>
 8004af2:	bf00      	nop
 8004af4:	40023800 	.word	0x40023800
 8004af8:	080096f0 	.word	0x080096f0
 8004afc:	20000000 	.word	0x20000000
 8004b00:	20000004 	.word	0x20000004
 8004b04:	42470020 	.word	0x42470020
 8004b08:	42470680 	.word	0x42470680
 8004b0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b10:	f7fd fef2 	bl	80028f8 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e0a3      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b26:	4b54      	ldr	r3, [pc, #336]	@ (8004c78 <HAL_RCC_OscConfig+0x658>)
 8004b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0ee      	beq.n	8004b10 <HAL_RCC_OscConfig+0x4f0>
 8004b32:	e014      	b.n	8004b5e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b34:	f7fd fee0 	bl	80028f8 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b3a:	e00a      	b.n	8004b52 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b3c:	f7fd fedc 	bl	80028f8 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e08d      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b52:	4b49      	ldr	r3, [pc, #292]	@ (8004c78 <HAL_RCC_OscConfig+0x658>)
 8004b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1ee      	bne.n	8004b3c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b5e:	7ffb      	ldrb	r3, [r7, #31]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d105      	bne.n	8004b70 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b64:	4b44      	ldr	r3, [pc, #272]	@ (8004c78 <HAL_RCC_OscConfig+0x658>)
 8004b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b68:	4a43      	ldr	r2, [pc, #268]	@ (8004c78 <HAL_RCC_OscConfig+0x658>)
 8004b6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b6e:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d079      	beq.n	8004c6c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	2b0c      	cmp	r3, #12
 8004b7c:	d056      	beq.n	8004c2c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d13b      	bne.n	8004bfe <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b86:	4b3d      	ldr	r3, [pc, #244]	@ (8004c7c <HAL_RCC_OscConfig+0x65c>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8c:	f7fd feb4 	bl	80028f8 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b94:	f7fd feb0 	bl	80028f8 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e063      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ba6:	4b34      	ldr	r3, [pc, #208]	@ (8004c78 <HAL_RCC_OscConfig+0x658>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bb2:	4b31      	ldr	r3, [pc, #196]	@ (8004c78 <HAL_RCC_OscConfig+0x658>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc2:	4319      	orrs	r1, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	492b      	ldr	r1, [pc, #172]	@ (8004c78 <HAL_RCC_OscConfig+0x658>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c7c <HAL_RCC_OscConfig+0x65c>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd6:	f7fd fe8f 	bl	80028f8 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bde:	f7fd fe8b 	bl	80028f8 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e03e      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bf0:	4b21      	ldr	r3, [pc, #132]	@ (8004c78 <HAL_RCC_OscConfig+0x658>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0f0      	beq.n	8004bde <HAL_RCC_OscConfig+0x5be>
 8004bfc:	e036      	b.n	8004c6c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8004c7c <HAL_RCC_OscConfig+0x65c>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c04:	f7fd fe78 	bl	80028f8 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c0c:	f7fd fe74 	bl	80028f8 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e027      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c1e:	4b16      	ldr	r3, [pc, #88]	@ (8004c78 <HAL_RCC_OscConfig+0x658>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f0      	bne.n	8004c0c <HAL_RCC_OscConfig+0x5ec>
 8004c2a:	e01f      	b.n	8004c6c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e01a      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c38:	4b0f      	ldr	r3, [pc, #60]	@ (8004c78 <HAL_RCC_OscConfig+0x658>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d10d      	bne.n	8004c68 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d106      	bne.n	8004c68 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d001      	beq.n	8004c6c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e000      	b.n	8004c6e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3720      	adds	r7, #32
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	42470060 	.word	0x42470060

08004c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e11a      	b.n	8004eca <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c94:	4b8f      	ldr	r3, [pc, #572]	@ (8004ed4 <HAL_RCC_ClockConfig+0x254>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d919      	bls.n	8004cd6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d105      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x34>
 8004ca8:	4b8a      	ldr	r3, [pc, #552]	@ (8004ed4 <HAL_RCC_ClockConfig+0x254>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a89      	ldr	r2, [pc, #548]	@ (8004ed4 <HAL_RCC_ClockConfig+0x254>)
 8004cae:	f043 0304 	orr.w	r3, r3, #4
 8004cb2:	6013      	str	r3, [r2, #0]
 8004cb4:	4b87      	ldr	r3, [pc, #540]	@ (8004ed4 <HAL_RCC_ClockConfig+0x254>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f023 0201 	bic.w	r2, r3, #1
 8004cbc:	4985      	ldr	r1, [pc, #532]	@ (8004ed4 <HAL_RCC_ClockConfig+0x254>)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc4:	4b83      	ldr	r3, [pc, #524]	@ (8004ed4 <HAL_RCC_ClockConfig+0x254>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d001      	beq.n	8004cd6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e0f9      	b.n	8004eca <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d008      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce2:	4b7d      	ldr	r3, [pc, #500]	@ (8004ed8 <HAL_RCC_ClockConfig+0x258>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	497a      	ldr	r1, [pc, #488]	@ (8004ed8 <HAL_RCC_ClockConfig+0x258>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 808e 	beq.w	8004e1e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d107      	bne.n	8004d1a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d0a:	4b73      	ldr	r3, [pc, #460]	@ (8004ed8 <HAL_RCC_ClockConfig+0x258>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d121      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e0d7      	b.n	8004eca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d107      	bne.n	8004d32 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d22:	4b6d      	ldr	r3, [pc, #436]	@ (8004ed8 <HAL_RCC_ClockConfig+0x258>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d115      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e0cb      	b.n	8004eca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d107      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d3a:	4b67      	ldr	r3, [pc, #412]	@ (8004ed8 <HAL_RCC_ClockConfig+0x258>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e0bf      	b.n	8004eca <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d4a:	4b63      	ldr	r3, [pc, #396]	@ (8004ed8 <HAL_RCC_ClockConfig+0x258>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e0b7      	b.n	8004eca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d5a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ed8 <HAL_RCC_ClockConfig+0x258>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f023 0203 	bic.w	r2, r3, #3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	495c      	ldr	r1, [pc, #368]	@ (8004ed8 <HAL_RCC_ClockConfig+0x258>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d6c:	f7fd fdc4 	bl	80028f8 <HAL_GetTick>
 8004d70:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d112      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d7a:	e00a      	b.n	8004d92 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d7c:	f7fd fdbc 	bl	80028f8 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e09b      	b.n	8004eca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d92:	4b51      	ldr	r3, [pc, #324]	@ (8004ed8 <HAL_RCC_ClockConfig+0x258>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 030c 	and.w	r3, r3, #12
 8004d9a:	2b08      	cmp	r3, #8
 8004d9c:	d1ee      	bne.n	8004d7c <HAL_RCC_ClockConfig+0xfc>
 8004d9e:	e03e      	b.n	8004e1e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d112      	bne.n	8004dce <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004da8:	e00a      	b.n	8004dc0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004daa:	f7fd fda5 	bl	80028f8 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e084      	b.n	8004eca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dc0:	4b45      	ldr	r3, [pc, #276]	@ (8004ed8 <HAL_RCC_ClockConfig+0x258>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 030c 	and.w	r3, r3, #12
 8004dc8:	2b0c      	cmp	r3, #12
 8004dca:	d1ee      	bne.n	8004daa <HAL_RCC_ClockConfig+0x12a>
 8004dcc:	e027      	b.n	8004e1e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d11d      	bne.n	8004e12 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dd6:	e00a      	b.n	8004dee <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd8:	f7fd fd8e 	bl	80028f8 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e06d      	b.n	8004eca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dee:	4b3a      	ldr	r3, [pc, #232]	@ (8004ed8 <HAL_RCC_ClockConfig+0x258>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 030c 	and.w	r3, r3, #12
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d1ee      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x158>
 8004dfa:	e010      	b.n	8004e1e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dfc:	f7fd fd7c 	bl	80028f8 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e05b      	b.n	8004eca <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e12:	4b31      	ldr	r3, [pc, #196]	@ (8004ed8 <HAL_RCC_ClockConfig+0x258>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 030c 	and.w	r3, r3, #12
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1ee      	bne.n	8004dfc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ed4 <HAL_RCC_ClockConfig+0x254>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d219      	bcs.n	8004e60 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d105      	bne.n	8004e3e <HAL_RCC_ClockConfig+0x1be>
 8004e32:	4b28      	ldr	r3, [pc, #160]	@ (8004ed4 <HAL_RCC_ClockConfig+0x254>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a27      	ldr	r2, [pc, #156]	@ (8004ed4 <HAL_RCC_ClockConfig+0x254>)
 8004e38:	f043 0304 	orr.w	r3, r3, #4
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	4b25      	ldr	r3, [pc, #148]	@ (8004ed4 <HAL_RCC_ClockConfig+0x254>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f023 0201 	bic.w	r2, r3, #1
 8004e46:	4923      	ldr	r1, [pc, #140]	@ (8004ed4 <HAL_RCC_ClockConfig+0x254>)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4e:	4b21      	ldr	r3, [pc, #132]	@ (8004ed4 <HAL_RCC_ClockConfig+0x254>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d001      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e034      	b.n	8004eca <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d008      	beq.n	8004e7e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed8 <HAL_RCC_ClockConfig+0x258>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	4917      	ldr	r1, [pc, #92]	@ (8004ed8 <HAL_RCC_ClockConfig+0x258>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0308 	and.w	r3, r3, #8
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d009      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e8a:	4b13      	ldr	r3, [pc, #76]	@ (8004ed8 <HAL_RCC_ClockConfig+0x258>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	490f      	ldr	r1, [pc, #60]	@ (8004ed8 <HAL_RCC_ClockConfig+0x258>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e9e:	f000 f823 	bl	8004ee8 <HAL_RCC_GetSysClockFreq>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed8 <HAL_RCC_ClockConfig+0x258>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	091b      	lsrs	r3, r3, #4
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	490b      	ldr	r1, [pc, #44]	@ (8004edc <HAL_RCC_ClockConfig+0x25c>)
 8004eb0:	5ccb      	ldrb	r3, [r1, r3]
 8004eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee0 <HAL_RCC_ClockConfig+0x260>)
 8004eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004eba:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee4 <HAL_RCC_ClockConfig+0x264>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fd fcce 	bl	8002860 <HAL_InitTick>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ec8:	7afb      	ldrb	r3, [r7, #11]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40023c00 	.word	0x40023c00
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	080096f0 	.word	0x080096f0
 8004ee0:	20000000 	.word	0x20000000
 8004ee4:	20000004 	.word	0x20000004

08004ee8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eec:	b092      	sub	sp, #72	@ 0x48
 8004eee:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004ef0:	4b79      	ldr	r3, [pc, #484]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ef8:	f003 030c 	and.w	r3, r3, #12
 8004efc:	2b0c      	cmp	r3, #12
 8004efe:	d00d      	beq.n	8004f1c <HAL_RCC_GetSysClockFreq+0x34>
 8004f00:	2b0c      	cmp	r3, #12
 8004f02:	f200 80d5 	bhi.w	80050b0 <HAL_RCC_GetSysClockFreq+0x1c8>
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d002      	beq.n	8004f10 <HAL_RCC_GetSysClockFreq+0x28>
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d003      	beq.n	8004f16 <HAL_RCC_GetSysClockFreq+0x2e>
 8004f0e:	e0cf      	b.n	80050b0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f10:	4b72      	ldr	r3, [pc, #456]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004f12:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004f14:	e0da      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f16:	4b72      	ldr	r3, [pc, #456]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004f18:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004f1a:	e0d7      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f1e:	0c9b      	lsrs	r3, r3, #18
 8004f20:	f003 020f 	and.w	r2, r3, #15
 8004f24:	4b6f      	ldr	r3, [pc, #444]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004f26:	5c9b      	ldrb	r3, [r3, r2]
 8004f28:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f2c:	0d9b      	lsrs	r3, r3, #22
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	3301      	adds	r3, #1
 8004f34:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f36:	4b68      	ldr	r3, [pc, #416]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d05d      	beq.n	8004ffe <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f44:	2200      	movs	r2, #0
 8004f46:	4618      	mov	r0, r3
 8004f48:	4611      	mov	r1, r2
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	460d      	mov	r5, r1
 8004f4e:	4622      	mov	r2, r4
 8004f50:	462b      	mov	r3, r5
 8004f52:	f04f 0000 	mov.w	r0, #0
 8004f56:	f04f 0100 	mov.w	r1, #0
 8004f5a:	0159      	lsls	r1, r3, #5
 8004f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f60:	0150      	lsls	r0, r2, #5
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4621      	mov	r1, r4
 8004f68:	1a51      	subs	r1, r2, r1
 8004f6a:	6139      	str	r1, [r7, #16]
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	f04f 0300 	mov.w	r3, #0
 8004f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f80:	4659      	mov	r1, fp
 8004f82:	018b      	lsls	r3, r1, #6
 8004f84:	4651      	mov	r1, sl
 8004f86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f8a:	4651      	mov	r1, sl
 8004f8c:	018a      	lsls	r2, r1, #6
 8004f8e:	46d4      	mov	ip, sl
 8004f90:	ebb2 080c 	subs.w	r8, r2, ip
 8004f94:	4659      	mov	r1, fp
 8004f96:	eb63 0901 	sbc.w	r9, r3, r1
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004faa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fae:	4690      	mov	r8, r2
 8004fb0:	4699      	mov	r9, r3
 8004fb2:	4623      	mov	r3, r4
 8004fb4:	eb18 0303 	adds.w	r3, r8, r3
 8004fb8:	60bb      	str	r3, [r7, #8]
 8004fba:	462b      	mov	r3, r5
 8004fbc:	eb49 0303 	adc.w	r3, r9, r3
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fce:	4629      	mov	r1, r5
 8004fd0:	024b      	lsls	r3, r1, #9
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	4629      	mov	r1, r5
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004fdc:	4601      	mov	r1, r0
 8004fde:	024a      	lsls	r2, r1, #9
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ff0:	f7fc f890 	bl	8001114 <__aeabi_uldivmod>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ffc:	e055      	b.n	80050aa <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005000:	2200      	movs	r2, #0
 8005002:	623b      	str	r3, [r7, #32]
 8005004:	627a      	str	r2, [r7, #36]	@ 0x24
 8005006:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800500a:	4642      	mov	r2, r8
 800500c:	464b      	mov	r3, r9
 800500e:	f04f 0000 	mov.w	r0, #0
 8005012:	f04f 0100 	mov.w	r1, #0
 8005016:	0159      	lsls	r1, r3, #5
 8005018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800501c:	0150      	lsls	r0, r2, #5
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	46c4      	mov	ip, r8
 8005024:	ebb2 0a0c 	subs.w	sl, r2, ip
 8005028:	4640      	mov	r0, r8
 800502a:	4649      	mov	r1, r9
 800502c:	468c      	mov	ip, r1
 800502e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800503e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005042:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005046:	ebb2 040a 	subs.w	r4, r2, sl
 800504a:	eb63 050b 	sbc.w	r5, r3, fp
 800504e:	f04f 0200 	mov.w	r2, #0
 8005052:	f04f 0300 	mov.w	r3, #0
 8005056:	00eb      	lsls	r3, r5, #3
 8005058:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800505c:	00e2      	lsls	r2, r4, #3
 800505e:	4614      	mov	r4, r2
 8005060:	461d      	mov	r5, r3
 8005062:	4603      	mov	r3, r0
 8005064:	18e3      	adds	r3, r4, r3
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	460b      	mov	r3, r1
 800506a:	eb45 0303 	adc.w	r3, r5, r3
 800506e:	607b      	str	r3, [r7, #4]
 8005070:	f04f 0200 	mov.w	r2, #0
 8005074:	f04f 0300 	mov.w	r3, #0
 8005078:	e9d7 4500 	ldrd	r4, r5, [r7]
 800507c:	4629      	mov	r1, r5
 800507e:	028b      	lsls	r3, r1, #10
 8005080:	4620      	mov	r0, r4
 8005082:	4629      	mov	r1, r5
 8005084:	4604      	mov	r4, r0
 8005086:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800508a:	4601      	mov	r1, r0
 800508c:	028a      	lsls	r2, r1, #10
 800508e:	4610      	mov	r0, r2
 8005090:	4619      	mov	r1, r3
 8005092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005094:	2200      	movs	r2, #0
 8005096:	61bb      	str	r3, [r7, #24]
 8005098:	61fa      	str	r2, [r7, #28]
 800509a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800509e:	f7fc f839 	bl	8001114 <__aeabi_uldivmod>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	4613      	mov	r3, r2
 80050a8:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 80050aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050ac:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80050ae:	e00d      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80050b0:	4b09      	ldr	r3, [pc, #36]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	0b5b      	lsrs	r3, r3, #13
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80050bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050be:	3301      	adds	r3, #1
 80050c0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80050ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3748      	adds	r7, #72	@ 0x48
 80050d2:	46bd      	mov	sp, r7
 80050d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050d8:	40023800 	.word	0x40023800
 80050dc:	00f42400 	.word	0x00f42400
 80050e0:	007a1200 	.word	0x007a1200
 80050e4:	080096e4 	.word	0x080096e4

080050e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050ec:	4b02      	ldr	r3, [pc, #8]	@ (80050f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80050ee:	681b      	ldr	r3, [r3, #0]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bc80      	pop	{r7}
 80050f6:	4770      	bx	lr
 80050f8:	20000000 	.word	0x20000000

080050fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005100:	f7ff fff2 	bl	80050e8 <HAL_RCC_GetHCLKFreq>
 8005104:	4602      	mov	r2, r0
 8005106:	4b05      	ldr	r3, [pc, #20]	@ (800511c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	0a1b      	lsrs	r3, r3, #8
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	4903      	ldr	r1, [pc, #12]	@ (8005120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005112:	5ccb      	ldrb	r3, [r1, r3]
 8005114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005118:	4618      	mov	r0, r3
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40023800 	.word	0x40023800
 8005120:	08009700 	.word	0x08009700

08005124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005128:	f7ff ffde 	bl	80050e8 <HAL_RCC_GetHCLKFreq>
 800512c:	4602      	mov	r2, r0
 800512e:	4b05      	ldr	r3, [pc, #20]	@ (8005144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	0adb      	lsrs	r3, r3, #11
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	4903      	ldr	r1, [pc, #12]	@ (8005148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800513a:	5ccb      	ldrb	r3, [r1, r3]
 800513c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005140:	4618      	mov	r0, r3
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40023800 	.word	0x40023800
 8005148:	08009700 	.word	0x08009700

0800514c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005154:	2300      	movs	r3, #0
 8005156:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005158:	4b29      	ldr	r3, [pc, #164]	@ (8005200 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d12c      	bne.n	80051be <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005164:	4b26      	ldr	r3, [pc, #152]	@ (8005200 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005170:	4b24      	ldr	r3, [pc, #144]	@ (8005204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	e016      	b.n	80051aa <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800517c:	4b20      	ldr	r3, [pc, #128]	@ (8005200 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	4a1f      	ldr	r2, [pc, #124]	@ (8005200 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005186:	6253      	str	r3, [r2, #36]	@ 0x24
 8005188:	4b1d      	ldr	r3, [pc, #116]	@ (8005200 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800518a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005194:	4b1b      	ldr	r3, [pc, #108]	@ (8005204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800519c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800519e:	4b18      	ldr	r3, [pc, #96]	@ (8005200 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80051a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a2:	4a17      	ldr	r2, [pc, #92]	@ (8005200 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80051a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051a8:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80051b0:	d105      	bne.n	80051be <RCC_SetFlashLatencyFromMSIRange+0x72>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80051b8:	d101      	bne.n	80051be <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80051ba:	2301      	movs	r3, #1
 80051bc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d105      	bne.n	80051d0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80051c4:	4b10      	ldr	r3, [pc, #64]	@ (8005208 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a0f      	ldr	r2, [pc, #60]	@ (8005208 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051ca:	f043 0304 	orr.w	r3, r3, #4
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	4b0d      	ldr	r3, [pc, #52]	@ (8005208 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f023 0201 	bic.w	r2, r3, #1
 80051d8:	490b      	ldr	r1, [pc, #44]	@ (8005208 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80051e0:	4b09      	ldr	r3, [pc, #36]	@ (8005208 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d001      	beq.n	80051f2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	371c      	adds	r7, #28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bc80      	pop	{r7}
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40023800 	.word	0x40023800
 8005204:	40007000 	.word	0x40007000
 8005208:	40023c00 	.word	0x40023c00

0800520c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80ed 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800522e:	2300      	movs	r3, #0
 8005230:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005232:	4b78      	ldr	r3, [pc, #480]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10d      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800523e:	4b75      	ldr	r3, [pc, #468]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	4a74      	ldr	r2, [pc, #464]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005248:	6253      	str	r3, [r2, #36]	@ 0x24
 800524a:	4b72      	ldr	r3, [pc, #456]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800524c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005252:	60bb      	str	r3, [r7, #8]
 8005254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005256:	2301      	movs	r3, #1
 8005258:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525a:	4b6f      	ldr	r3, [pc, #444]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005262:	2b00      	cmp	r3, #0
 8005264:	d118      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005266:	4b6c      	ldr	r3, [pc, #432]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a6b      	ldr	r2, [pc, #428]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800526c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005272:	f7fd fb41 	bl	80028f8 <HAL_GetTick>
 8005276:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005278:	e008      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800527a:	f7fd fb3d 	bl	80028f8 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b64      	cmp	r3, #100	@ 0x64
 8005286:	d901      	bls.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e0be      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528c:	4b62      	ldr	r3, [pc, #392]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0f0      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005298:	4b5e      	ldr	r3, [pc, #376]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80052a0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d106      	bne.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d00f      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80052ca:	d108      	bne.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80052cc:	4b51      	ldr	r3, [pc, #324]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052d8:	d101      	bne.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e095      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80052de:	4b4d      	ldr	r3, [pc, #308]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80052e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052e6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d041      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d005      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10c      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	429a      	cmp	r2, r3
 8005314:	d02d      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d027      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005322:	4b3c      	ldr	r3, [pc, #240]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005326:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800532a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800532c:	4b3b      	ldr	r3, [pc, #236]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800532e:	2201      	movs	r2, #1
 8005330:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005332:	4b3a      	ldr	r3, [pc, #232]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005338:	4a36      	ldr	r2, [pc, #216]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6353      	str	r3, [r2, #52]	@ 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005344:	2b00      	cmp	r3, #0
 8005346:	d014      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005348:	f7fd fad6 	bl	80028f8 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800534e:	e00a      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005350:	f7fd fad2 	bl	80028f8 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800535e:	4293      	cmp	r3, r2
 8005360:	d901      	bls.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e051      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005366:	4b2b      	ldr	r3, [pc, #172]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800536a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0ee      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01a      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005386:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800538a:	d10a      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800538c:	4b21      	ldr	r3, [pc, #132]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800539c:	491d      	ldr	r1, [pc, #116]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	600b      	str	r3, [r1, #0]
 80053a2:	4b1c      	ldr	r3, [pc, #112]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80053a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80053ae:	4919      	ldr	r1, [pc, #100]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	634b      	str	r3, [r1, #52]	@ 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d01a      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80053c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80053cc:	d10a      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80053ce:	4b11      	ldr	r3, [pc, #68]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80053de:	490d      	ldr	r1, [pc, #52]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	600b      	str	r3, [r1, #0]
 80053e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80053e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80053f0:	4908      	ldr	r1, [pc, #32]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	634b      	str	r3, [r1, #52]	@ 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80053f6:	7dfb      	ldrb	r3, [r7, #23]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d105      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053fc:	4b05      	ldr	r3, [pc, #20]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80053fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005400:	4a04      	ldr	r2, [pc, #16]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005402:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005406:	6253      	str	r3, [r2, #36]	@ 0x24
    }
  }

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40023800 	.word	0x40023800
 8005418:	40007000 	.word	0x40007000
 800541c:	424706dc 	.word	0x424706dc

08005420 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e073      	b.n	800551e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	7f5b      	ldrb	r3, [r3, #29]
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d105      	bne.n	800544c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7fc ff3c 	bl	80022c4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f003 0310 	and.w	r3, r3, #16
 800545c:	2b10      	cmp	r3, #16
 800545e:	d055      	beq.n	800550c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	22ca      	movs	r2, #202	@ 0xca
 8005466:	625a      	str	r2, [r3, #36]	@ 0x24
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2253      	movs	r2, #83	@ 0x53
 800546e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f99b 	bl	80057ac <RTC_EnterInitMode>
 8005476:	4603      	mov	r3, r0
 8005478:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d12c      	bne.n	80054da <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6812      	ldr	r2, [r2, #0]
 800548a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800548e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005492:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6899      	ldr	r1, [r3, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	68d2      	ldr	r2, [r2, #12]
 80054ba:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6919      	ldr	r1, [r3, #16]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	041a      	lsls	r2, r3, #16
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f9a2 	bl	800581a <RTC_ExitInitMode>
 80054d6:	4603      	mov	r3, r0
 80054d8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d110      	bne.n	8005502 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80054ee:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	22ff      	movs	r2, #255	@ 0xff
 8005508:	625a      	str	r2, [r3, #36]	@ 0x24
 800550a:	e001      	b.n	8005510 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005510:	7bfb      	ldrb	r3, [r7, #15]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d102      	bne.n	800551c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800551c:	7bfb      	ldrb	r3, [r7, #15]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005526:	b590      	push	{r4, r7, lr}
 8005528:	b087      	sub	sp, #28
 800552a:	af00      	add	r7, sp, #0
 800552c:	60f8      	str	r0, [r7, #12]
 800552e:	60b9      	str	r1, [r7, #8]
 8005530:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	7f1b      	ldrb	r3, [r3, #28]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d101      	bne.n	8005542 <HAL_RTC_SetTime+0x1c>
 800553e:	2302      	movs	r3, #2
 8005540:	e087      	b.n	8005652 <HAL_RTC_SetTime+0x12c>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2201      	movs	r2, #1
 8005546:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2202      	movs	r2, #2
 800554c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d126      	bne.n	80055a2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	d102      	bne.n	8005568 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2200      	movs	r2, #0
 8005566:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	4618      	mov	r0, r3
 800556e:	f000 f979 	bl	8005864 <RTC_ByteToBcd2>
 8005572:	4603      	mov	r3, r0
 8005574:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	785b      	ldrb	r3, [r3, #1]
 800557a:	4618      	mov	r0, r3
 800557c:	f000 f972 	bl	8005864 <RTC_ByteToBcd2>
 8005580:	4603      	mov	r3, r0
 8005582:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005584:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	789b      	ldrb	r3, [r3, #2]
 800558a:	4618      	mov	r0, r3
 800558c:	f000 f96a 	bl	8005864 <RTC_ByteToBcd2>
 8005590:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005592:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	78db      	ldrb	r3, [r3, #3]
 800559a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800559c:	4313      	orrs	r3, r2
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	e018      	b.n	80055d4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2200      	movs	r2, #0
 80055b4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	785b      	ldrb	r3, [r3, #1]
 80055c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80055c2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80055c8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	78db      	ldrb	r3, [r3, #3]
 80055ce:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80055d0:	4313      	orrs	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	22ca      	movs	r2, #202	@ 0xca
 80055da:	625a      	str	r2, [r3, #36]	@ 0x24
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2253      	movs	r2, #83	@ 0x53
 80055e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f8e1 	bl	80057ac <RTC_EnterInitMode>
 80055ea:	4603      	mov	r3, r0
 80055ec:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80055ee:	7cfb      	ldrb	r3, [r7, #19]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d120      	bne.n	8005636 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80055fe:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005602:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005612:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6899      	ldr	r1, [r3, #8]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	431a      	orrs	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 f8f4 	bl	800581a <RTC_ExitInitMode>
 8005632:	4603      	mov	r3, r0
 8005634:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005636:	7cfb      	ldrb	r3, [r7, #19]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d102      	bne.n	8005642 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2201      	movs	r2, #1
 8005640:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	22ff      	movs	r2, #255	@ 0xff
 8005648:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	771a      	strb	r2, [r3, #28]

  return status;
 8005650:	7cfb      	ldrb	r3, [r7, #19]
}
 8005652:	4618      	mov	r0, r3
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	bd90      	pop	{r4, r7, pc}

0800565a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800565a:	b590      	push	{r4, r7, lr}
 800565c:	b087      	sub	sp, #28
 800565e:	af00      	add	r7, sp, #0
 8005660:	60f8      	str	r0, [r7, #12]
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	7f1b      	ldrb	r3, [r3, #28]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d101      	bne.n	8005676 <HAL_RTC_SetDate+0x1c>
 8005672:	2302      	movs	r3, #2
 8005674:	e071      	b.n	800575a <HAL_RTC_SetDate+0x100>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2202      	movs	r2, #2
 8005680:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10e      	bne.n	80056a6 <HAL_RTC_SetDate+0x4c>
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	785b      	ldrb	r3, [r3, #1]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	785b      	ldrb	r3, [r3, #1]
 8005698:	f023 0310 	bic.w	r3, r3, #16
 800569c:	b2db      	uxtb	r3, r3
 800569e:	330a      	adds	r3, #10
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d11c      	bne.n	80056e6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	78db      	ldrb	r3, [r3, #3]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 f8d7 	bl	8005864 <RTC_ByteToBcd2>
 80056b6:	4603      	mov	r3, r0
 80056b8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	785b      	ldrb	r3, [r3, #1]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f8d0 	bl	8005864 <RTC_ByteToBcd2>
 80056c4:	4603      	mov	r3, r0
 80056c6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80056c8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	789b      	ldrb	r3, [r3, #2]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 f8c8 	bl	8005864 <RTC_ByteToBcd2>
 80056d4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80056d6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	e00e      	b.n	8005704 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	78db      	ldrb	r3, [r3, #3]
 80056ea:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	785b      	ldrb	r3, [r3, #1]
 80056f0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80056f2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80056f8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	22ca      	movs	r2, #202	@ 0xca
 800570a:	625a      	str	r2, [r3, #36]	@ 0x24
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2253      	movs	r2, #83	@ 0x53
 8005712:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f849 	bl	80057ac <RTC_EnterInitMode>
 800571a:	4603      	mov	r3, r0
 800571c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800571e:	7cfb      	ldrb	r3, [r7, #19]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10c      	bne.n	800573e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800572e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005732:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 f870 	bl	800581a <RTC_ExitInitMode>
 800573a:	4603      	mov	r3, r0
 800573c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800573e:	7cfb      	ldrb	r3, [r7, #19]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d102      	bne.n	800574a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2201      	movs	r2, #1
 8005748:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	22ff      	movs	r2, #255	@ 0xff
 8005750:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	771a      	strb	r2, [r3, #28]

  return status;
 8005758:	7cfb      	ldrb	r3, [r7, #19]
}
 800575a:	4618      	mov	r0, r3
 800575c:	371c      	adds	r7, #28
 800575e:	46bd      	mov	sp, r7
 8005760:	bd90      	pop	{r4, r7, pc}

08005762 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f64f 7257 	movw	r2, #65367	@ 0xff57
 8005776:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005778:	f7fd f8be 	bl	80028f8 <HAL_GetTick>
 800577c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800577e:	e009      	b.n	8005794 <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005780:	f7fd f8ba 	bl	80028f8 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800578e:	d901      	bls.n	8005794 <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e007      	b.n	80057a4 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0ee      	beq.n	8005780 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d122      	bne.n	8005810 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80057d8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057da:	f7fd f88d 	bl	80028f8 <HAL_GetTick>
 80057de:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80057e0:	e00c      	b.n	80057fc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057e2:	f7fd f889 	bl	80028f8 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057f0:	d904      	bls.n	80057fc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2204      	movs	r2, #4
 80057f6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	d102      	bne.n	8005810 <RTC_EnterInitMode+0x64>
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d1e8      	bne.n	80057e2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005834:	60da      	str	r2, [r3, #12]

#if defined(RTC_CR_BYPSHAD)
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10a      	bne.n	800585a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f7ff ff8c 	bl	8005762 <HAL_RTC_WaitForSynchro>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d004      	beq.n	800585a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2204      	movs	r2, #4
 8005854:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	73fb      	strb	r3, [r7, #15]
    hrtc->State = HAL_RTC_STATE_ERROR;
    status = HAL_ERROR;
  }
#endif /* RTC_CR_BYPSHAD */

  return status;
 800585a:	7bfb      	ldrb	r3, [r7, #15]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	4603      	mov	r3, r0
 800586c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005872:	e005      	b.n	8005880 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3301      	adds	r3, #1
 8005878:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	3b0a      	subs	r3, #10
 800587e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005880:	79fb      	ldrb	r3, [r7, #7]
 8005882:	2b09      	cmp	r3, #9
 8005884:	d8f6      	bhi.n	8005874 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	b2da      	uxtb	r2, r3
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	4313      	orrs	r3, r2
 8005892:	b2db      	uxtb	r3, r3
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr
	...

080058a0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80058ac:	4b59      	ldr	r3, [pc, #356]	@ (8005a14 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a59      	ldr	r2, [pc, #356]	@ (8005a18 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	0adb      	lsrs	r3, r3, #11
 80058b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80058bc:	fb02 f303 	mul.w	r3, r2, r3
 80058c0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	7f1b      	ldrb	r3, [r3, #28]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d101      	bne.n	80058ce <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 80058ca:	2302      	movs	r3, #2
 80058cc:	e09d      	b.n	8005a0a <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2201      	movs	r2, #1
 80058d2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2202      	movs	r2, #2
 80058d8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	22ca      	movs	r2, #202	@ 0xca
 80058e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2253      	movs	r2, #83	@ 0x53
 80058e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d018      	beq.n	800592a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10b      	bne.n	800591c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	22ff      	movs	r2, #255	@ 0xff
 800590a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2203      	movs	r2, #3
 8005910:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e076      	b.n	8005a0a <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f003 0304 	and.w	r3, r3, #4
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e6      	bne.n	80058f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005938:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	b2da      	uxtb	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800594a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800594c:	4b31      	ldr	r3, [pc, #196]	@ (8005a14 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a31      	ldr	r2, [pc, #196]	@ (8005a18 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8005952:	fba2 2303 	umull	r2, r3, r2, r3
 8005956:	0adb      	lsrs	r3, r3, #11
 8005958:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800595c:	fb02 f303 	mul.w	r3, r2, r3
 8005960:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	3b01      	subs	r3, #1
 8005966:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10b      	bne.n	8005986 <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	22ff      	movs	r2, #255	@ 0xff
 8005974:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2203      	movs	r2, #3
 800597a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e041      	b.n	8005a0a <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d0e6      	beq.n	8005962 <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0207 	bic.w	r2, r2, #7
 80059a2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6899      	ldr	r1, [r3, #8]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80059bc:	4b17      	ldr	r3, [pc, #92]	@ (8005a1c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a16      	ldr	r2, [pc, #88]	@ (8005a1c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80059c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059c6:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80059c8:	4b14      	ldr	r3, [pc, #80]	@ (8005a1c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	4a13      	ldr	r2, [pc, #76]	@ (8005a1c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80059ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059d2:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059e2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059f2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	22ff      	movs	r2, #255	@ 0xff
 80059fa:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2201      	movs	r2, #1
 8005a00:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	371c      	adds	r7, #28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bc80      	pop	{r7}
 8005a12:	4770      	bx	lr
 8005a14:	20000000 	.word	0x20000000
 8005a18:	10624dd3 	.word	0x10624dd3
 8005a1c:	40010400 	.word	0x40010400

08005a20 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005a28:	4b0e      	ldr	r3, [pc, #56]	@ (8005a64 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8005a2a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005a2e:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00b      	beq.n	8005a56 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8005a4e:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7fc faa7 	bl	8001fa4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	775a      	strb	r2, [r3, #29]
}
 8005a5c:	bf00      	nop
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	40010400 	.word	0x40010400

08005a68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e042      	b.n	8005b00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d106      	bne.n	8005a94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fc fc34 	bl	80022fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2224      	movs	r2, #36	@ 0x24
 8005a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005aaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fe03 	bl	80066b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	691a      	ldr	r2, [r3, #16]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ac0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	695a      	ldr	r2, [r3, #20]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ad0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68da      	ldr	r2, [r3, #12]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ae0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08a      	sub	sp, #40	@ 0x28
 8005b0c:	af02      	add	r7, sp, #8
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	4613      	mov	r3, r2
 8005b16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b20      	cmp	r3, #32
 8005b26:	d16d      	bne.n	8005c04 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <HAL_UART_Transmit+0x2c>
 8005b2e:	88fb      	ldrh	r3, [r7, #6]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e066      	b.n	8005c06 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2221      	movs	r2, #33	@ 0x21
 8005b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b46:	f7fc fed7 	bl	80028f8 <HAL_GetTick>
 8005b4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	88fa      	ldrh	r2, [r7, #6]
 8005b50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	88fa      	ldrh	r2, [r7, #6]
 8005b56:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b60:	d108      	bne.n	8005b74 <HAL_UART_Transmit+0x6c>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d104      	bne.n	8005b74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	61bb      	str	r3, [r7, #24]
 8005b72:	e003      	b.n	8005b7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b7c:	e02a      	b.n	8005bd4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2200      	movs	r2, #0
 8005b86:	2180      	movs	r1, #128	@ 0x80
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 fb8b 	bl	80062a4 <UART_WaitOnFlagUntilTimeout>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e036      	b.n	8005c06 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10b      	bne.n	8005bb6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	3302      	adds	r3, #2
 8005bb2:	61bb      	str	r3, [r7, #24]
 8005bb4:	e007      	b.n	8005bc6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	781a      	ldrb	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1cf      	bne.n	8005b7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2200      	movs	r2, #0
 8005be6:	2140      	movs	r1, #64	@ 0x40
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 fb5b 	bl	80062a4 <UART_WaitOnFlagUntilTimeout>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e006      	b.n	8005c06 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	e000      	b.n	8005c06 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005c04:	2302      	movs	r3, #2
  }
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3720      	adds	r7, #32
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b08a      	sub	sp, #40	@ 0x28
 8005c12:	af02      	add	r7, sp, #8
 8005c14:	60f8      	str	r0, [r7, #12]
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	603b      	str	r3, [r7, #0]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b20      	cmp	r3, #32
 8005c2c:	d17c      	bne.n	8005d28 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <HAL_UART_Receive+0x2c>
 8005c34:	88fb      	ldrh	r3, [r7, #6]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e075      	b.n	8005d2a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2222      	movs	r2, #34	@ 0x22
 8005c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c52:	f7fc fe51 	bl	80028f8 <HAL_GetTick>
 8005c56:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	88fa      	ldrh	r2, [r7, #6]
 8005c5c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	88fa      	ldrh	r2, [r7, #6]
 8005c62:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c6c:	d108      	bne.n	8005c80 <HAL_UART_Receive+0x72>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d104      	bne.n	8005c80 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	61bb      	str	r3, [r7, #24]
 8005c7e:	e003      	b.n	8005c88 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c84:	2300      	movs	r3, #0
 8005c86:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005c88:	e043      	b.n	8005d12 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2200      	movs	r2, #0
 8005c92:	2120      	movs	r1, #32
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 fb05 	bl	80062a4 <UART_WaitOnFlagUntilTimeout>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e042      	b.n	8005d2a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10c      	bne.n	8005cc4 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	3302      	adds	r3, #2
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	e01f      	b.n	8005d04 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ccc:	d007      	beq.n	8005cde <HAL_UART_Receive+0xd0>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10a      	bne.n	8005cec <HAL_UART_Receive+0xde>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	e008      	b.n	8005cfe <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	3301      	adds	r3, #1
 8005d02:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1b6      	bne.n	8005c8a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	e000      	b.n	8005d2a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d28:	2302      	movs	r3, #2
  }
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3720      	adds	r7, #32
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b0ba      	sub	sp, #232	@ 0xe8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005d72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10f      	bne.n	8005d9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d7e:	f003 0320 	and.w	r3, r3, #32
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d009      	beq.n	8005d9a <HAL_UART_IRQHandler+0x66>
 8005d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fbd1 	bl	800653a <UART_Receive_IT>
      return;
 8005d98:	e25b      	b.n	8006252 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 80de 	beq.w	8005f60 <HAL_UART_IRQHandler+0x22c>
 8005da4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d106      	bne.n	8005dbe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005db4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80d1 	beq.w	8005f60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00b      	beq.n	8005de2 <HAL_UART_IRQHandler+0xae>
 8005dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dda:	f043 0201 	orr.w	r2, r3, #1
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00b      	beq.n	8005e06 <HAL_UART_IRQHandler+0xd2>
 8005dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d005      	beq.n	8005e06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dfe:	f043 0202 	orr.w	r2, r3, #2
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00b      	beq.n	8005e2a <HAL_UART_IRQHandler+0xf6>
 8005e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d005      	beq.n	8005e2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e22:	f043 0204 	orr.w	r2, r3, #4
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e2e:	f003 0308 	and.w	r3, r3, #8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d011      	beq.n	8005e5a <HAL_UART_IRQHandler+0x126>
 8005e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e3a:	f003 0320 	and.w	r3, r3, #32
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d105      	bne.n	8005e4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d005      	beq.n	8005e5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e52:	f043 0208 	orr.w	r2, r3, #8
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 81f2 	beq.w	8006248 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e68:	f003 0320 	and.w	r3, r3, #32
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d008      	beq.n	8005e82 <HAL_UART_IRQHandler+0x14e>
 8005e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e74:	f003 0320 	and.w	r3, r3, #32
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fb5c 	bl	800653a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e8c:	2b40      	cmp	r3, #64	@ 0x40
 8005e8e:	bf0c      	ite	eq
 8005e90:	2301      	moveq	r3, #1
 8005e92:	2300      	movne	r3, #0
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9e:	f003 0308 	and.w	r3, r3, #8
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d103      	bne.n	8005eae <HAL_UART_IRQHandler+0x17a>
 8005ea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d04f      	beq.n	8005f4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fa66 	bl	8006380 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ebe:	2b40      	cmp	r3, #64	@ 0x40
 8005ec0:	d141      	bne.n	8005f46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3314      	adds	r3, #20
 8005ec8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ecc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ed0:	e853 3f00 	ldrex	r3, [r3]
 8005ed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005edc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3314      	adds	r3, #20
 8005eea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005eee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005ef2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005efa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005efe:	e841 2300 	strex	r3, r2, [r1]
 8005f02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1d9      	bne.n	8005ec2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d013      	beq.n	8005f3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1a:	4a7e      	ldr	r2, [pc, #504]	@ (8006114 <HAL_UART_IRQHandler+0x3e0>)
 8005f1c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fd faf2 	bl	800350c <HAL_DMA_Abort_IT>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d016      	beq.n	8005f5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3c:	e00e      	b.n	8005f5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f99c 	bl	800627c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f44:	e00a      	b.n	8005f5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f998 	bl	800627c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4c:	e006      	b.n	8005f5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f994 	bl	800627c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005f5a:	e175      	b.n	8006248 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f5c:	bf00      	nop
    return;
 8005f5e:	e173      	b.n	8006248 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	f040 814f 	bne.w	8006208 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f6e:	f003 0310 	and.w	r3, r3, #16
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 8148 	beq.w	8006208 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f7c:	f003 0310 	and.w	r3, r3, #16
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 8141 	beq.w	8006208 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f86:	2300      	movs	r3, #0
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	60bb      	str	r3, [r7, #8]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	60bb      	str	r3, [r7, #8]
 8005f9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa6:	2b40      	cmp	r3, #64	@ 0x40
 8005fa8:	f040 80b6 	bne.w	8006118 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 8145 	beq.w	800624c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	f080 813e 	bcs.w	800624c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fd6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	2b20      	cmp	r3, #32
 8005fe0:	f000 8088 	beq.w	80060f4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	330c      	adds	r3, #12
 8005fea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ffa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ffe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006002:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	330c      	adds	r3, #12
 800600c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006010:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006014:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800601c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006020:	e841 2300 	strex	r3, r2, [r1]
 8006024:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006028:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1d9      	bne.n	8005fe4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3314      	adds	r3, #20
 8006036:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006040:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006042:	f023 0301 	bic.w	r3, r3, #1
 8006046:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3314      	adds	r3, #20
 8006050:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006054:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006058:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800605c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006060:	e841 2300 	strex	r3, r2, [r1]
 8006064:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006066:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e1      	bne.n	8006030 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3314      	adds	r3, #20
 8006072:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800607c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800607e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006082:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3314      	adds	r3, #20
 800608c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006090:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006092:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006096:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800609e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e3      	bne.n	800606c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	330c      	adds	r3, #12
 80060b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060bc:	e853 3f00 	ldrex	r3, [r3]
 80060c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060c4:	f023 0310 	bic.w	r3, r3, #16
 80060c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	330c      	adds	r3, #12
 80060d2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80060d6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80060d8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060de:	e841 2300 	strex	r3, r2, [r1]
 80060e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1e3      	bne.n	80060b2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fd f9cf 	bl	8003492 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006102:	b29b      	uxth	r3, r3
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	b29b      	uxth	r3, r3
 8006108:	4619      	mov	r1, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f8bf 	bl	800628e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006110:	e09c      	b.n	800624c <HAL_UART_IRQHandler+0x518>
 8006112:	bf00      	nop
 8006114:	08006445 	.word	0x08006445
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006120:	b29b      	uxth	r3, r3
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800612c:	b29b      	uxth	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 808e 	beq.w	8006250 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006134:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 8089 	beq.w	8006250 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	330c      	adds	r3, #12
 8006144:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006148:	e853 3f00 	ldrex	r3, [r3]
 800614c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800614e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006150:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006154:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	330c      	adds	r3, #12
 800615e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006162:	647a      	str	r2, [r7, #68]	@ 0x44
 8006164:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006166:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006168:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800616a:	e841 2300 	strex	r3, r2, [r1]
 800616e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1e3      	bne.n	800613e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3314      	adds	r3, #20
 800617c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006180:	e853 3f00 	ldrex	r3, [r3]
 8006184:	623b      	str	r3, [r7, #32]
   return(result);
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	f023 0301 	bic.w	r3, r3, #1
 800618c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3314      	adds	r3, #20
 8006196:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800619a:	633a      	str	r2, [r7, #48]	@ 0x30
 800619c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e3      	bne.n	8006176 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	330c      	adds	r3, #12
 80061c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	e853 3f00 	ldrex	r3, [r3]
 80061ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 0310 	bic.w	r3, r3, #16
 80061d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	330c      	adds	r3, #12
 80061dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80061e0:	61fa      	str	r2, [r7, #28]
 80061e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e4:	69b9      	ldr	r1, [r7, #24]
 80061e6:	69fa      	ldr	r2, [r7, #28]
 80061e8:	e841 2300 	strex	r3, r2, [r1]
 80061ec:	617b      	str	r3, [r7, #20]
   return(result);
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1e3      	bne.n	80061bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061fe:	4619      	mov	r1, r3
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f844 	bl	800628e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006206:	e023      	b.n	8006250 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800620c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006210:	2b00      	cmp	r3, #0
 8006212:	d009      	beq.n	8006228 <HAL_UART_IRQHandler+0x4f4>
 8006214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f923 	bl	800646c <UART_Transmit_IT>
    return;
 8006226:	e014      	b.n	8006252 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800622c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00e      	beq.n	8006252 <HAL_UART_IRQHandler+0x51e>
 8006234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800623c:	2b00      	cmp	r3, #0
 800623e:	d008      	beq.n	8006252 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f962 	bl	800650a <UART_EndTransmit_IT>
    return;
 8006246:	e004      	b.n	8006252 <HAL_UART_IRQHandler+0x51e>
    return;
 8006248:	bf00      	nop
 800624a:	e002      	b.n	8006252 <HAL_UART_IRQHandler+0x51e>
      return;
 800624c:	bf00      	nop
 800624e:	e000      	b.n	8006252 <HAL_UART_IRQHandler+0x51e>
      return;
 8006250:	bf00      	nop
  }
}
 8006252:	37e8      	adds	r7, #232	@ 0xe8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	bc80      	pop	{r7}
 8006268:	4770      	bx	lr

0800626a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800626a:	b480      	push	{r7}
 800626c:	b083      	sub	sp, #12
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	bc80      	pop	{r7}
 800627a:	4770      	bx	lr

0800627c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	bc80      	pop	{r7}
 800628c:	4770      	bx	lr

0800628e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800628e:	b480      	push	{r7}
 8006290:	b083      	sub	sp, #12
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	460b      	mov	r3, r1
 8006298:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	bc80      	pop	{r7}
 80062a2:	4770      	bx	lr

080062a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b090      	sub	sp, #64	@ 0x40
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	603b      	str	r3, [r7, #0]
 80062b0:	4613      	mov	r3, r2
 80062b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b4:	e050      	b.n	8006358 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062bc:	d04c      	beq.n	8006358 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80062be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d007      	beq.n	80062d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80062c4:	f7fc fb18 	bl	80028f8 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d241      	bcs.n	8006358 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	330c      	adds	r3, #12
 80062da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062de:	e853 3f00 	ldrex	r3, [r3]
 80062e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80062ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	330c      	adds	r3, #12
 80062f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80062f4:	637a      	str	r2, [r7, #52]	@ 0x34
 80062f6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80062fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062fc:	e841 2300 	strex	r3, r2, [r1]
 8006300:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e5      	bne.n	80062d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3314      	adds	r3, #20
 800630e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	e853 3f00 	ldrex	r3, [r3]
 8006316:	613b      	str	r3, [r7, #16]
   return(result);
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f023 0301 	bic.w	r3, r3, #1
 800631e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3314      	adds	r3, #20
 8006326:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006328:	623a      	str	r2, [r7, #32]
 800632a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	69f9      	ldr	r1, [r7, #28]
 800632e:	6a3a      	ldr	r2, [r7, #32]
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	61bb      	str	r3, [r7, #24]
   return(result);
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e5      	bne.n	8006308 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e00f      	b.n	8006378 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	4013      	ands	r3, r2
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	429a      	cmp	r2, r3
 8006366:	bf0c      	ite	eq
 8006368:	2301      	moveq	r3, #1
 800636a:	2300      	movne	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	461a      	mov	r2, r3
 8006370:	79fb      	ldrb	r3, [r7, #7]
 8006372:	429a      	cmp	r2, r3
 8006374:	d09f      	beq.n	80062b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3740      	adds	r7, #64	@ 0x40
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006380:	b480      	push	{r7}
 8006382:	b095      	sub	sp, #84	@ 0x54
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	330c      	adds	r3, #12
 800638e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800639e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	330c      	adds	r3, #12
 80063a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80063aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063b0:	e841 2300 	strex	r3, r2, [r1]
 80063b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e5      	bne.n	8006388 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3314      	adds	r3, #20
 80063c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f023 0301 	bic.w	r3, r3, #1
 80063d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3314      	adds	r3, #20
 80063da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e5      	bne.n	80063bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d119      	bne.n	800642c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	330c      	adds	r3, #12
 80063fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	e853 3f00 	ldrex	r3, [r3]
 8006406:	60bb      	str	r3, [r7, #8]
   return(result);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f023 0310 	bic.w	r3, r3, #16
 800640e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	330c      	adds	r3, #12
 8006416:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006418:	61ba      	str	r2, [r7, #24]
 800641a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	6979      	ldr	r1, [r7, #20]
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	e841 2300 	strex	r3, r2, [r1]
 8006424:	613b      	str	r3, [r7, #16]
   return(result);
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1e5      	bne.n	80063f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800643a:	bf00      	nop
 800643c:	3754      	adds	r7, #84	@ 0x54
 800643e:	46bd      	mov	sp, r7
 8006440:	bc80      	pop	{r7}
 8006442:	4770      	bx	lr

08006444 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006450:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f7ff ff0c 	bl	800627c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006464:	bf00      	nop
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b21      	cmp	r3, #33	@ 0x21
 800647e:	d13e      	bne.n	80064fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006488:	d114      	bne.n	80064b4 <UART_Transmit_IT+0x48>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d110      	bne.n	80064b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	1c9a      	adds	r2, r3, #2
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	621a      	str	r2, [r3, #32]
 80064b2:	e008      	b.n	80064c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	1c59      	adds	r1, r3, #1
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6211      	str	r1, [r2, #32]
 80064be:	781a      	ldrb	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	4619      	mov	r1, r3
 80064d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10f      	bne.n	80064fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68da      	ldr	r2, [r3, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	e000      	b.n	8006500 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064fe:	2302      	movs	r3, #2
  }
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	bc80      	pop	{r7}
 8006508:	4770      	bx	lr

0800650a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b082      	sub	sp, #8
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006520:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2220      	movs	r2, #32
 8006526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff fe94 	bl	8006258 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b08c      	sub	sp, #48	@ 0x30
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b22      	cmp	r3, #34	@ 0x22
 800654c:	f040 80ae 	bne.w	80066ac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006558:	d117      	bne.n	800658a <UART_Receive_IT+0x50>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d113      	bne.n	800658a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006562:	2300      	movs	r3, #0
 8006564:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	b29b      	uxth	r3, r3
 8006574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006578:	b29a      	uxth	r2, r3
 800657a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006582:	1c9a      	adds	r2, r3, #2
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	629a      	str	r2, [r3, #40]	@ 0x28
 8006588:	e026      	b.n	80065d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006590:	2300      	movs	r3, #0
 8006592:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800659c:	d007      	beq.n	80065ae <UART_Receive_IT+0x74>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10a      	bne.n	80065bc <UART_Receive_IT+0x82>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d106      	bne.n	80065bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	e008      	b.n	80065ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065dc:	b29b      	uxth	r3, r3
 80065de:	3b01      	subs	r3, #1
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	4619      	mov	r1, r3
 80065e6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d15d      	bne.n	80066a8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68da      	ldr	r2, [r3, #12]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0220 	bic.w	r2, r2, #32
 80065fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800660a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695a      	ldr	r2, [r3, #20]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 0201 	bic.w	r2, r2, #1
 800661a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2220      	movs	r2, #32
 8006620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800662e:	2b01      	cmp	r3, #1
 8006630:	d135      	bne.n	800669e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	330c      	adds	r3, #12
 800663e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	e853 3f00 	ldrex	r3, [r3]
 8006646:	613b      	str	r3, [r7, #16]
   return(result);
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f023 0310 	bic.w	r3, r3, #16
 800664e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	330c      	adds	r3, #12
 8006656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006658:	623a      	str	r2, [r7, #32]
 800665a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	69f9      	ldr	r1, [r7, #28]
 800665e:	6a3a      	ldr	r2, [r7, #32]
 8006660:	e841 2300 	strex	r3, r2, [r1]
 8006664:	61bb      	str	r3, [r7, #24]
   return(result);
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e5      	bne.n	8006638 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0310 	and.w	r3, r3, #16
 8006676:	2b10      	cmp	r3, #16
 8006678:	d10a      	bne.n	8006690 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800667a:	2300      	movs	r3, #0
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	60fb      	str	r3, [r7, #12]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006694:	4619      	mov	r1, r3
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff fdf9 	bl	800628e <HAL_UARTEx_RxEventCallback>
 800669c:	e002      	b.n	80066a4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff fde3 	bl	800626a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	e002      	b.n	80066ae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	e000      	b.n	80066ae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80066ac:	2302      	movs	r3, #2
  }
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3730      	adds	r7, #48	@ 0x30
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68da      	ldr	r2, [r3, #12]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689a      	ldr	r2, [r3, #8]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	431a      	orrs	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	431a      	orrs	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80066f8:	f023 030c 	bic.w	r3, r3, #12
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6812      	ldr	r2, [r2, #0]
 8006700:	68b9      	ldr	r1, [r7, #8]
 8006702:	430b      	orrs	r3, r1
 8006704:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	699a      	ldr	r2, [r3, #24]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a55      	ldr	r2, [pc, #340]	@ (8006878 <UART_SetConfig+0x1c0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d103      	bne.n	800672e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006726:	f7fe fcfd 	bl	8005124 <HAL_RCC_GetPCLK2Freq>
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	e002      	b.n	8006734 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800672e:	f7fe fce5 	bl	80050fc <HAL_RCC_GetPCLK1Freq>
 8006732:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800673c:	d14c      	bne.n	80067d8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4613      	mov	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	009a      	lsls	r2, r3, #2
 8006748:	441a      	add	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	fbb2 f3f3 	udiv	r3, r2, r3
 8006754:	4a49      	ldr	r2, [pc, #292]	@ (800687c <UART_SetConfig+0x1c4>)
 8006756:	fba2 2303 	umull	r2, r3, r2, r3
 800675a:	095b      	lsrs	r3, r3, #5
 800675c:	0119      	lsls	r1, r3, #4
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	4613      	mov	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	009a      	lsls	r2, r3, #2
 8006768:	441a      	add	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	fbb2 f2f3 	udiv	r2, r2, r3
 8006774:	4b41      	ldr	r3, [pc, #260]	@ (800687c <UART_SetConfig+0x1c4>)
 8006776:	fba3 0302 	umull	r0, r3, r3, r2
 800677a:	095b      	lsrs	r3, r3, #5
 800677c:	2064      	movs	r0, #100	@ 0x64
 800677e:	fb00 f303 	mul.w	r3, r0, r3
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	00db      	lsls	r3, r3, #3
 8006786:	3332      	adds	r3, #50	@ 0x32
 8006788:	4a3c      	ldr	r2, [pc, #240]	@ (800687c <UART_SetConfig+0x1c4>)
 800678a:	fba2 2303 	umull	r2, r3, r2, r3
 800678e:	095b      	lsrs	r3, r3, #5
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006796:	4419      	add	r1, r3
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	009a      	lsls	r2, r3, #2
 80067a2:	441a      	add	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80067ae:	4b33      	ldr	r3, [pc, #204]	@ (800687c <UART_SetConfig+0x1c4>)
 80067b0:	fba3 0302 	umull	r0, r3, r3, r2
 80067b4:	095b      	lsrs	r3, r3, #5
 80067b6:	2064      	movs	r0, #100	@ 0x64
 80067b8:	fb00 f303 	mul.w	r3, r0, r3
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	3332      	adds	r3, #50	@ 0x32
 80067c2:	4a2e      	ldr	r2, [pc, #184]	@ (800687c <UART_SetConfig+0x1c4>)
 80067c4:	fba2 2303 	umull	r2, r3, r2, r3
 80067c8:	095b      	lsrs	r3, r3, #5
 80067ca:	f003 0207 	and.w	r2, r3, #7
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	440a      	add	r2, r1
 80067d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067d6:	e04a      	b.n	800686e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	4613      	mov	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	009a      	lsls	r2, r3, #2
 80067e2:	441a      	add	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ee:	4a23      	ldr	r2, [pc, #140]	@ (800687c <UART_SetConfig+0x1c4>)
 80067f0:	fba2 2303 	umull	r2, r3, r2, r3
 80067f4:	095b      	lsrs	r3, r3, #5
 80067f6:	0119      	lsls	r1, r3, #4
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	4613      	mov	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	009a      	lsls	r2, r3, #2
 8006802:	441a      	add	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	fbb2 f2f3 	udiv	r2, r2, r3
 800680e:	4b1b      	ldr	r3, [pc, #108]	@ (800687c <UART_SetConfig+0x1c4>)
 8006810:	fba3 0302 	umull	r0, r3, r3, r2
 8006814:	095b      	lsrs	r3, r3, #5
 8006816:	2064      	movs	r0, #100	@ 0x64
 8006818:	fb00 f303 	mul.w	r3, r0, r3
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	3332      	adds	r3, #50	@ 0x32
 8006822:	4a16      	ldr	r2, [pc, #88]	@ (800687c <UART_SetConfig+0x1c4>)
 8006824:	fba2 2303 	umull	r2, r3, r2, r3
 8006828:	095b      	lsrs	r3, r3, #5
 800682a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800682e:	4419      	add	r1, r3
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	4613      	mov	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	009a      	lsls	r2, r3, #2
 800683a:	441a      	add	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	fbb2 f2f3 	udiv	r2, r2, r3
 8006846:	4b0d      	ldr	r3, [pc, #52]	@ (800687c <UART_SetConfig+0x1c4>)
 8006848:	fba3 0302 	umull	r0, r3, r3, r2
 800684c:	095b      	lsrs	r3, r3, #5
 800684e:	2064      	movs	r0, #100	@ 0x64
 8006850:	fb00 f303 	mul.w	r3, r0, r3
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	3332      	adds	r3, #50	@ 0x32
 800685a:	4a08      	ldr	r2, [pc, #32]	@ (800687c <UART_SetConfig+0x1c4>)
 800685c:	fba2 2303 	umull	r2, r3, r2, r3
 8006860:	095b      	lsrs	r3, r3, #5
 8006862:	f003 020f 	and.w	r2, r3, #15
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	440a      	add	r2, r1
 800686c:	609a      	str	r2, [r3, #8]
}
 800686e:	bf00      	nop
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	40013800 	.word	0x40013800
 800687c:	51eb851f 	.word	0x51eb851f

08006880 <__cvt>:
 8006880:	2b00      	cmp	r3, #0
 8006882:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006886:	461d      	mov	r5, r3
 8006888:	bfbb      	ittet	lt
 800688a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800688e:	461d      	movlt	r5, r3
 8006890:	2300      	movge	r3, #0
 8006892:	232d      	movlt	r3, #45	@ 0x2d
 8006894:	b088      	sub	sp, #32
 8006896:	4614      	mov	r4, r2
 8006898:	bfb8      	it	lt
 800689a:	4614      	movlt	r4, r2
 800689c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800689e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80068a0:	7013      	strb	r3, [r2, #0]
 80068a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80068a4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80068a8:	f023 0820 	bic.w	r8, r3, #32
 80068ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80068b0:	d005      	beq.n	80068be <__cvt+0x3e>
 80068b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80068b6:	d100      	bne.n	80068ba <__cvt+0x3a>
 80068b8:	3601      	adds	r6, #1
 80068ba:	2302      	movs	r3, #2
 80068bc:	e000      	b.n	80068c0 <__cvt+0x40>
 80068be:	2303      	movs	r3, #3
 80068c0:	aa07      	add	r2, sp, #28
 80068c2:	9204      	str	r2, [sp, #16]
 80068c4:	aa06      	add	r2, sp, #24
 80068c6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80068ca:	e9cd 3600 	strd	r3, r6, [sp]
 80068ce:	4622      	mov	r2, r4
 80068d0:	462b      	mov	r3, r5
 80068d2:	f000 fdf9 	bl	80074c8 <_dtoa_r>
 80068d6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80068da:	4607      	mov	r7, r0
 80068dc:	d119      	bne.n	8006912 <__cvt+0x92>
 80068de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80068e0:	07db      	lsls	r3, r3, #31
 80068e2:	d50e      	bpl.n	8006902 <__cvt+0x82>
 80068e4:	eb00 0906 	add.w	r9, r0, r6
 80068e8:	2200      	movs	r2, #0
 80068ea:	2300      	movs	r3, #0
 80068ec:	4620      	mov	r0, r4
 80068ee:	4629      	mov	r1, r5
 80068f0:	f7fa f87c 	bl	80009ec <__aeabi_dcmpeq>
 80068f4:	b108      	cbz	r0, 80068fa <__cvt+0x7a>
 80068f6:	f8cd 901c 	str.w	r9, [sp, #28]
 80068fa:	2230      	movs	r2, #48	@ 0x30
 80068fc:	9b07      	ldr	r3, [sp, #28]
 80068fe:	454b      	cmp	r3, r9
 8006900:	d31e      	bcc.n	8006940 <__cvt+0xc0>
 8006902:	4638      	mov	r0, r7
 8006904:	9b07      	ldr	r3, [sp, #28]
 8006906:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006908:	1bdb      	subs	r3, r3, r7
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	b008      	add	sp, #32
 800690e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006912:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006916:	eb00 0906 	add.w	r9, r0, r6
 800691a:	d1e5      	bne.n	80068e8 <__cvt+0x68>
 800691c:	7803      	ldrb	r3, [r0, #0]
 800691e:	2b30      	cmp	r3, #48	@ 0x30
 8006920:	d10a      	bne.n	8006938 <__cvt+0xb8>
 8006922:	2200      	movs	r2, #0
 8006924:	2300      	movs	r3, #0
 8006926:	4620      	mov	r0, r4
 8006928:	4629      	mov	r1, r5
 800692a:	f7fa f85f 	bl	80009ec <__aeabi_dcmpeq>
 800692e:	b918      	cbnz	r0, 8006938 <__cvt+0xb8>
 8006930:	f1c6 0601 	rsb	r6, r6, #1
 8006934:	f8ca 6000 	str.w	r6, [sl]
 8006938:	f8da 3000 	ldr.w	r3, [sl]
 800693c:	4499      	add	r9, r3
 800693e:	e7d3      	b.n	80068e8 <__cvt+0x68>
 8006940:	1c59      	adds	r1, r3, #1
 8006942:	9107      	str	r1, [sp, #28]
 8006944:	701a      	strb	r2, [r3, #0]
 8006946:	e7d9      	b.n	80068fc <__cvt+0x7c>

08006948 <__exponent>:
 8006948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800694a:	2900      	cmp	r1, #0
 800694c:	bfb6      	itet	lt
 800694e:	232d      	movlt	r3, #45	@ 0x2d
 8006950:	232b      	movge	r3, #43	@ 0x2b
 8006952:	4249      	neglt	r1, r1
 8006954:	2909      	cmp	r1, #9
 8006956:	7002      	strb	r2, [r0, #0]
 8006958:	7043      	strb	r3, [r0, #1]
 800695a:	dd29      	ble.n	80069b0 <__exponent+0x68>
 800695c:	f10d 0307 	add.w	r3, sp, #7
 8006960:	461d      	mov	r5, r3
 8006962:	270a      	movs	r7, #10
 8006964:	fbb1 f6f7 	udiv	r6, r1, r7
 8006968:	461a      	mov	r2, r3
 800696a:	fb07 1416 	mls	r4, r7, r6, r1
 800696e:	3430      	adds	r4, #48	@ 0x30
 8006970:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006974:	460c      	mov	r4, r1
 8006976:	2c63      	cmp	r4, #99	@ 0x63
 8006978:	4631      	mov	r1, r6
 800697a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800697e:	dcf1      	bgt.n	8006964 <__exponent+0x1c>
 8006980:	3130      	adds	r1, #48	@ 0x30
 8006982:	1e94      	subs	r4, r2, #2
 8006984:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006988:	4623      	mov	r3, r4
 800698a:	1c41      	adds	r1, r0, #1
 800698c:	42ab      	cmp	r3, r5
 800698e:	d30a      	bcc.n	80069a6 <__exponent+0x5e>
 8006990:	f10d 0309 	add.w	r3, sp, #9
 8006994:	1a9b      	subs	r3, r3, r2
 8006996:	42ac      	cmp	r4, r5
 8006998:	bf88      	it	hi
 800699a:	2300      	movhi	r3, #0
 800699c:	3302      	adds	r3, #2
 800699e:	4403      	add	r3, r0
 80069a0:	1a18      	subs	r0, r3, r0
 80069a2:	b003      	add	sp, #12
 80069a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069a6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80069aa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80069ae:	e7ed      	b.n	800698c <__exponent+0x44>
 80069b0:	2330      	movs	r3, #48	@ 0x30
 80069b2:	3130      	adds	r1, #48	@ 0x30
 80069b4:	7083      	strb	r3, [r0, #2]
 80069b6:	70c1      	strb	r1, [r0, #3]
 80069b8:	1d03      	adds	r3, r0, #4
 80069ba:	e7f1      	b.n	80069a0 <__exponent+0x58>

080069bc <_printf_float>:
 80069bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c0:	b091      	sub	sp, #68	@ 0x44
 80069c2:	460c      	mov	r4, r1
 80069c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80069c8:	4616      	mov	r6, r2
 80069ca:	461f      	mov	r7, r3
 80069cc:	4605      	mov	r5, r0
 80069ce:	f000 fcb1 	bl	8007334 <_localeconv_r>
 80069d2:	6803      	ldr	r3, [r0, #0]
 80069d4:	4618      	mov	r0, r3
 80069d6:	9308      	str	r3, [sp, #32]
 80069d8:	f7f9 fbd2 	bl	8000180 <strlen>
 80069dc:	2300      	movs	r3, #0
 80069de:	930e      	str	r3, [sp, #56]	@ 0x38
 80069e0:	f8d8 3000 	ldr.w	r3, [r8]
 80069e4:	9009      	str	r0, [sp, #36]	@ 0x24
 80069e6:	3307      	adds	r3, #7
 80069e8:	f023 0307 	bic.w	r3, r3, #7
 80069ec:	f103 0208 	add.w	r2, r3, #8
 80069f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80069f4:	f8d4 b000 	ldr.w	fp, [r4]
 80069f8:	f8c8 2000 	str.w	r2, [r8]
 80069fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a00:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006a04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a06:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006a0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a12:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006a16:	4b9c      	ldr	r3, [pc, #624]	@ (8006c88 <_printf_float+0x2cc>)
 8006a18:	f7fa f81a 	bl	8000a50 <__aeabi_dcmpun>
 8006a1c:	bb70      	cbnz	r0, 8006a7c <_printf_float+0xc0>
 8006a1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a26:	4b98      	ldr	r3, [pc, #608]	@ (8006c88 <_printf_float+0x2cc>)
 8006a28:	f7f9 fff4 	bl	8000a14 <__aeabi_dcmple>
 8006a2c:	bb30      	cbnz	r0, 8006a7c <_printf_float+0xc0>
 8006a2e:	2200      	movs	r2, #0
 8006a30:	2300      	movs	r3, #0
 8006a32:	4640      	mov	r0, r8
 8006a34:	4649      	mov	r1, r9
 8006a36:	f7f9 ffe3 	bl	8000a00 <__aeabi_dcmplt>
 8006a3a:	b110      	cbz	r0, 8006a42 <_printf_float+0x86>
 8006a3c:	232d      	movs	r3, #45	@ 0x2d
 8006a3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a42:	4a92      	ldr	r2, [pc, #584]	@ (8006c8c <_printf_float+0x2d0>)
 8006a44:	4b92      	ldr	r3, [pc, #584]	@ (8006c90 <_printf_float+0x2d4>)
 8006a46:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006a4a:	bf94      	ite	ls
 8006a4c:	4690      	movls	r8, r2
 8006a4e:	4698      	movhi	r8, r3
 8006a50:	2303      	movs	r3, #3
 8006a52:	f04f 0900 	mov.w	r9, #0
 8006a56:	6123      	str	r3, [r4, #16]
 8006a58:	f02b 0304 	bic.w	r3, fp, #4
 8006a5c:	6023      	str	r3, [r4, #0]
 8006a5e:	4633      	mov	r3, r6
 8006a60:	4621      	mov	r1, r4
 8006a62:	4628      	mov	r0, r5
 8006a64:	9700      	str	r7, [sp, #0]
 8006a66:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006a68:	f000 f9d4 	bl	8006e14 <_printf_common>
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	f040 8090 	bne.w	8006b92 <_printf_float+0x1d6>
 8006a72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a76:	b011      	add	sp, #68	@ 0x44
 8006a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a7c:	4642      	mov	r2, r8
 8006a7e:	464b      	mov	r3, r9
 8006a80:	4640      	mov	r0, r8
 8006a82:	4649      	mov	r1, r9
 8006a84:	f7f9 ffe4 	bl	8000a50 <__aeabi_dcmpun>
 8006a88:	b148      	cbz	r0, 8006a9e <_printf_float+0xe2>
 8006a8a:	464b      	mov	r3, r9
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	bfb8      	it	lt
 8006a90:	232d      	movlt	r3, #45	@ 0x2d
 8006a92:	4a80      	ldr	r2, [pc, #512]	@ (8006c94 <_printf_float+0x2d8>)
 8006a94:	bfb8      	it	lt
 8006a96:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006a9a:	4b7f      	ldr	r3, [pc, #508]	@ (8006c98 <_printf_float+0x2dc>)
 8006a9c:	e7d3      	b.n	8006a46 <_printf_float+0x8a>
 8006a9e:	6863      	ldr	r3, [r4, #4]
 8006aa0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006aa4:	1c5a      	adds	r2, r3, #1
 8006aa6:	d13f      	bne.n	8006b28 <_printf_float+0x16c>
 8006aa8:	2306      	movs	r3, #6
 8006aaa:	6063      	str	r3, [r4, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006ab2:	6023      	str	r3, [r4, #0]
 8006ab4:	9206      	str	r2, [sp, #24]
 8006ab6:	aa0e      	add	r2, sp, #56	@ 0x38
 8006ab8:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006abc:	aa0d      	add	r2, sp, #52	@ 0x34
 8006abe:	9203      	str	r2, [sp, #12]
 8006ac0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006ac4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006ac8:	6863      	ldr	r3, [r4, #4]
 8006aca:	4642      	mov	r2, r8
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	4628      	mov	r0, r5
 8006ad0:	464b      	mov	r3, r9
 8006ad2:	910a      	str	r1, [sp, #40]	@ 0x28
 8006ad4:	f7ff fed4 	bl	8006880 <__cvt>
 8006ad8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ada:	4680      	mov	r8, r0
 8006adc:	2947      	cmp	r1, #71	@ 0x47
 8006ade:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006ae0:	d128      	bne.n	8006b34 <_printf_float+0x178>
 8006ae2:	1cc8      	adds	r0, r1, #3
 8006ae4:	db02      	blt.n	8006aec <_printf_float+0x130>
 8006ae6:	6863      	ldr	r3, [r4, #4]
 8006ae8:	4299      	cmp	r1, r3
 8006aea:	dd40      	ble.n	8006b6e <_printf_float+0x1b2>
 8006aec:	f1aa 0a02 	sub.w	sl, sl, #2
 8006af0:	fa5f fa8a 	uxtb.w	sl, sl
 8006af4:	4652      	mov	r2, sl
 8006af6:	3901      	subs	r1, #1
 8006af8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006afc:	910d      	str	r1, [sp, #52]	@ 0x34
 8006afe:	f7ff ff23 	bl	8006948 <__exponent>
 8006b02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b04:	4681      	mov	r9, r0
 8006b06:	1813      	adds	r3, r2, r0
 8006b08:	2a01      	cmp	r2, #1
 8006b0a:	6123      	str	r3, [r4, #16]
 8006b0c:	dc02      	bgt.n	8006b14 <_printf_float+0x158>
 8006b0e:	6822      	ldr	r2, [r4, #0]
 8006b10:	07d2      	lsls	r2, r2, #31
 8006b12:	d501      	bpl.n	8006b18 <_printf_float+0x15c>
 8006b14:	3301      	adds	r3, #1
 8006b16:	6123      	str	r3, [r4, #16]
 8006b18:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d09e      	beq.n	8006a5e <_printf_float+0xa2>
 8006b20:	232d      	movs	r3, #45	@ 0x2d
 8006b22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b26:	e79a      	b.n	8006a5e <_printf_float+0xa2>
 8006b28:	2947      	cmp	r1, #71	@ 0x47
 8006b2a:	d1bf      	bne.n	8006aac <_printf_float+0xf0>
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1bd      	bne.n	8006aac <_printf_float+0xf0>
 8006b30:	2301      	movs	r3, #1
 8006b32:	e7ba      	b.n	8006aaa <_printf_float+0xee>
 8006b34:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b38:	d9dc      	bls.n	8006af4 <_printf_float+0x138>
 8006b3a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006b3e:	d118      	bne.n	8006b72 <_printf_float+0x1b6>
 8006b40:	2900      	cmp	r1, #0
 8006b42:	6863      	ldr	r3, [r4, #4]
 8006b44:	dd0b      	ble.n	8006b5e <_printf_float+0x1a2>
 8006b46:	6121      	str	r1, [r4, #16]
 8006b48:	b913      	cbnz	r3, 8006b50 <_printf_float+0x194>
 8006b4a:	6822      	ldr	r2, [r4, #0]
 8006b4c:	07d0      	lsls	r0, r2, #31
 8006b4e:	d502      	bpl.n	8006b56 <_printf_float+0x19a>
 8006b50:	3301      	adds	r3, #1
 8006b52:	440b      	add	r3, r1
 8006b54:	6123      	str	r3, [r4, #16]
 8006b56:	f04f 0900 	mov.w	r9, #0
 8006b5a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006b5c:	e7dc      	b.n	8006b18 <_printf_float+0x15c>
 8006b5e:	b913      	cbnz	r3, 8006b66 <_printf_float+0x1aa>
 8006b60:	6822      	ldr	r2, [r4, #0]
 8006b62:	07d2      	lsls	r2, r2, #31
 8006b64:	d501      	bpl.n	8006b6a <_printf_float+0x1ae>
 8006b66:	3302      	adds	r3, #2
 8006b68:	e7f4      	b.n	8006b54 <_printf_float+0x198>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e7f2      	b.n	8006b54 <_printf_float+0x198>
 8006b6e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006b72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b74:	4299      	cmp	r1, r3
 8006b76:	db05      	blt.n	8006b84 <_printf_float+0x1c8>
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	6121      	str	r1, [r4, #16]
 8006b7c:	07d8      	lsls	r0, r3, #31
 8006b7e:	d5ea      	bpl.n	8006b56 <_printf_float+0x19a>
 8006b80:	1c4b      	adds	r3, r1, #1
 8006b82:	e7e7      	b.n	8006b54 <_printf_float+0x198>
 8006b84:	2900      	cmp	r1, #0
 8006b86:	bfcc      	ite	gt
 8006b88:	2201      	movgt	r2, #1
 8006b8a:	f1c1 0202 	rsble	r2, r1, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	e7e0      	b.n	8006b54 <_printf_float+0x198>
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	055a      	lsls	r2, r3, #21
 8006b96:	d407      	bmi.n	8006ba8 <_printf_float+0x1ec>
 8006b98:	6923      	ldr	r3, [r4, #16]
 8006b9a:	4642      	mov	r2, r8
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	47b8      	blx	r7
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	d12b      	bne.n	8006bfe <_printf_float+0x242>
 8006ba6:	e764      	b.n	8006a72 <_printf_float+0xb6>
 8006ba8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006bac:	f240 80dc 	bls.w	8006d68 <_printf_float+0x3ac>
 8006bb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f7f9 ff18 	bl	80009ec <__aeabi_dcmpeq>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	d033      	beq.n	8006c28 <_printf_float+0x26c>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	4a35      	ldr	r2, [pc, #212]	@ (8006c9c <_printf_float+0x2e0>)
 8006bc8:	47b8      	blx	r7
 8006bca:	3001      	adds	r0, #1
 8006bcc:	f43f af51 	beq.w	8006a72 <_printf_float+0xb6>
 8006bd0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006bd4:	4543      	cmp	r3, r8
 8006bd6:	db02      	blt.n	8006bde <_printf_float+0x222>
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	07d8      	lsls	r0, r3, #31
 8006bdc:	d50f      	bpl.n	8006bfe <_printf_float+0x242>
 8006bde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006be2:	4631      	mov	r1, r6
 8006be4:	4628      	mov	r0, r5
 8006be6:	47b8      	blx	r7
 8006be8:	3001      	adds	r0, #1
 8006bea:	f43f af42 	beq.w	8006a72 <_printf_float+0xb6>
 8006bee:	f04f 0900 	mov.w	r9, #0
 8006bf2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006bf6:	f104 0a1a 	add.w	sl, r4, #26
 8006bfa:	45c8      	cmp	r8, r9
 8006bfc:	dc09      	bgt.n	8006c12 <_printf_float+0x256>
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	079b      	lsls	r3, r3, #30
 8006c02:	f100 8102 	bmi.w	8006e0a <_printf_float+0x44e>
 8006c06:	68e0      	ldr	r0, [r4, #12]
 8006c08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c0a:	4298      	cmp	r0, r3
 8006c0c:	bfb8      	it	lt
 8006c0e:	4618      	movlt	r0, r3
 8006c10:	e731      	b.n	8006a76 <_printf_float+0xba>
 8006c12:	2301      	movs	r3, #1
 8006c14:	4652      	mov	r2, sl
 8006c16:	4631      	mov	r1, r6
 8006c18:	4628      	mov	r0, r5
 8006c1a:	47b8      	blx	r7
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	f43f af28 	beq.w	8006a72 <_printf_float+0xb6>
 8006c22:	f109 0901 	add.w	r9, r9, #1
 8006c26:	e7e8      	b.n	8006bfa <_printf_float+0x23e>
 8006c28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	dc38      	bgt.n	8006ca0 <_printf_float+0x2e4>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	4631      	mov	r1, r6
 8006c32:	4628      	mov	r0, r5
 8006c34:	4a19      	ldr	r2, [pc, #100]	@ (8006c9c <_printf_float+0x2e0>)
 8006c36:	47b8      	blx	r7
 8006c38:	3001      	adds	r0, #1
 8006c3a:	f43f af1a 	beq.w	8006a72 <_printf_float+0xb6>
 8006c3e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006c42:	ea59 0303 	orrs.w	r3, r9, r3
 8006c46:	d102      	bne.n	8006c4e <_printf_float+0x292>
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	07d9      	lsls	r1, r3, #31
 8006c4c:	d5d7      	bpl.n	8006bfe <_printf_float+0x242>
 8006c4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c52:	4631      	mov	r1, r6
 8006c54:	4628      	mov	r0, r5
 8006c56:	47b8      	blx	r7
 8006c58:	3001      	adds	r0, #1
 8006c5a:	f43f af0a 	beq.w	8006a72 <_printf_float+0xb6>
 8006c5e:	f04f 0a00 	mov.w	sl, #0
 8006c62:	f104 0b1a 	add.w	fp, r4, #26
 8006c66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c68:	425b      	negs	r3, r3
 8006c6a:	4553      	cmp	r3, sl
 8006c6c:	dc01      	bgt.n	8006c72 <_printf_float+0x2b6>
 8006c6e:	464b      	mov	r3, r9
 8006c70:	e793      	b.n	8006b9a <_printf_float+0x1de>
 8006c72:	2301      	movs	r3, #1
 8006c74:	465a      	mov	r2, fp
 8006c76:	4631      	mov	r1, r6
 8006c78:	4628      	mov	r0, r5
 8006c7a:	47b8      	blx	r7
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	f43f aef8 	beq.w	8006a72 <_printf_float+0xb6>
 8006c82:	f10a 0a01 	add.w	sl, sl, #1
 8006c86:	e7ee      	b.n	8006c66 <_printf_float+0x2aa>
 8006c88:	7fefffff 	.word	0x7fefffff
 8006c8c:	08009708 	.word	0x08009708
 8006c90:	0800970c 	.word	0x0800970c
 8006c94:	08009710 	.word	0x08009710
 8006c98:	08009714 	.word	0x08009714
 8006c9c:	08009718 	.word	0x08009718
 8006ca0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ca2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006ca6:	4553      	cmp	r3, sl
 8006ca8:	bfa8      	it	ge
 8006caa:	4653      	movge	r3, sl
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	4699      	mov	r9, r3
 8006cb0:	dc36      	bgt.n	8006d20 <_printf_float+0x364>
 8006cb2:	f04f 0b00 	mov.w	fp, #0
 8006cb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cba:	f104 021a 	add.w	r2, r4, #26
 8006cbe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006cc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cc2:	eba3 0309 	sub.w	r3, r3, r9
 8006cc6:	455b      	cmp	r3, fp
 8006cc8:	dc31      	bgt.n	8006d2e <_printf_float+0x372>
 8006cca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ccc:	459a      	cmp	sl, r3
 8006cce:	dc3a      	bgt.n	8006d46 <_printf_float+0x38a>
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	07da      	lsls	r2, r3, #31
 8006cd4:	d437      	bmi.n	8006d46 <_printf_float+0x38a>
 8006cd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cd8:	ebaa 0903 	sub.w	r9, sl, r3
 8006cdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cde:	ebaa 0303 	sub.w	r3, sl, r3
 8006ce2:	4599      	cmp	r9, r3
 8006ce4:	bfa8      	it	ge
 8006ce6:	4699      	movge	r9, r3
 8006ce8:	f1b9 0f00 	cmp.w	r9, #0
 8006cec:	dc33      	bgt.n	8006d56 <_printf_float+0x39a>
 8006cee:	f04f 0800 	mov.w	r8, #0
 8006cf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cf6:	f104 0b1a 	add.w	fp, r4, #26
 8006cfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cfc:	ebaa 0303 	sub.w	r3, sl, r3
 8006d00:	eba3 0309 	sub.w	r3, r3, r9
 8006d04:	4543      	cmp	r3, r8
 8006d06:	f77f af7a 	ble.w	8006bfe <_printf_float+0x242>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	465a      	mov	r2, fp
 8006d0e:	4631      	mov	r1, r6
 8006d10:	4628      	mov	r0, r5
 8006d12:	47b8      	blx	r7
 8006d14:	3001      	adds	r0, #1
 8006d16:	f43f aeac 	beq.w	8006a72 <_printf_float+0xb6>
 8006d1a:	f108 0801 	add.w	r8, r8, #1
 8006d1e:	e7ec      	b.n	8006cfa <_printf_float+0x33e>
 8006d20:	4642      	mov	r2, r8
 8006d22:	4631      	mov	r1, r6
 8006d24:	4628      	mov	r0, r5
 8006d26:	47b8      	blx	r7
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d1c2      	bne.n	8006cb2 <_printf_float+0x2f6>
 8006d2c:	e6a1      	b.n	8006a72 <_printf_float+0xb6>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	4631      	mov	r1, r6
 8006d32:	4628      	mov	r0, r5
 8006d34:	920a      	str	r2, [sp, #40]	@ 0x28
 8006d36:	47b8      	blx	r7
 8006d38:	3001      	adds	r0, #1
 8006d3a:	f43f ae9a 	beq.w	8006a72 <_printf_float+0xb6>
 8006d3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d40:	f10b 0b01 	add.w	fp, fp, #1
 8006d44:	e7bb      	b.n	8006cbe <_printf_float+0x302>
 8006d46:	4631      	mov	r1, r6
 8006d48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	47b8      	blx	r7
 8006d50:	3001      	adds	r0, #1
 8006d52:	d1c0      	bne.n	8006cd6 <_printf_float+0x31a>
 8006d54:	e68d      	b.n	8006a72 <_printf_float+0xb6>
 8006d56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d58:	464b      	mov	r3, r9
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	4442      	add	r2, r8
 8006d60:	47b8      	blx	r7
 8006d62:	3001      	adds	r0, #1
 8006d64:	d1c3      	bne.n	8006cee <_printf_float+0x332>
 8006d66:	e684      	b.n	8006a72 <_printf_float+0xb6>
 8006d68:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006d6c:	f1ba 0f01 	cmp.w	sl, #1
 8006d70:	dc01      	bgt.n	8006d76 <_printf_float+0x3ba>
 8006d72:	07db      	lsls	r3, r3, #31
 8006d74:	d536      	bpl.n	8006de4 <_printf_float+0x428>
 8006d76:	2301      	movs	r3, #1
 8006d78:	4642      	mov	r2, r8
 8006d7a:	4631      	mov	r1, r6
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	47b8      	blx	r7
 8006d80:	3001      	adds	r0, #1
 8006d82:	f43f ae76 	beq.w	8006a72 <_printf_float+0xb6>
 8006d86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	47b8      	blx	r7
 8006d90:	3001      	adds	r0, #1
 8006d92:	f43f ae6e 	beq.w	8006a72 <_printf_float+0xb6>
 8006d96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006da2:	f7f9 fe23 	bl	80009ec <__aeabi_dcmpeq>
 8006da6:	b9c0      	cbnz	r0, 8006dda <_printf_float+0x41e>
 8006da8:	4653      	mov	r3, sl
 8006daa:	f108 0201 	add.w	r2, r8, #1
 8006dae:	4631      	mov	r1, r6
 8006db0:	4628      	mov	r0, r5
 8006db2:	47b8      	blx	r7
 8006db4:	3001      	adds	r0, #1
 8006db6:	d10c      	bne.n	8006dd2 <_printf_float+0x416>
 8006db8:	e65b      	b.n	8006a72 <_printf_float+0xb6>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	465a      	mov	r2, fp
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	47b8      	blx	r7
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	f43f ae54 	beq.w	8006a72 <_printf_float+0xb6>
 8006dca:	f108 0801 	add.w	r8, r8, #1
 8006dce:	45d0      	cmp	r8, sl
 8006dd0:	dbf3      	blt.n	8006dba <_printf_float+0x3fe>
 8006dd2:	464b      	mov	r3, r9
 8006dd4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006dd8:	e6e0      	b.n	8006b9c <_printf_float+0x1e0>
 8006dda:	f04f 0800 	mov.w	r8, #0
 8006dde:	f104 0b1a 	add.w	fp, r4, #26
 8006de2:	e7f4      	b.n	8006dce <_printf_float+0x412>
 8006de4:	2301      	movs	r3, #1
 8006de6:	4642      	mov	r2, r8
 8006de8:	e7e1      	b.n	8006dae <_printf_float+0x3f2>
 8006dea:	2301      	movs	r3, #1
 8006dec:	464a      	mov	r2, r9
 8006dee:	4631      	mov	r1, r6
 8006df0:	4628      	mov	r0, r5
 8006df2:	47b8      	blx	r7
 8006df4:	3001      	adds	r0, #1
 8006df6:	f43f ae3c 	beq.w	8006a72 <_printf_float+0xb6>
 8006dfa:	f108 0801 	add.w	r8, r8, #1
 8006dfe:	68e3      	ldr	r3, [r4, #12]
 8006e00:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006e02:	1a5b      	subs	r3, r3, r1
 8006e04:	4543      	cmp	r3, r8
 8006e06:	dcf0      	bgt.n	8006dea <_printf_float+0x42e>
 8006e08:	e6fd      	b.n	8006c06 <_printf_float+0x24a>
 8006e0a:	f04f 0800 	mov.w	r8, #0
 8006e0e:	f104 0919 	add.w	r9, r4, #25
 8006e12:	e7f4      	b.n	8006dfe <_printf_float+0x442>

08006e14 <_printf_common>:
 8006e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e18:	4616      	mov	r6, r2
 8006e1a:	4698      	mov	r8, r3
 8006e1c:	688a      	ldr	r2, [r1, #8]
 8006e1e:	690b      	ldr	r3, [r1, #16]
 8006e20:	4607      	mov	r7, r0
 8006e22:	4293      	cmp	r3, r2
 8006e24:	bfb8      	it	lt
 8006e26:	4613      	movlt	r3, r2
 8006e28:	6033      	str	r3, [r6, #0]
 8006e2a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e2e:	460c      	mov	r4, r1
 8006e30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e34:	b10a      	cbz	r2, 8006e3a <_printf_common+0x26>
 8006e36:	3301      	adds	r3, #1
 8006e38:	6033      	str	r3, [r6, #0]
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	0699      	lsls	r1, r3, #26
 8006e3e:	bf42      	ittt	mi
 8006e40:	6833      	ldrmi	r3, [r6, #0]
 8006e42:	3302      	addmi	r3, #2
 8006e44:	6033      	strmi	r3, [r6, #0]
 8006e46:	6825      	ldr	r5, [r4, #0]
 8006e48:	f015 0506 	ands.w	r5, r5, #6
 8006e4c:	d106      	bne.n	8006e5c <_printf_common+0x48>
 8006e4e:	f104 0a19 	add.w	sl, r4, #25
 8006e52:	68e3      	ldr	r3, [r4, #12]
 8006e54:	6832      	ldr	r2, [r6, #0]
 8006e56:	1a9b      	subs	r3, r3, r2
 8006e58:	42ab      	cmp	r3, r5
 8006e5a:	dc2b      	bgt.n	8006eb4 <_printf_common+0xa0>
 8006e5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e60:	6822      	ldr	r2, [r4, #0]
 8006e62:	3b00      	subs	r3, #0
 8006e64:	bf18      	it	ne
 8006e66:	2301      	movne	r3, #1
 8006e68:	0692      	lsls	r2, r2, #26
 8006e6a:	d430      	bmi.n	8006ece <_printf_common+0xba>
 8006e6c:	4641      	mov	r1, r8
 8006e6e:	4638      	mov	r0, r7
 8006e70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e74:	47c8      	blx	r9
 8006e76:	3001      	adds	r0, #1
 8006e78:	d023      	beq.n	8006ec2 <_printf_common+0xae>
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	6922      	ldr	r2, [r4, #16]
 8006e7e:	f003 0306 	and.w	r3, r3, #6
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	bf14      	ite	ne
 8006e86:	2500      	movne	r5, #0
 8006e88:	6833      	ldreq	r3, [r6, #0]
 8006e8a:	f04f 0600 	mov.w	r6, #0
 8006e8e:	bf08      	it	eq
 8006e90:	68e5      	ldreq	r5, [r4, #12]
 8006e92:	f104 041a 	add.w	r4, r4, #26
 8006e96:	bf08      	it	eq
 8006e98:	1aed      	subeq	r5, r5, r3
 8006e9a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006e9e:	bf08      	it	eq
 8006ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	bfc4      	itt	gt
 8006ea8:	1a9b      	subgt	r3, r3, r2
 8006eaa:	18ed      	addgt	r5, r5, r3
 8006eac:	42b5      	cmp	r5, r6
 8006eae:	d11a      	bne.n	8006ee6 <_printf_common+0xd2>
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	e008      	b.n	8006ec6 <_printf_common+0xb2>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	4652      	mov	r2, sl
 8006eb8:	4641      	mov	r1, r8
 8006eba:	4638      	mov	r0, r7
 8006ebc:	47c8      	blx	r9
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	d103      	bne.n	8006eca <_printf_common+0xb6>
 8006ec2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eca:	3501      	adds	r5, #1
 8006ecc:	e7c1      	b.n	8006e52 <_printf_common+0x3e>
 8006ece:	2030      	movs	r0, #48	@ 0x30
 8006ed0:	18e1      	adds	r1, r4, r3
 8006ed2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ed6:	1c5a      	adds	r2, r3, #1
 8006ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006edc:	4422      	add	r2, r4
 8006ede:	3302      	adds	r3, #2
 8006ee0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ee4:	e7c2      	b.n	8006e6c <_printf_common+0x58>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	4622      	mov	r2, r4
 8006eea:	4641      	mov	r1, r8
 8006eec:	4638      	mov	r0, r7
 8006eee:	47c8      	blx	r9
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d0e6      	beq.n	8006ec2 <_printf_common+0xae>
 8006ef4:	3601      	adds	r6, #1
 8006ef6:	e7d9      	b.n	8006eac <_printf_common+0x98>

08006ef8 <_printf_i>:
 8006ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006efc:	7e0f      	ldrb	r7, [r1, #24]
 8006efe:	4691      	mov	r9, r2
 8006f00:	2f78      	cmp	r7, #120	@ 0x78
 8006f02:	4680      	mov	r8, r0
 8006f04:	460c      	mov	r4, r1
 8006f06:	469a      	mov	sl, r3
 8006f08:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f0e:	d807      	bhi.n	8006f20 <_printf_i+0x28>
 8006f10:	2f62      	cmp	r7, #98	@ 0x62
 8006f12:	d80a      	bhi.n	8006f2a <_printf_i+0x32>
 8006f14:	2f00      	cmp	r7, #0
 8006f16:	f000 80d3 	beq.w	80070c0 <_printf_i+0x1c8>
 8006f1a:	2f58      	cmp	r7, #88	@ 0x58
 8006f1c:	f000 80ba 	beq.w	8007094 <_printf_i+0x19c>
 8006f20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f28:	e03a      	b.n	8006fa0 <_printf_i+0xa8>
 8006f2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f2e:	2b15      	cmp	r3, #21
 8006f30:	d8f6      	bhi.n	8006f20 <_printf_i+0x28>
 8006f32:	a101      	add	r1, pc, #4	@ (adr r1, 8006f38 <_printf_i+0x40>)
 8006f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f38:	08006f91 	.word	0x08006f91
 8006f3c:	08006fa5 	.word	0x08006fa5
 8006f40:	08006f21 	.word	0x08006f21
 8006f44:	08006f21 	.word	0x08006f21
 8006f48:	08006f21 	.word	0x08006f21
 8006f4c:	08006f21 	.word	0x08006f21
 8006f50:	08006fa5 	.word	0x08006fa5
 8006f54:	08006f21 	.word	0x08006f21
 8006f58:	08006f21 	.word	0x08006f21
 8006f5c:	08006f21 	.word	0x08006f21
 8006f60:	08006f21 	.word	0x08006f21
 8006f64:	080070a7 	.word	0x080070a7
 8006f68:	08006fcf 	.word	0x08006fcf
 8006f6c:	08007061 	.word	0x08007061
 8006f70:	08006f21 	.word	0x08006f21
 8006f74:	08006f21 	.word	0x08006f21
 8006f78:	080070c9 	.word	0x080070c9
 8006f7c:	08006f21 	.word	0x08006f21
 8006f80:	08006fcf 	.word	0x08006fcf
 8006f84:	08006f21 	.word	0x08006f21
 8006f88:	08006f21 	.word	0x08006f21
 8006f8c:	08007069 	.word	0x08007069
 8006f90:	6833      	ldr	r3, [r6, #0]
 8006f92:	1d1a      	adds	r2, r3, #4
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6032      	str	r2, [r6, #0]
 8006f98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e09e      	b.n	80070e2 <_printf_i+0x1ea>
 8006fa4:	6833      	ldr	r3, [r6, #0]
 8006fa6:	6820      	ldr	r0, [r4, #0]
 8006fa8:	1d19      	adds	r1, r3, #4
 8006faa:	6031      	str	r1, [r6, #0]
 8006fac:	0606      	lsls	r6, r0, #24
 8006fae:	d501      	bpl.n	8006fb4 <_printf_i+0xbc>
 8006fb0:	681d      	ldr	r5, [r3, #0]
 8006fb2:	e003      	b.n	8006fbc <_printf_i+0xc4>
 8006fb4:	0645      	lsls	r5, r0, #25
 8006fb6:	d5fb      	bpl.n	8006fb0 <_printf_i+0xb8>
 8006fb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fbc:	2d00      	cmp	r5, #0
 8006fbe:	da03      	bge.n	8006fc8 <_printf_i+0xd0>
 8006fc0:	232d      	movs	r3, #45	@ 0x2d
 8006fc2:	426d      	negs	r5, r5
 8006fc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fc8:	230a      	movs	r3, #10
 8006fca:	4859      	ldr	r0, [pc, #356]	@ (8007130 <_printf_i+0x238>)
 8006fcc:	e011      	b.n	8006ff2 <_printf_i+0xfa>
 8006fce:	6821      	ldr	r1, [r4, #0]
 8006fd0:	6833      	ldr	r3, [r6, #0]
 8006fd2:	0608      	lsls	r0, r1, #24
 8006fd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006fd8:	d402      	bmi.n	8006fe0 <_printf_i+0xe8>
 8006fda:	0649      	lsls	r1, r1, #25
 8006fdc:	bf48      	it	mi
 8006fde:	b2ad      	uxthmi	r5, r5
 8006fe0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006fe2:	6033      	str	r3, [r6, #0]
 8006fe4:	bf14      	ite	ne
 8006fe6:	230a      	movne	r3, #10
 8006fe8:	2308      	moveq	r3, #8
 8006fea:	4851      	ldr	r0, [pc, #324]	@ (8007130 <_printf_i+0x238>)
 8006fec:	2100      	movs	r1, #0
 8006fee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ff2:	6866      	ldr	r6, [r4, #4]
 8006ff4:	2e00      	cmp	r6, #0
 8006ff6:	bfa8      	it	ge
 8006ff8:	6821      	ldrge	r1, [r4, #0]
 8006ffa:	60a6      	str	r6, [r4, #8]
 8006ffc:	bfa4      	itt	ge
 8006ffe:	f021 0104 	bicge.w	r1, r1, #4
 8007002:	6021      	strge	r1, [r4, #0]
 8007004:	b90d      	cbnz	r5, 800700a <_printf_i+0x112>
 8007006:	2e00      	cmp	r6, #0
 8007008:	d04b      	beq.n	80070a2 <_printf_i+0x1aa>
 800700a:	4616      	mov	r6, r2
 800700c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007010:	fb03 5711 	mls	r7, r3, r1, r5
 8007014:	5dc7      	ldrb	r7, [r0, r7]
 8007016:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800701a:	462f      	mov	r7, r5
 800701c:	42bb      	cmp	r3, r7
 800701e:	460d      	mov	r5, r1
 8007020:	d9f4      	bls.n	800700c <_printf_i+0x114>
 8007022:	2b08      	cmp	r3, #8
 8007024:	d10b      	bne.n	800703e <_printf_i+0x146>
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	07df      	lsls	r7, r3, #31
 800702a:	d508      	bpl.n	800703e <_printf_i+0x146>
 800702c:	6923      	ldr	r3, [r4, #16]
 800702e:	6861      	ldr	r1, [r4, #4]
 8007030:	4299      	cmp	r1, r3
 8007032:	bfde      	ittt	le
 8007034:	2330      	movle	r3, #48	@ 0x30
 8007036:	f806 3c01 	strble.w	r3, [r6, #-1]
 800703a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800703e:	1b92      	subs	r2, r2, r6
 8007040:	6122      	str	r2, [r4, #16]
 8007042:	464b      	mov	r3, r9
 8007044:	4621      	mov	r1, r4
 8007046:	4640      	mov	r0, r8
 8007048:	f8cd a000 	str.w	sl, [sp]
 800704c:	aa03      	add	r2, sp, #12
 800704e:	f7ff fee1 	bl	8006e14 <_printf_common>
 8007052:	3001      	adds	r0, #1
 8007054:	d14a      	bne.n	80070ec <_printf_i+0x1f4>
 8007056:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800705a:	b004      	add	sp, #16
 800705c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	f043 0320 	orr.w	r3, r3, #32
 8007066:	6023      	str	r3, [r4, #0]
 8007068:	2778      	movs	r7, #120	@ 0x78
 800706a:	4832      	ldr	r0, [pc, #200]	@ (8007134 <_printf_i+0x23c>)
 800706c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	6831      	ldr	r1, [r6, #0]
 8007074:	061f      	lsls	r7, r3, #24
 8007076:	f851 5b04 	ldr.w	r5, [r1], #4
 800707a:	d402      	bmi.n	8007082 <_printf_i+0x18a>
 800707c:	065f      	lsls	r7, r3, #25
 800707e:	bf48      	it	mi
 8007080:	b2ad      	uxthmi	r5, r5
 8007082:	6031      	str	r1, [r6, #0]
 8007084:	07d9      	lsls	r1, r3, #31
 8007086:	bf44      	itt	mi
 8007088:	f043 0320 	orrmi.w	r3, r3, #32
 800708c:	6023      	strmi	r3, [r4, #0]
 800708e:	b11d      	cbz	r5, 8007098 <_printf_i+0x1a0>
 8007090:	2310      	movs	r3, #16
 8007092:	e7ab      	b.n	8006fec <_printf_i+0xf4>
 8007094:	4826      	ldr	r0, [pc, #152]	@ (8007130 <_printf_i+0x238>)
 8007096:	e7e9      	b.n	800706c <_printf_i+0x174>
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	f023 0320 	bic.w	r3, r3, #32
 800709e:	6023      	str	r3, [r4, #0]
 80070a0:	e7f6      	b.n	8007090 <_printf_i+0x198>
 80070a2:	4616      	mov	r6, r2
 80070a4:	e7bd      	b.n	8007022 <_printf_i+0x12a>
 80070a6:	6833      	ldr	r3, [r6, #0]
 80070a8:	6825      	ldr	r5, [r4, #0]
 80070aa:	1d18      	adds	r0, r3, #4
 80070ac:	6961      	ldr	r1, [r4, #20]
 80070ae:	6030      	str	r0, [r6, #0]
 80070b0:	062e      	lsls	r6, r5, #24
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	d501      	bpl.n	80070ba <_printf_i+0x1c2>
 80070b6:	6019      	str	r1, [r3, #0]
 80070b8:	e002      	b.n	80070c0 <_printf_i+0x1c8>
 80070ba:	0668      	lsls	r0, r5, #25
 80070bc:	d5fb      	bpl.n	80070b6 <_printf_i+0x1be>
 80070be:	8019      	strh	r1, [r3, #0]
 80070c0:	2300      	movs	r3, #0
 80070c2:	4616      	mov	r6, r2
 80070c4:	6123      	str	r3, [r4, #16]
 80070c6:	e7bc      	b.n	8007042 <_printf_i+0x14a>
 80070c8:	6833      	ldr	r3, [r6, #0]
 80070ca:	2100      	movs	r1, #0
 80070cc:	1d1a      	adds	r2, r3, #4
 80070ce:	6032      	str	r2, [r6, #0]
 80070d0:	681e      	ldr	r6, [r3, #0]
 80070d2:	6862      	ldr	r2, [r4, #4]
 80070d4:	4630      	mov	r0, r6
 80070d6:	f000 f95e 	bl	8007396 <memchr>
 80070da:	b108      	cbz	r0, 80070e0 <_printf_i+0x1e8>
 80070dc:	1b80      	subs	r0, r0, r6
 80070de:	6060      	str	r0, [r4, #4]
 80070e0:	6863      	ldr	r3, [r4, #4]
 80070e2:	6123      	str	r3, [r4, #16]
 80070e4:	2300      	movs	r3, #0
 80070e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070ea:	e7aa      	b.n	8007042 <_printf_i+0x14a>
 80070ec:	4632      	mov	r2, r6
 80070ee:	4649      	mov	r1, r9
 80070f0:	4640      	mov	r0, r8
 80070f2:	6923      	ldr	r3, [r4, #16]
 80070f4:	47d0      	blx	sl
 80070f6:	3001      	adds	r0, #1
 80070f8:	d0ad      	beq.n	8007056 <_printf_i+0x15e>
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	079b      	lsls	r3, r3, #30
 80070fe:	d413      	bmi.n	8007128 <_printf_i+0x230>
 8007100:	68e0      	ldr	r0, [r4, #12]
 8007102:	9b03      	ldr	r3, [sp, #12]
 8007104:	4298      	cmp	r0, r3
 8007106:	bfb8      	it	lt
 8007108:	4618      	movlt	r0, r3
 800710a:	e7a6      	b.n	800705a <_printf_i+0x162>
 800710c:	2301      	movs	r3, #1
 800710e:	4632      	mov	r2, r6
 8007110:	4649      	mov	r1, r9
 8007112:	4640      	mov	r0, r8
 8007114:	47d0      	blx	sl
 8007116:	3001      	adds	r0, #1
 8007118:	d09d      	beq.n	8007056 <_printf_i+0x15e>
 800711a:	3501      	adds	r5, #1
 800711c:	68e3      	ldr	r3, [r4, #12]
 800711e:	9903      	ldr	r1, [sp, #12]
 8007120:	1a5b      	subs	r3, r3, r1
 8007122:	42ab      	cmp	r3, r5
 8007124:	dcf2      	bgt.n	800710c <_printf_i+0x214>
 8007126:	e7eb      	b.n	8007100 <_printf_i+0x208>
 8007128:	2500      	movs	r5, #0
 800712a:	f104 0619 	add.w	r6, r4, #25
 800712e:	e7f5      	b.n	800711c <_printf_i+0x224>
 8007130:	0800971a 	.word	0x0800971a
 8007134:	0800972b 	.word	0x0800972b

08007138 <siprintf>:
 8007138:	b40e      	push	{r1, r2, r3}
 800713a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800713e:	b500      	push	{lr}
 8007140:	b09c      	sub	sp, #112	@ 0x70
 8007142:	ab1d      	add	r3, sp, #116	@ 0x74
 8007144:	9002      	str	r0, [sp, #8]
 8007146:	9006      	str	r0, [sp, #24]
 8007148:	9107      	str	r1, [sp, #28]
 800714a:	9104      	str	r1, [sp, #16]
 800714c:	4808      	ldr	r0, [pc, #32]	@ (8007170 <siprintf+0x38>)
 800714e:	4909      	ldr	r1, [pc, #36]	@ (8007174 <siprintf+0x3c>)
 8007150:	f853 2b04 	ldr.w	r2, [r3], #4
 8007154:	9105      	str	r1, [sp, #20]
 8007156:	6800      	ldr	r0, [r0, #0]
 8007158:	a902      	add	r1, sp, #8
 800715a:	9301      	str	r3, [sp, #4]
 800715c:	f000 ffd8 	bl	8008110 <_svfiprintf_r>
 8007160:	2200      	movs	r2, #0
 8007162:	9b02      	ldr	r3, [sp, #8]
 8007164:	701a      	strb	r2, [r3, #0]
 8007166:	b01c      	add	sp, #112	@ 0x70
 8007168:	f85d eb04 	ldr.w	lr, [sp], #4
 800716c:	b003      	add	sp, #12
 800716e:	4770      	bx	lr
 8007170:	20000018 	.word	0x20000018
 8007174:	ffff0208 	.word	0xffff0208

08007178 <std>:
 8007178:	2300      	movs	r3, #0
 800717a:	b510      	push	{r4, lr}
 800717c:	4604      	mov	r4, r0
 800717e:	e9c0 3300 	strd	r3, r3, [r0]
 8007182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007186:	6083      	str	r3, [r0, #8]
 8007188:	8181      	strh	r1, [r0, #12]
 800718a:	6643      	str	r3, [r0, #100]	@ 0x64
 800718c:	81c2      	strh	r2, [r0, #14]
 800718e:	6183      	str	r3, [r0, #24]
 8007190:	4619      	mov	r1, r3
 8007192:	2208      	movs	r2, #8
 8007194:	305c      	adds	r0, #92	@ 0x5c
 8007196:	f000 f8c4 	bl	8007322 <memset>
 800719a:	4b0d      	ldr	r3, [pc, #52]	@ (80071d0 <std+0x58>)
 800719c:	6224      	str	r4, [r4, #32]
 800719e:	6263      	str	r3, [r4, #36]	@ 0x24
 80071a0:	4b0c      	ldr	r3, [pc, #48]	@ (80071d4 <std+0x5c>)
 80071a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80071a4:	4b0c      	ldr	r3, [pc, #48]	@ (80071d8 <std+0x60>)
 80071a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80071a8:	4b0c      	ldr	r3, [pc, #48]	@ (80071dc <std+0x64>)
 80071aa:	6323      	str	r3, [r4, #48]	@ 0x30
 80071ac:	4b0c      	ldr	r3, [pc, #48]	@ (80071e0 <std+0x68>)
 80071ae:	429c      	cmp	r4, r3
 80071b0:	d006      	beq.n	80071c0 <std+0x48>
 80071b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80071b6:	4294      	cmp	r4, r2
 80071b8:	d002      	beq.n	80071c0 <std+0x48>
 80071ba:	33d0      	adds	r3, #208	@ 0xd0
 80071bc:	429c      	cmp	r4, r3
 80071be:	d105      	bne.n	80071cc <std+0x54>
 80071c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80071c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c8:	f000 b8e2 	b.w	8007390 <__retarget_lock_init_recursive>
 80071cc:	bd10      	pop	{r4, pc}
 80071ce:	bf00      	nop
 80071d0:	08008cc5 	.word	0x08008cc5
 80071d4:	08008ce7 	.word	0x08008ce7
 80071d8:	08008d1f 	.word	0x08008d1f
 80071dc:	08008d43 	.word	0x08008d43
 80071e0:	2000056c 	.word	0x2000056c

080071e4 <stdio_exit_handler>:
 80071e4:	4a02      	ldr	r2, [pc, #8]	@ (80071f0 <stdio_exit_handler+0xc>)
 80071e6:	4903      	ldr	r1, [pc, #12]	@ (80071f4 <stdio_exit_handler+0x10>)
 80071e8:	4803      	ldr	r0, [pc, #12]	@ (80071f8 <stdio_exit_handler+0x14>)
 80071ea:	f000 b869 	b.w	80072c0 <_fwalk_sglue>
 80071ee:	bf00      	nop
 80071f0:	2000000c 	.word	0x2000000c
 80071f4:	0800855d 	.word	0x0800855d
 80071f8:	2000001c 	.word	0x2000001c

080071fc <cleanup_stdio>:
 80071fc:	6841      	ldr	r1, [r0, #4]
 80071fe:	4b0c      	ldr	r3, [pc, #48]	@ (8007230 <cleanup_stdio+0x34>)
 8007200:	b510      	push	{r4, lr}
 8007202:	4299      	cmp	r1, r3
 8007204:	4604      	mov	r4, r0
 8007206:	d001      	beq.n	800720c <cleanup_stdio+0x10>
 8007208:	f001 f9a8 	bl	800855c <_fflush_r>
 800720c:	68a1      	ldr	r1, [r4, #8]
 800720e:	4b09      	ldr	r3, [pc, #36]	@ (8007234 <cleanup_stdio+0x38>)
 8007210:	4299      	cmp	r1, r3
 8007212:	d002      	beq.n	800721a <cleanup_stdio+0x1e>
 8007214:	4620      	mov	r0, r4
 8007216:	f001 f9a1 	bl	800855c <_fflush_r>
 800721a:	68e1      	ldr	r1, [r4, #12]
 800721c:	4b06      	ldr	r3, [pc, #24]	@ (8007238 <cleanup_stdio+0x3c>)
 800721e:	4299      	cmp	r1, r3
 8007220:	d004      	beq.n	800722c <cleanup_stdio+0x30>
 8007222:	4620      	mov	r0, r4
 8007224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007228:	f001 b998 	b.w	800855c <_fflush_r>
 800722c:	bd10      	pop	{r4, pc}
 800722e:	bf00      	nop
 8007230:	2000056c 	.word	0x2000056c
 8007234:	200005d4 	.word	0x200005d4
 8007238:	2000063c 	.word	0x2000063c

0800723c <global_stdio_init.part.0>:
 800723c:	b510      	push	{r4, lr}
 800723e:	4b0b      	ldr	r3, [pc, #44]	@ (800726c <global_stdio_init.part.0+0x30>)
 8007240:	4c0b      	ldr	r4, [pc, #44]	@ (8007270 <global_stdio_init.part.0+0x34>)
 8007242:	4a0c      	ldr	r2, [pc, #48]	@ (8007274 <global_stdio_init.part.0+0x38>)
 8007244:	4620      	mov	r0, r4
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	2104      	movs	r1, #4
 800724a:	2200      	movs	r2, #0
 800724c:	f7ff ff94 	bl	8007178 <std>
 8007250:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007254:	2201      	movs	r2, #1
 8007256:	2109      	movs	r1, #9
 8007258:	f7ff ff8e 	bl	8007178 <std>
 800725c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007260:	2202      	movs	r2, #2
 8007262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007266:	2112      	movs	r1, #18
 8007268:	f7ff bf86 	b.w	8007178 <std>
 800726c:	200006a4 	.word	0x200006a4
 8007270:	2000056c 	.word	0x2000056c
 8007274:	080071e5 	.word	0x080071e5

08007278 <__sfp_lock_acquire>:
 8007278:	4801      	ldr	r0, [pc, #4]	@ (8007280 <__sfp_lock_acquire+0x8>)
 800727a:	f000 b88a 	b.w	8007392 <__retarget_lock_acquire_recursive>
 800727e:	bf00      	nop
 8007280:	200006a9 	.word	0x200006a9

08007284 <__sfp_lock_release>:
 8007284:	4801      	ldr	r0, [pc, #4]	@ (800728c <__sfp_lock_release+0x8>)
 8007286:	f000 b885 	b.w	8007394 <__retarget_lock_release_recursive>
 800728a:	bf00      	nop
 800728c:	200006a9 	.word	0x200006a9

08007290 <__sinit>:
 8007290:	b510      	push	{r4, lr}
 8007292:	4604      	mov	r4, r0
 8007294:	f7ff fff0 	bl	8007278 <__sfp_lock_acquire>
 8007298:	6a23      	ldr	r3, [r4, #32]
 800729a:	b11b      	cbz	r3, 80072a4 <__sinit+0x14>
 800729c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072a0:	f7ff bff0 	b.w	8007284 <__sfp_lock_release>
 80072a4:	4b04      	ldr	r3, [pc, #16]	@ (80072b8 <__sinit+0x28>)
 80072a6:	6223      	str	r3, [r4, #32]
 80072a8:	4b04      	ldr	r3, [pc, #16]	@ (80072bc <__sinit+0x2c>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1f5      	bne.n	800729c <__sinit+0xc>
 80072b0:	f7ff ffc4 	bl	800723c <global_stdio_init.part.0>
 80072b4:	e7f2      	b.n	800729c <__sinit+0xc>
 80072b6:	bf00      	nop
 80072b8:	080071fd 	.word	0x080071fd
 80072bc:	200006a4 	.word	0x200006a4

080072c0 <_fwalk_sglue>:
 80072c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072c4:	4607      	mov	r7, r0
 80072c6:	4688      	mov	r8, r1
 80072c8:	4614      	mov	r4, r2
 80072ca:	2600      	movs	r6, #0
 80072cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072d0:	f1b9 0901 	subs.w	r9, r9, #1
 80072d4:	d505      	bpl.n	80072e2 <_fwalk_sglue+0x22>
 80072d6:	6824      	ldr	r4, [r4, #0]
 80072d8:	2c00      	cmp	r4, #0
 80072da:	d1f7      	bne.n	80072cc <_fwalk_sglue+0xc>
 80072dc:	4630      	mov	r0, r6
 80072de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072e2:	89ab      	ldrh	r3, [r5, #12]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d907      	bls.n	80072f8 <_fwalk_sglue+0x38>
 80072e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072ec:	3301      	adds	r3, #1
 80072ee:	d003      	beq.n	80072f8 <_fwalk_sglue+0x38>
 80072f0:	4629      	mov	r1, r5
 80072f2:	4638      	mov	r0, r7
 80072f4:	47c0      	blx	r8
 80072f6:	4306      	orrs	r6, r0
 80072f8:	3568      	adds	r5, #104	@ 0x68
 80072fa:	e7e9      	b.n	80072d0 <_fwalk_sglue+0x10>

080072fc <strncpy>:
 80072fc:	4603      	mov	r3, r0
 80072fe:	b510      	push	{r4, lr}
 8007300:	3901      	subs	r1, #1
 8007302:	b132      	cbz	r2, 8007312 <strncpy+0x16>
 8007304:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007308:	3a01      	subs	r2, #1
 800730a:	f803 4b01 	strb.w	r4, [r3], #1
 800730e:	2c00      	cmp	r4, #0
 8007310:	d1f7      	bne.n	8007302 <strncpy+0x6>
 8007312:	2100      	movs	r1, #0
 8007314:	441a      	add	r2, r3
 8007316:	4293      	cmp	r3, r2
 8007318:	d100      	bne.n	800731c <strncpy+0x20>
 800731a:	bd10      	pop	{r4, pc}
 800731c:	f803 1b01 	strb.w	r1, [r3], #1
 8007320:	e7f9      	b.n	8007316 <strncpy+0x1a>

08007322 <memset>:
 8007322:	4603      	mov	r3, r0
 8007324:	4402      	add	r2, r0
 8007326:	4293      	cmp	r3, r2
 8007328:	d100      	bne.n	800732c <memset+0xa>
 800732a:	4770      	bx	lr
 800732c:	f803 1b01 	strb.w	r1, [r3], #1
 8007330:	e7f9      	b.n	8007326 <memset+0x4>
	...

08007334 <_localeconv_r>:
 8007334:	4800      	ldr	r0, [pc, #0]	@ (8007338 <_localeconv_r+0x4>)
 8007336:	4770      	bx	lr
 8007338:	20000158 	.word	0x20000158

0800733c <__errno>:
 800733c:	4b01      	ldr	r3, [pc, #4]	@ (8007344 <__errno+0x8>)
 800733e:	6818      	ldr	r0, [r3, #0]
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	20000018 	.word	0x20000018

08007348 <__libc_init_array>:
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	2600      	movs	r6, #0
 800734c:	4d0c      	ldr	r5, [pc, #48]	@ (8007380 <__libc_init_array+0x38>)
 800734e:	4c0d      	ldr	r4, [pc, #52]	@ (8007384 <__libc_init_array+0x3c>)
 8007350:	1b64      	subs	r4, r4, r5
 8007352:	10a4      	asrs	r4, r4, #2
 8007354:	42a6      	cmp	r6, r4
 8007356:	d109      	bne.n	800736c <__libc_init_array+0x24>
 8007358:	f002 f8fa 	bl	8009550 <_init>
 800735c:	2600      	movs	r6, #0
 800735e:	4d0a      	ldr	r5, [pc, #40]	@ (8007388 <__libc_init_array+0x40>)
 8007360:	4c0a      	ldr	r4, [pc, #40]	@ (800738c <__libc_init_array+0x44>)
 8007362:	1b64      	subs	r4, r4, r5
 8007364:	10a4      	asrs	r4, r4, #2
 8007366:	42a6      	cmp	r6, r4
 8007368:	d105      	bne.n	8007376 <__libc_init_array+0x2e>
 800736a:	bd70      	pop	{r4, r5, r6, pc}
 800736c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007370:	4798      	blx	r3
 8007372:	3601      	adds	r6, #1
 8007374:	e7ee      	b.n	8007354 <__libc_init_array+0xc>
 8007376:	f855 3b04 	ldr.w	r3, [r5], #4
 800737a:	4798      	blx	r3
 800737c:	3601      	adds	r6, #1
 800737e:	e7f2      	b.n	8007366 <__libc_init_array+0x1e>
 8007380:	08009a80 	.word	0x08009a80
 8007384:	08009a80 	.word	0x08009a80
 8007388:	08009a80 	.word	0x08009a80
 800738c:	08009a84 	.word	0x08009a84

08007390 <__retarget_lock_init_recursive>:
 8007390:	4770      	bx	lr

08007392 <__retarget_lock_acquire_recursive>:
 8007392:	4770      	bx	lr

08007394 <__retarget_lock_release_recursive>:
 8007394:	4770      	bx	lr

08007396 <memchr>:
 8007396:	4603      	mov	r3, r0
 8007398:	b510      	push	{r4, lr}
 800739a:	b2c9      	uxtb	r1, r1
 800739c:	4402      	add	r2, r0
 800739e:	4293      	cmp	r3, r2
 80073a0:	4618      	mov	r0, r3
 80073a2:	d101      	bne.n	80073a8 <memchr+0x12>
 80073a4:	2000      	movs	r0, #0
 80073a6:	e003      	b.n	80073b0 <memchr+0x1a>
 80073a8:	7804      	ldrb	r4, [r0, #0]
 80073aa:	3301      	adds	r3, #1
 80073ac:	428c      	cmp	r4, r1
 80073ae:	d1f6      	bne.n	800739e <memchr+0x8>
 80073b0:	bd10      	pop	{r4, pc}

080073b2 <quorem>:
 80073b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b6:	6903      	ldr	r3, [r0, #16]
 80073b8:	690c      	ldr	r4, [r1, #16]
 80073ba:	4607      	mov	r7, r0
 80073bc:	42a3      	cmp	r3, r4
 80073be:	db7e      	blt.n	80074be <quorem+0x10c>
 80073c0:	3c01      	subs	r4, #1
 80073c2:	00a3      	lsls	r3, r4, #2
 80073c4:	f100 0514 	add.w	r5, r0, #20
 80073c8:	f101 0814 	add.w	r8, r1, #20
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073d2:	9301      	str	r3, [sp, #4]
 80073d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073dc:	3301      	adds	r3, #1
 80073de:	429a      	cmp	r2, r3
 80073e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80073e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073e8:	d32e      	bcc.n	8007448 <quorem+0x96>
 80073ea:	f04f 0a00 	mov.w	sl, #0
 80073ee:	46c4      	mov	ip, r8
 80073f0:	46ae      	mov	lr, r5
 80073f2:	46d3      	mov	fp, sl
 80073f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80073f8:	b298      	uxth	r0, r3
 80073fa:	fb06 a000 	mla	r0, r6, r0, sl
 80073fe:	0c1b      	lsrs	r3, r3, #16
 8007400:	0c02      	lsrs	r2, r0, #16
 8007402:	fb06 2303 	mla	r3, r6, r3, r2
 8007406:	f8de 2000 	ldr.w	r2, [lr]
 800740a:	b280      	uxth	r0, r0
 800740c:	b292      	uxth	r2, r2
 800740e:	1a12      	subs	r2, r2, r0
 8007410:	445a      	add	r2, fp
 8007412:	f8de 0000 	ldr.w	r0, [lr]
 8007416:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800741a:	b29b      	uxth	r3, r3
 800741c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007420:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007424:	b292      	uxth	r2, r2
 8007426:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800742a:	45e1      	cmp	r9, ip
 800742c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007430:	f84e 2b04 	str.w	r2, [lr], #4
 8007434:	d2de      	bcs.n	80073f4 <quorem+0x42>
 8007436:	9b00      	ldr	r3, [sp, #0]
 8007438:	58eb      	ldr	r3, [r5, r3]
 800743a:	b92b      	cbnz	r3, 8007448 <quorem+0x96>
 800743c:	9b01      	ldr	r3, [sp, #4]
 800743e:	3b04      	subs	r3, #4
 8007440:	429d      	cmp	r5, r3
 8007442:	461a      	mov	r2, r3
 8007444:	d32f      	bcc.n	80074a6 <quorem+0xf4>
 8007446:	613c      	str	r4, [r7, #16]
 8007448:	4638      	mov	r0, r7
 800744a:	f001 fb33 	bl	8008ab4 <__mcmp>
 800744e:	2800      	cmp	r0, #0
 8007450:	db25      	blt.n	800749e <quorem+0xec>
 8007452:	4629      	mov	r1, r5
 8007454:	2000      	movs	r0, #0
 8007456:	f858 2b04 	ldr.w	r2, [r8], #4
 800745a:	f8d1 c000 	ldr.w	ip, [r1]
 800745e:	fa1f fe82 	uxth.w	lr, r2
 8007462:	fa1f f38c 	uxth.w	r3, ip
 8007466:	eba3 030e 	sub.w	r3, r3, lr
 800746a:	4403      	add	r3, r0
 800746c:	0c12      	lsrs	r2, r2, #16
 800746e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007472:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007476:	b29b      	uxth	r3, r3
 8007478:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800747c:	45c1      	cmp	r9, r8
 800747e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007482:	f841 3b04 	str.w	r3, [r1], #4
 8007486:	d2e6      	bcs.n	8007456 <quorem+0xa4>
 8007488:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800748c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007490:	b922      	cbnz	r2, 800749c <quorem+0xea>
 8007492:	3b04      	subs	r3, #4
 8007494:	429d      	cmp	r5, r3
 8007496:	461a      	mov	r2, r3
 8007498:	d30b      	bcc.n	80074b2 <quorem+0x100>
 800749a:	613c      	str	r4, [r7, #16]
 800749c:	3601      	adds	r6, #1
 800749e:	4630      	mov	r0, r6
 80074a0:	b003      	add	sp, #12
 80074a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a6:	6812      	ldr	r2, [r2, #0]
 80074a8:	3b04      	subs	r3, #4
 80074aa:	2a00      	cmp	r2, #0
 80074ac:	d1cb      	bne.n	8007446 <quorem+0x94>
 80074ae:	3c01      	subs	r4, #1
 80074b0:	e7c6      	b.n	8007440 <quorem+0x8e>
 80074b2:	6812      	ldr	r2, [r2, #0]
 80074b4:	3b04      	subs	r3, #4
 80074b6:	2a00      	cmp	r2, #0
 80074b8:	d1ef      	bne.n	800749a <quorem+0xe8>
 80074ba:	3c01      	subs	r4, #1
 80074bc:	e7ea      	b.n	8007494 <quorem+0xe2>
 80074be:	2000      	movs	r0, #0
 80074c0:	e7ee      	b.n	80074a0 <quorem+0xee>
 80074c2:	0000      	movs	r0, r0
 80074c4:	0000      	movs	r0, r0
	...

080074c8 <_dtoa_r>:
 80074c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074cc:	4614      	mov	r4, r2
 80074ce:	461d      	mov	r5, r3
 80074d0:	69c7      	ldr	r7, [r0, #28]
 80074d2:	b097      	sub	sp, #92	@ 0x5c
 80074d4:	4683      	mov	fp, r0
 80074d6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80074da:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80074dc:	b97f      	cbnz	r7, 80074fe <_dtoa_r+0x36>
 80074de:	2010      	movs	r0, #16
 80074e0:	f000 ff12 	bl	8008308 <malloc>
 80074e4:	4602      	mov	r2, r0
 80074e6:	f8cb 001c 	str.w	r0, [fp, #28]
 80074ea:	b920      	cbnz	r0, 80074f6 <_dtoa_r+0x2e>
 80074ec:	21ef      	movs	r1, #239	@ 0xef
 80074ee:	4ba8      	ldr	r3, [pc, #672]	@ (8007790 <_dtoa_r+0x2c8>)
 80074f0:	48a8      	ldr	r0, [pc, #672]	@ (8007794 <_dtoa_r+0x2cc>)
 80074f2:	f001 fcd7 	bl	8008ea4 <__assert_func>
 80074f6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80074fa:	6007      	str	r7, [r0, #0]
 80074fc:	60c7      	str	r7, [r0, #12]
 80074fe:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007502:	6819      	ldr	r1, [r3, #0]
 8007504:	b159      	cbz	r1, 800751e <_dtoa_r+0x56>
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	2301      	movs	r3, #1
 800750a:	4093      	lsls	r3, r2
 800750c:	604a      	str	r2, [r1, #4]
 800750e:	608b      	str	r3, [r1, #8]
 8007510:	4658      	mov	r0, fp
 8007512:	f001 f897 	bl	8008644 <_Bfree>
 8007516:	2200      	movs	r2, #0
 8007518:	f8db 301c 	ldr.w	r3, [fp, #28]
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	1e2b      	subs	r3, r5, #0
 8007520:	bfaf      	iteee	ge
 8007522:	2300      	movge	r3, #0
 8007524:	2201      	movlt	r2, #1
 8007526:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800752a:	9303      	strlt	r3, [sp, #12]
 800752c:	bfa8      	it	ge
 800752e:	6033      	strge	r3, [r6, #0]
 8007530:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007534:	4b98      	ldr	r3, [pc, #608]	@ (8007798 <_dtoa_r+0x2d0>)
 8007536:	bfb8      	it	lt
 8007538:	6032      	strlt	r2, [r6, #0]
 800753a:	ea33 0308 	bics.w	r3, r3, r8
 800753e:	d112      	bne.n	8007566 <_dtoa_r+0x9e>
 8007540:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007544:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800754c:	4323      	orrs	r3, r4
 800754e:	f000 8550 	beq.w	8007ff2 <_dtoa_r+0xb2a>
 8007552:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007554:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800779c <_dtoa_r+0x2d4>
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 8552 	beq.w	8008002 <_dtoa_r+0xb3a>
 800755e:	f10a 0303 	add.w	r3, sl, #3
 8007562:	f000 bd4c 	b.w	8007ffe <_dtoa_r+0xb36>
 8007566:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800756a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800756e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007572:	2200      	movs	r2, #0
 8007574:	2300      	movs	r3, #0
 8007576:	f7f9 fa39 	bl	80009ec <__aeabi_dcmpeq>
 800757a:	4607      	mov	r7, r0
 800757c:	b158      	cbz	r0, 8007596 <_dtoa_r+0xce>
 800757e:	2301      	movs	r3, #1
 8007580:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007586:	b113      	cbz	r3, 800758e <_dtoa_r+0xc6>
 8007588:	4b85      	ldr	r3, [pc, #532]	@ (80077a0 <_dtoa_r+0x2d8>)
 800758a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800758c:	6013      	str	r3, [r2, #0]
 800758e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80077a4 <_dtoa_r+0x2dc>
 8007592:	f000 bd36 	b.w	8008002 <_dtoa_r+0xb3a>
 8007596:	ab14      	add	r3, sp, #80	@ 0x50
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	ab15      	add	r3, sp, #84	@ 0x54
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	4658      	mov	r0, fp
 80075a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80075a4:	f001 fb36 	bl	8008c14 <__d2b>
 80075a8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80075ac:	4681      	mov	r9, r0
 80075ae:	2e00      	cmp	r6, #0
 80075b0:	d077      	beq.n	80076a2 <_dtoa_r+0x1da>
 80075b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075b8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80075bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075c0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80075c4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80075c8:	9712      	str	r7, [sp, #72]	@ 0x48
 80075ca:	4619      	mov	r1, r3
 80075cc:	2200      	movs	r2, #0
 80075ce:	4b76      	ldr	r3, [pc, #472]	@ (80077a8 <_dtoa_r+0x2e0>)
 80075d0:	f7f8 fdec 	bl	80001ac <__aeabi_dsub>
 80075d4:	a368      	add	r3, pc, #416	@ (adr r3, 8007778 <_dtoa_r+0x2b0>)
 80075d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075da:	f7f8 ff9f 	bl	800051c <__aeabi_dmul>
 80075de:	a368      	add	r3, pc, #416	@ (adr r3, 8007780 <_dtoa_r+0x2b8>)
 80075e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e4:	f7f8 fde4 	bl	80001b0 <__adddf3>
 80075e8:	4604      	mov	r4, r0
 80075ea:	4630      	mov	r0, r6
 80075ec:	460d      	mov	r5, r1
 80075ee:	f7f8 ff2b 	bl	8000448 <__aeabi_i2d>
 80075f2:	a365      	add	r3, pc, #404	@ (adr r3, 8007788 <_dtoa_r+0x2c0>)
 80075f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f8:	f7f8 ff90 	bl	800051c <__aeabi_dmul>
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	4620      	mov	r0, r4
 8007602:	4629      	mov	r1, r5
 8007604:	f7f8 fdd4 	bl	80001b0 <__adddf3>
 8007608:	4604      	mov	r4, r0
 800760a:	460d      	mov	r5, r1
 800760c:	f7f9 fa36 	bl	8000a7c <__aeabi_d2iz>
 8007610:	2200      	movs	r2, #0
 8007612:	4607      	mov	r7, r0
 8007614:	2300      	movs	r3, #0
 8007616:	4620      	mov	r0, r4
 8007618:	4629      	mov	r1, r5
 800761a:	f7f9 f9f1 	bl	8000a00 <__aeabi_dcmplt>
 800761e:	b140      	cbz	r0, 8007632 <_dtoa_r+0x16a>
 8007620:	4638      	mov	r0, r7
 8007622:	f7f8 ff11 	bl	8000448 <__aeabi_i2d>
 8007626:	4622      	mov	r2, r4
 8007628:	462b      	mov	r3, r5
 800762a:	f7f9 f9df 	bl	80009ec <__aeabi_dcmpeq>
 800762e:	b900      	cbnz	r0, 8007632 <_dtoa_r+0x16a>
 8007630:	3f01      	subs	r7, #1
 8007632:	2f16      	cmp	r7, #22
 8007634:	d853      	bhi.n	80076de <_dtoa_r+0x216>
 8007636:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800763a:	4b5c      	ldr	r3, [pc, #368]	@ (80077ac <_dtoa_r+0x2e4>)
 800763c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	f7f9 f9dc 	bl	8000a00 <__aeabi_dcmplt>
 8007648:	2800      	cmp	r0, #0
 800764a:	d04a      	beq.n	80076e2 <_dtoa_r+0x21a>
 800764c:	2300      	movs	r3, #0
 800764e:	3f01      	subs	r7, #1
 8007650:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007652:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007654:	1b9b      	subs	r3, r3, r6
 8007656:	1e5a      	subs	r2, r3, #1
 8007658:	bf46      	itte	mi
 800765a:	f1c3 0801 	rsbmi	r8, r3, #1
 800765e:	2300      	movmi	r3, #0
 8007660:	f04f 0800 	movpl.w	r8, #0
 8007664:	9209      	str	r2, [sp, #36]	@ 0x24
 8007666:	bf48      	it	mi
 8007668:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800766a:	2f00      	cmp	r7, #0
 800766c:	db3b      	blt.n	80076e6 <_dtoa_r+0x21e>
 800766e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007670:	970e      	str	r7, [sp, #56]	@ 0x38
 8007672:	443b      	add	r3, r7
 8007674:	9309      	str	r3, [sp, #36]	@ 0x24
 8007676:	2300      	movs	r3, #0
 8007678:	930a      	str	r3, [sp, #40]	@ 0x28
 800767a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800767c:	2b09      	cmp	r3, #9
 800767e:	d866      	bhi.n	800774e <_dtoa_r+0x286>
 8007680:	2b05      	cmp	r3, #5
 8007682:	bfc4      	itt	gt
 8007684:	3b04      	subgt	r3, #4
 8007686:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007688:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800768a:	bfc8      	it	gt
 800768c:	2400      	movgt	r4, #0
 800768e:	f1a3 0302 	sub.w	r3, r3, #2
 8007692:	bfd8      	it	le
 8007694:	2401      	movle	r4, #1
 8007696:	2b03      	cmp	r3, #3
 8007698:	d864      	bhi.n	8007764 <_dtoa_r+0x29c>
 800769a:	e8df f003 	tbb	[pc, r3]
 800769e:	382b      	.short	0x382b
 80076a0:	5636      	.short	0x5636
 80076a2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80076a6:	441e      	add	r6, r3
 80076a8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80076ac:	2b20      	cmp	r3, #32
 80076ae:	bfc1      	itttt	gt
 80076b0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80076b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80076b8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80076bc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80076c0:	bfd6      	itet	le
 80076c2:	f1c3 0320 	rsble	r3, r3, #32
 80076c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80076ca:	fa04 f003 	lslle.w	r0, r4, r3
 80076ce:	f7f8 feab 	bl	8000428 <__aeabi_ui2d>
 80076d2:	2201      	movs	r2, #1
 80076d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80076d8:	3e01      	subs	r6, #1
 80076da:	9212      	str	r2, [sp, #72]	@ 0x48
 80076dc:	e775      	b.n	80075ca <_dtoa_r+0x102>
 80076de:	2301      	movs	r3, #1
 80076e0:	e7b6      	b.n	8007650 <_dtoa_r+0x188>
 80076e2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80076e4:	e7b5      	b.n	8007652 <_dtoa_r+0x18a>
 80076e6:	427b      	negs	r3, r7
 80076e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80076ea:	2300      	movs	r3, #0
 80076ec:	eba8 0807 	sub.w	r8, r8, r7
 80076f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80076f2:	e7c2      	b.n	800767a <_dtoa_r+0x1b2>
 80076f4:	2300      	movs	r3, #0
 80076f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	dc35      	bgt.n	800776a <_dtoa_r+0x2a2>
 80076fe:	2301      	movs	r3, #1
 8007700:	461a      	mov	r2, r3
 8007702:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007706:	9221      	str	r2, [sp, #132]	@ 0x84
 8007708:	e00b      	b.n	8007722 <_dtoa_r+0x25a>
 800770a:	2301      	movs	r3, #1
 800770c:	e7f3      	b.n	80076f6 <_dtoa_r+0x22e>
 800770e:	2300      	movs	r3, #0
 8007710:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007712:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007714:	18fb      	adds	r3, r7, r3
 8007716:	9308      	str	r3, [sp, #32]
 8007718:	3301      	adds	r3, #1
 800771a:	2b01      	cmp	r3, #1
 800771c:	9307      	str	r3, [sp, #28]
 800771e:	bfb8      	it	lt
 8007720:	2301      	movlt	r3, #1
 8007722:	2100      	movs	r1, #0
 8007724:	2204      	movs	r2, #4
 8007726:	f8db 001c 	ldr.w	r0, [fp, #28]
 800772a:	f102 0514 	add.w	r5, r2, #20
 800772e:	429d      	cmp	r5, r3
 8007730:	d91f      	bls.n	8007772 <_dtoa_r+0x2aa>
 8007732:	6041      	str	r1, [r0, #4]
 8007734:	4658      	mov	r0, fp
 8007736:	f000 ff45 	bl	80085c4 <_Balloc>
 800773a:	4682      	mov	sl, r0
 800773c:	2800      	cmp	r0, #0
 800773e:	d139      	bne.n	80077b4 <_dtoa_r+0x2ec>
 8007740:	4602      	mov	r2, r0
 8007742:	f240 11af 	movw	r1, #431	@ 0x1af
 8007746:	4b1a      	ldr	r3, [pc, #104]	@ (80077b0 <_dtoa_r+0x2e8>)
 8007748:	e6d2      	b.n	80074f0 <_dtoa_r+0x28>
 800774a:	2301      	movs	r3, #1
 800774c:	e7e0      	b.n	8007710 <_dtoa_r+0x248>
 800774e:	2401      	movs	r4, #1
 8007750:	2300      	movs	r3, #0
 8007752:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007754:	9320      	str	r3, [sp, #128]	@ 0x80
 8007756:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800775a:	2200      	movs	r2, #0
 800775c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007760:	2312      	movs	r3, #18
 8007762:	e7d0      	b.n	8007706 <_dtoa_r+0x23e>
 8007764:	2301      	movs	r3, #1
 8007766:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007768:	e7f5      	b.n	8007756 <_dtoa_r+0x28e>
 800776a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800776c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007770:	e7d7      	b.n	8007722 <_dtoa_r+0x25a>
 8007772:	3101      	adds	r1, #1
 8007774:	0052      	lsls	r2, r2, #1
 8007776:	e7d8      	b.n	800772a <_dtoa_r+0x262>
 8007778:	636f4361 	.word	0x636f4361
 800777c:	3fd287a7 	.word	0x3fd287a7
 8007780:	8b60c8b3 	.word	0x8b60c8b3
 8007784:	3fc68a28 	.word	0x3fc68a28
 8007788:	509f79fb 	.word	0x509f79fb
 800778c:	3fd34413 	.word	0x3fd34413
 8007790:	08009749 	.word	0x08009749
 8007794:	08009760 	.word	0x08009760
 8007798:	7ff00000 	.word	0x7ff00000
 800779c:	08009745 	.word	0x08009745
 80077a0:	08009719 	.word	0x08009719
 80077a4:	08009718 	.word	0x08009718
 80077a8:	3ff80000 	.word	0x3ff80000
 80077ac:	08009868 	.word	0x08009868
 80077b0:	080097b8 	.word	0x080097b8
 80077b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077b8:	6018      	str	r0, [r3, #0]
 80077ba:	9b07      	ldr	r3, [sp, #28]
 80077bc:	2b0e      	cmp	r3, #14
 80077be:	f200 80a4 	bhi.w	800790a <_dtoa_r+0x442>
 80077c2:	2c00      	cmp	r4, #0
 80077c4:	f000 80a1 	beq.w	800790a <_dtoa_r+0x442>
 80077c8:	2f00      	cmp	r7, #0
 80077ca:	dd33      	ble.n	8007834 <_dtoa_r+0x36c>
 80077cc:	4b86      	ldr	r3, [pc, #536]	@ (80079e8 <_dtoa_r+0x520>)
 80077ce:	f007 020f 	and.w	r2, r7, #15
 80077d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077d6:	05f8      	lsls	r0, r7, #23
 80077d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077dc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80077e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80077e4:	d516      	bpl.n	8007814 <_dtoa_r+0x34c>
 80077e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077ea:	4b80      	ldr	r3, [pc, #512]	@ (80079ec <_dtoa_r+0x524>)
 80077ec:	2603      	movs	r6, #3
 80077ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077f2:	f7f8 ffbd 	bl	8000770 <__aeabi_ddiv>
 80077f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077fa:	f004 040f 	and.w	r4, r4, #15
 80077fe:	4d7b      	ldr	r5, [pc, #492]	@ (80079ec <_dtoa_r+0x524>)
 8007800:	b954      	cbnz	r4, 8007818 <_dtoa_r+0x350>
 8007802:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800780a:	f7f8 ffb1 	bl	8000770 <__aeabi_ddiv>
 800780e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007812:	e028      	b.n	8007866 <_dtoa_r+0x39e>
 8007814:	2602      	movs	r6, #2
 8007816:	e7f2      	b.n	80077fe <_dtoa_r+0x336>
 8007818:	07e1      	lsls	r1, r4, #31
 800781a:	d508      	bpl.n	800782e <_dtoa_r+0x366>
 800781c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007820:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007824:	f7f8 fe7a 	bl	800051c <__aeabi_dmul>
 8007828:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800782c:	3601      	adds	r6, #1
 800782e:	1064      	asrs	r4, r4, #1
 8007830:	3508      	adds	r5, #8
 8007832:	e7e5      	b.n	8007800 <_dtoa_r+0x338>
 8007834:	f000 80d2 	beq.w	80079dc <_dtoa_r+0x514>
 8007838:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800783c:	427c      	negs	r4, r7
 800783e:	4b6a      	ldr	r3, [pc, #424]	@ (80079e8 <_dtoa_r+0x520>)
 8007840:	f004 020f 	and.w	r2, r4, #15
 8007844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f7f8 fe66 	bl	800051c <__aeabi_dmul>
 8007850:	2602      	movs	r6, #2
 8007852:	2300      	movs	r3, #0
 8007854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007858:	4d64      	ldr	r5, [pc, #400]	@ (80079ec <_dtoa_r+0x524>)
 800785a:	1124      	asrs	r4, r4, #4
 800785c:	2c00      	cmp	r4, #0
 800785e:	f040 80b2 	bne.w	80079c6 <_dtoa_r+0x4fe>
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1d3      	bne.n	800780e <_dtoa_r+0x346>
 8007866:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800786a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 80b7 	beq.w	80079e0 <_dtoa_r+0x518>
 8007872:	2200      	movs	r2, #0
 8007874:	4620      	mov	r0, r4
 8007876:	4629      	mov	r1, r5
 8007878:	4b5d      	ldr	r3, [pc, #372]	@ (80079f0 <_dtoa_r+0x528>)
 800787a:	f7f9 f8c1 	bl	8000a00 <__aeabi_dcmplt>
 800787e:	2800      	cmp	r0, #0
 8007880:	f000 80ae 	beq.w	80079e0 <_dtoa_r+0x518>
 8007884:	9b07      	ldr	r3, [sp, #28]
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 80aa 	beq.w	80079e0 <_dtoa_r+0x518>
 800788c:	9b08      	ldr	r3, [sp, #32]
 800788e:	2b00      	cmp	r3, #0
 8007890:	dd37      	ble.n	8007902 <_dtoa_r+0x43a>
 8007892:	1e7b      	subs	r3, r7, #1
 8007894:	4620      	mov	r0, r4
 8007896:	9304      	str	r3, [sp, #16]
 8007898:	2200      	movs	r2, #0
 800789a:	4629      	mov	r1, r5
 800789c:	4b55      	ldr	r3, [pc, #340]	@ (80079f4 <_dtoa_r+0x52c>)
 800789e:	f7f8 fe3d 	bl	800051c <__aeabi_dmul>
 80078a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078a6:	9c08      	ldr	r4, [sp, #32]
 80078a8:	3601      	adds	r6, #1
 80078aa:	4630      	mov	r0, r6
 80078ac:	f7f8 fdcc 	bl	8000448 <__aeabi_i2d>
 80078b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078b4:	f7f8 fe32 	bl	800051c <__aeabi_dmul>
 80078b8:	2200      	movs	r2, #0
 80078ba:	4b4f      	ldr	r3, [pc, #316]	@ (80079f8 <_dtoa_r+0x530>)
 80078bc:	f7f8 fc78 	bl	80001b0 <__adddf3>
 80078c0:	4605      	mov	r5, r0
 80078c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80078c6:	2c00      	cmp	r4, #0
 80078c8:	f040 809a 	bne.w	8007a00 <_dtoa_r+0x538>
 80078cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078d0:	2200      	movs	r2, #0
 80078d2:	4b4a      	ldr	r3, [pc, #296]	@ (80079fc <_dtoa_r+0x534>)
 80078d4:	f7f8 fc6a 	bl	80001ac <__aeabi_dsub>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078e0:	462a      	mov	r2, r5
 80078e2:	4633      	mov	r3, r6
 80078e4:	f7f9 f8aa 	bl	8000a3c <__aeabi_dcmpgt>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	f040 828e 	bne.w	8007e0a <_dtoa_r+0x942>
 80078ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078f2:	462a      	mov	r2, r5
 80078f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80078f8:	f7f9 f882 	bl	8000a00 <__aeabi_dcmplt>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	f040 8127 	bne.w	8007b50 <_dtoa_r+0x688>
 8007902:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007906:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800790a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800790c:	2b00      	cmp	r3, #0
 800790e:	f2c0 8163 	blt.w	8007bd8 <_dtoa_r+0x710>
 8007912:	2f0e      	cmp	r7, #14
 8007914:	f300 8160 	bgt.w	8007bd8 <_dtoa_r+0x710>
 8007918:	4b33      	ldr	r3, [pc, #204]	@ (80079e8 <_dtoa_r+0x520>)
 800791a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800791e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007922:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007926:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007928:	2b00      	cmp	r3, #0
 800792a:	da03      	bge.n	8007934 <_dtoa_r+0x46c>
 800792c:	9b07      	ldr	r3, [sp, #28]
 800792e:	2b00      	cmp	r3, #0
 8007930:	f340 8100 	ble.w	8007b34 <_dtoa_r+0x66c>
 8007934:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007938:	4656      	mov	r6, sl
 800793a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800793e:	4620      	mov	r0, r4
 8007940:	4629      	mov	r1, r5
 8007942:	f7f8 ff15 	bl	8000770 <__aeabi_ddiv>
 8007946:	f7f9 f899 	bl	8000a7c <__aeabi_d2iz>
 800794a:	4680      	mov	r8, r0
 800794c:	f7f8 fd7c 	bl	8000448 <__aeabi_i2d>
 8007950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007954:	f7f8 fde2 	bl	800051c <__aeabi_dmul>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	4620      	mov	r0, r4
 800795e:	4629      	mov	r1, r5
 8007960:	f7f8 fc24 	bl	80001ac <__aeabi_dsub>
 8007964:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007968:	9d07      	ldr	r5, [sp, #28]
 800796a:	f806 4b01 	strb.w	r4, [r6], #1
 800796e:	eba6 040a 	sub.w	r4, r6, sl
 8007972:	42a5      	cmp	r5, r4
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	f040 8116 	bne.w	8007ba8 <_dtoa_r+0x6e0>
 800797c:	f7f8 fc18 	bl	80001b0 <__adddf3>
 8007980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007984:	4604      	mov	r4, r0
 8007986:	460d      	mov	r5, r1
 8007988:	f7f9 f858 	bl	8000a3c <__aeabi_dcmpgt>
 800798c:	2800      	cmp	r0, #0
 800798e:	f040 80f8 	bne.w	8007b82 <_dtoa_r+0x6ba>
 8007992:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007996:	4620      	mov	r0, r4
 8007998:	4629      	mov	r1, r5
 800799a:	f7f9 f827 	bl	80009ec <__aeabi_dcmpeq>
 800799e:	b118      	cbz	r0, 80079a8 <_dtoa_r+0x4e0>
 80079a0:	f018 0f01 	tst.w	r8, #1
 80079a4:	f040 80ed 	bne.w	8007b82 <_dtoa_r+0x6ba>
 80079a8:	4649      	mov	r1, r9
 80079aa:	4658      	mov	r0, fp
 80079ac:	f000 fe4a 	bl	8008644 <_Bfree>
 80079b0:	2300      	movs	r3, #0
 80079b2:	7033      	strb	r3, [r6, #0]
 80079b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80079b6:	3701      	adds	r7, #1
 80079b8:	601f      	str	r7, [r3, #0]
 80079ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 8320 	beq.w	8008002 <_dtoa_r+0xb3a>
 80079c2:	601e      	str	r6, [r3, #0]
 80079c4:	e31d      	b.n	8008002 <_dtoa_r+0xb3a>
 80079c6:	07e2      	lsls	r2, r4, #31
 80079c8:	d505      	bpl.n	80079d6 <_dtoa_r+0x50e>
 80079ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80079ce:	f7f8 fda5 	bl	800051c <__aeabi_dmul>
 80079d2:	2301      	movs	r3, #1
 80079d4:	3601      	adds	r6, #1
 80079d6:	1064      	asrs	r4, r4, #1
 80079d8:	3508      	adds	r5, #8
 80079da:	e73f      	b.n	800785c <_dtoa_r+0x394>
 80079dc:	2602      	movs	r6, #2
 80079de:	e742      	b.n	8007866 <_dtoa_r+0x39e>
 80079e0:	9c07      	ldr	r4, [sp, #28]
 80079e2:	9704      	str	r7, [sp, #16]
 80079e4:	e761      	b.n	80078aa <_dtoa_r+0x3e2>
 80079e6:	bf00      	nop
 80079e8:	08009868 	.word	0x08009868
 80079ec:	08009840 	.word	0x08009840
 80079f0:	3ff00000 	.word	0x3ff00000
 80079f4:	40240000 	.word	0x40240000
 80079f8:	401c0000 	.word	0x401c0000
 80079fc:	40140000 	.word	0x40140000
 8007a00:	4b70      	ldr	r3, [pc, #448]	@ (8007bc4 <_dtoa_r+0x6fc>)
 8007a02:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a0c:	4454      	add	r4, sl
 8007a0e:	2900      	cmp	r1, #0
 8007a10:	d045      	beq.n	8007a9e <_dtoa_r+0x5d6>
 8007a12:	2000      	movs	r0, #0
 8007a14:	496c      	ldr	r1, [pc, #432]	@ (8007bc8 <_dtoa_r+0x700>)
 8007a16:	f7f8 feab 	bl	8000770 <__aeabi_ddiv>
 8007a1a:	4633      	mov	r3, r6
 8007a1c:	462a      	mov	r2, r5
 8007a1e:	f7f8 fbc5 	bl	80001ac <__aeabi_dsub>
 8007a22:	4656      	mov	r6, sl
 8007a24:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007a28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a2c:	f7f9 f826 	bl	8000a7c <__aeabi_d2iz>
 8007a30:	4605      	mov	r5, r0
 8007a32:	f7f8 fd09 	bl	8000448 <__aeabi_i2d>
 8007a36:	4602      	mov	r2, r0
 8007a38:	460b      	mov	r3, r1
 8007a3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a3e:	f7f8 fbb5 	bl	80001ac <__aeabi_dsub>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	3530      	adds	r5, #48	@ 0x30
 8007a48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007a50:	f806 5b01 	strb.w	r5, [r6], #1
 8007a54:	f7f8 ffd4 	bl	8000a00 <__aeabi_dcmplt>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d163      	bne.n	8007b24 <_dtoa_r+0x65c>
 8007a5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a60:	2000      	movs	r0, #0
 8007a62:	495a      	ldr	r1, [pc, #360]	@ (8007bcc <_dtoa_r+0x704>)
 8007a64:	f7f8 fba2 	bl	80001ac <__aeabi_dsub>
 8007a68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007a6c:	f7f8 ffc8 	bl	8000a00 <__aeabi_dcmplt>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	f040 8087 	bne.w	8007b84 <_dtoa_r+0x6bc>
 8007a76:	42a6      	cmp	r6, r4
 8007a78:	f43f af43 	beq.w	8007902 <_dtoa_r+0x43a>
 8007a7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007a80:	2200      	movs	r2, #0
 8007a82:	4b53      	ldr	r3, [pc, #332]	@ (8007bd0 <_dtoa_r+0x708>)
 8007a84:	f7f8 fd4a 	bl	800051c <__aeabi_dmul>
 8007a88:	2200      	movs	r2, #0
 8007a8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a92:	4b4f      	ldr	r3, [pc, #316]	@ (8007bd0 <_dtoa_r+0x708>)
 8007a94:	f7f8 fd42 	bl	800051c <__aeabi_dmul>
 8007a98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a9c:	e7c4      	b.n	8007a28 <_dtoa_r+0x560>
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	f7f8 fd3b 	bl	800051c <__aeabi_dmul>
 8007aa6:	4656      	mov	r6, sl
 8007aa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007aac:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007aae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ab2:	f7f8 ffe3 	bl	8000a7c <__aeabi_d2iz>
 8007ab6:	4605      	mov	r5, r0
 8007ab8:	f7f8 fcc6 	bl	8000448 <__aeabi_i2d>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ac4:	f7f8 fb72 	bl	80001ac <__aeabi_dsub>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	3530      	adds	r5, #48	@ 0x30
 8007ace:	f806 5b01 	strb.w	r5, [r6], #1
 8007ad2:	42a6      	cmp	r6, r4
 8007ad4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ad8:	f04f 0200 	mov.w	r2, #0
 8007adc:	d124      	bne.n	8007b28 <_dtoa_r+0x660>
 8007ade:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ae2:	4b39      	ldr	r3, [pc, #228]	@ (8007bc8 <_dtoa_r+0x700>)
 8007ae4:	f7f8 fb64 	bl	80001b0 <__adddf3>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007af0:	f7f8 ffa4 	bl	8000a3c <__aeabi_dcmpgt>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d145      	bne.n	8007b84 <_dtoa_r+0x6bc>
 8007af8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007afc:	2000      	movs	r0, #0
 8007afe:	4932      	ldr	r1, [pc, #200]	@ (8007bc8 <_dtoa_r+0x700>)
 8007b00:	f7f8 fb54 	bl	80001ac <__aeabi_dsub>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b0c:	f7f8 ff78 	bl	8000a00 <__aeabi_dcmplt>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	f43f aef6 	beq.w	8007902 <_dtoa_r+0x43a>
 8007b16:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007b18:	1e73      	subs	r3, r6, #1
 8007b1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007b1c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007b20:	2b30      	cmp	r3, #48	@ 0x30
 8007b22:	d0f8      	beq.n	8007b16 <_dtoa_r+0x64e>
 8007b24:	9f04      	ldr	r7, [sp, #16]
 8007b26:	e73f      	b.n	80079a8 <_dtoa_r+0x4e0>
 8007b28:	4b29      	ldr	r3, [pc, #164]	@ (8007bd0 <_dtoa_r+0x708>)
 8007b2a:	f7f8 fcf7 	bl	800051c <__aeabi_dmul>
 8007b2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b32:	e7bc      	b.n	8007aae <_dtoa_r+0x5e6>
 8007b34:	d10c      	bne.n	8007b50 <_dtoa_r+0x688>
 8007b36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	4b25      	ldr	r3, [pc, #148]	@ (8007bd4 <_dtoa_r+0x70c>)
 8007b3e:	f7f8 fced 	bl	800051c <__aeabi_dmul>
 8007b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b46:	f7f8 ff6f 	bl	8000a28 <__aeabi_dcmpge>
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	f000 815b 	beq.w	8007e06 <_dtoa_r+0x93e>
 8007b50:	2400      	movs	r4, #0
 8007b52:	4625      	mov	r5, r4
 8007b54:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b56:	4656      	mov	r6, sl
 8007b58:	43db      	mvns	r3, r3
 8007b5a:	9304      	str	r3, [sp, #16]
 8007b5c:	2700      	movs	r7, #0
 8007b5e:	4621      	mov	r1, r4
 8007b60:	4658      	mov	r0, fp
 8007b62:	f000 fd6f 	bl	8008644 <_Bfree>
 8007b66:	2d00      	cmp	r5, #0
 8007b68:	d0dc      	beq.n	8007b24 <_dtoa_r+0x65c>
 8007b6a:	b12f      	cbz	r7, 8007b78 <_dtoa_r+0x6b0>
 8007b6c:	42af      	cmp	r7, r5
 8007b6e:	d003      	beq.n	8007b78 <_dtoa_r+0x6b0>
 8007b70:	4639      	mov	r1, r7
 8007b72:	4658      	mov	r0, fp
 8007b74:	f000 fd66 	bl	8008644 <_Bfree>
 8007b78:	4629      	mov	r1, r5
 8007b7a:	4658      	mov	r0, fp
 8007b7c:	f000 fd62 	bl	8008644 <_Bfree>
 8007b80:	e7d0      	b.n	8007b24 <_dtoa_r+0x65c>
 8007b82:	9704      	str	r7, [sp, #16]
 8007b84:	4633      	mov	r3, r6
 8007b86:	461e      	mov	r6, r3
 8007b88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b8c:	2a39      	cmp	r2, #57	@ 0x39
 8007b8e:	d107      	bne.n	8007ba0 <_dtoa_r+0x6d8>
 8007b90:	459a      	cmp	sl, r3
 8007b92:	d1f8      	bne.n	8007b86 <_dtoa_r+0x6be>
 8007b94:	9a04      	ldr	r2, [sp, #16]
 8007b96:	3201      	adds	r2, #1
 8007b98:	9204      	str	r2, [sp, #16]
 8007b9a:	2230      	movs	r2, #48	@ 0x30
 8007b9c:	f88a 2000 	strb.w	r2, [sl]
 8007ba0:	781a      	ldrb	r2, [r3, #0]
 8007ba2:	3201      	adds	r2, #1
 8007ba4:	701a      	strb	r2, [r3, #0]
 8007ba6:	e7bd      	b.n	8007b24 <_dtoa_r+0x65c>
 8007ba8:	2200      	movs	r2, #0
 8007baa:	4b09      	ldr	r3, [pc, #36]	@ (8007bd0 <_dtoa_r+0x708>)
 8007bac:	f7f8 fcb6 	bl	800051c <__aeabi_dmul>
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	460d      	mov	r5, r1
 8007bb8:	f7f8 ff18 	bl	80009ec <__aeabi_dcmpeq>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	f43f aebc 	beq.w	800793a <_dtoa_r+0x472>
 8007bc2:	e6f1      	b.n	80079a8 <_dtoa_r+0x4e0>
 8007bc4:	08009868 	.word	0x08009868
 8007bc8:	3fe00000 	.word	0x3fe00000
 8007bcc:	3ff00000 	.word	0x3ff00000
 8007bd0:	40240000 	.word	0x40240000
 8007bd4:	40140000 	.word	0x40140000
 8007bd8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007bda:	2a00      	cmp	r2, #0
 8007bdc:	f000 80db 	beq.w	8007d96 <_dtoa_r+0x8ce>
 8007be0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007be2:	2a01      	cmp	r2, #1
 8007be4:	f300 80bf 	bgt.w	8007d66 <_dtoa_r+0x89e>
 8007be8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007bea:	2a00      	cmp	r2, #0
 8007bec:	f000 80b7 	beq.w	8007d5e <_dtoa_r+0x896>
 8007bf0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007bf4:	4646      	mov	r6, r8
 8007bf6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007bf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	441a      	add	r2, r3
 8007bfe:	4658      	mov	r0, fp
 8007c00:	4498      	add	r8, r3
 8007c02:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c04:	f000 fdd2 	bl	80087ac <__i2b>
 8007c08:	4605      	mov	r5, r0
 8007c0a:	b15e      	cbz	r6, 8007c24 <_dtoa_r+0x75c>
 8007c0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	dd08      	ble.n	8007c24 <_dtoa_r+0x75c>
 8007c12:	42b3      	cmp	r3, r6
 8007c14:	bfa8      	it	ge
 8007c16:	4633      	movge	r3, r6
 8007c18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c1a:	eba8 0803 	sub.w	r8, r8, r3
 8007c1e:	1af6      	subs	r6, r6, r3
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c26:	b1f3      	cbz	r3, 8007c66 <_dtoa_r+0x79e>
 8007c28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 80b7 	beq.w	8007d9e <_dtoa_r+0x8d6>
 8007c30:	b18c      	cbz	r4, 8007c56 <_dtoa_r+0x78e>
 8007c32:	4629      	mov	r1, r5
 8007c34:	4622      	mov	r2, r4
 8007c36:	4658      	mov	r0, fp
 8007c38:	f000 fe76 	bl	8008928 <__pow5mult>
 8007c3c:	464a      	mov	r2, r9
 8007c3e:	4601      	mov	r1, r0
 8007c40:	4605      	mov	r5, r0
 8007c42:	4658      	mov	r0, fp
 8007c44:	f000 fdc8 	bl	80087d8 <__multiply>
 8007c48:	4649      	mov	r1, r9
 8007c4a:	9004      	str	r0, [sp, #16]
 8007c4c:	4658      	mov	r0, fp
 8007c4e:	f000 fcf9 	bl	8008644 <_Bfree>
 8007c52:	9b04      	ldr	r3, [sp, #16]
 8007c54:	4699      	mov	r9, r3
 8007c56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c58:	1b1a      	subs	r2, r3, r4
 8007c5a:	d004      	beq.n	8007c66 <_dtoa_r+0x79e>
 8007c5c:	4649      	mov	r1, r9
 8007c5e:	4658      	mov	r0, fp
 8007c60:	f000 fe62 	bl	8008928 <__pow5mult>
 8007c64:	4681      	mov	r9, r0
 8007c66:	2101      	movs	r1, #1
 8007c68:	4658      	mov	r0, fp
 8007c6a:	f000 fd9f 	bl	80087ac <__i2b>
 8007c6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c70:	4604      	mov	r4, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 81c9 	beq.w	800800a <_dtoa_r+0xb42>
 8007c78:	461a      	mov	r2, r3
 8007c7a:	4601      	mov	r1, r0
 8007c7c:	4658      	mov	r0, fp
 8007c7e:	f000 fe53 	bl	8008928 <__pow5mult>
 8007c82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c84:	4604      	mov	r4, r0
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	f300 808f 	bgt.w	8007daa <_dtoa_r+0x8e2>
 8007c8c:	9b02      	ldr	r3, [sp, #8]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f040 8087 	bne.w	8007da2 <_dtoa_r+0x8da>
 8007c94:	9b03      	ldr	r3, [sp, #12]
 8007c96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f040 8083 	bne.w	8007da6 <_dtoa_r+0x8de>
 8007ca0:	9b03      	ldr	r3, [sp, #12]
 8007ca2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ca6:	0d1b      	lsrs	r3, r3, #20
 8007ca8:	051b      	lsls	r3, r3, #20
 8007caa:	b12b      	cbz	r3, 8007cb8 <_dtoa_r+0x7f0>
 8007cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cae:	f108 0801 	add.w	r8, r8, #1
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 81aa 	beq.w	8008016 <_dtoa_r+0xb4e>
 8007cc2:	6923      	ldr	r3, [r4, #16]
 8007cc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007cc8:	6918      	ldr	r0, [r3, #16]
 8007cca:	f000 fd23 	bl	8008714 <__hi0bits>
 8007cce:	f1c0 0020 	rsb	r0, r0, #32
 8007cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cd4:	4418      	add	r0, r3
 8007cd6:	f010 001f 	ands.w	r0, r0, #31
 8007cda:	d071      	beq.n	8007dc0 <_dtoa_r+0x8f8>
 8007cdc:	f1c0 0320 	rsb	r3, r0, #32
 8007ce0:	2b04      	cmp	r3, #4
 8007ce2:	dd65      	ble.n	8007db0 <_dtoa_r+0x8e8>
 8007ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ce6:	f1c0 001c 	rsb	r0, r0, #28
 8007cea:	4403      	add	r3, r0
 8007cec:	4480      	add	r8, r0
 8007cee:	4406      	add	r6, r0
 8007cf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cf2:	f1b8 0f00 	cmp.w	r8, #0
 8007cf6:	dd05      	ble.n	8007d04 <_dtoa_r+0x83c>
 8007cf8:	4649      	mov	r1, r9
 8007cfa:	4642      	mov	r2, r8
 8007cfc:	4658      	mov	r0, fp
 8007cfe:	f000 fe6d 	bl	80089dc <__lshift>
 8007d02:	4681      	mov	r9, r0
 8007d04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	dd05      	ble.n	8007d16 <_dtoa_r+0x84e>
 8007d0a:	4621      	mov	r1, r4
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	4658      	mov	r0, fp
 8007d10:	f000 fe64 	bl	80089dc <__lshift>
 8007d14:	4604      	mov	r4, r0
 8007d16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d053      	beq.n	8007dc4 <_dtoa_r+0x8fc>
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	4648      	mov	r0, r9
 8007d20:	f000 fec8 	bl	8008ab4 <__mcmp>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	da4d      	bge.n	8007dc4 <_dtoa_r+0x8fc>
 8007d28:	1e7b      	subs	r3, r7, #1
 8007d2a:	4649      	mov	r1, r9
 8007d2c:	9304      	str	r3, [sp, #16]
 8007d2e:	220a      	movs	r2, #10
 8007d30:	2300      	movs	r3, #0
 8007d32:	4658      	mov	r0, fp
 8007d34:	f000 fca8 	bl	8008688 <__multadd>
 8007d38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d3a:	4681      	mov	r9, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 816c 	beq.w	800801a <_dtoa_r+0xb52>
 8007d42:	2300      	movs	r3, #0
 8007d44:	4629      	mov	r1, r5
 8007d46:	220a      	movs	r2, #10
 8007d48:	4658      	mov	r0, fp
 8007d4a:	f000 fc9d 	bl	8008688 <__multadd>
 8007d4e:	9b08      	ldr	r3, [sp, #32]
 8007d50:	4605      	mov	r5, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	dc61      	bgt.n	8007e1a <_dtoa_r+0x952>
 8007d56:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	dc3b      	bgt.n	8007dd4 <_dtoa_r+0x90c>
 8007d5c:	e05d      	b.n	8007e1a <_dtoa_r+0x952>
 8007d5e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007d60:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007d64:	e746      	b.n	8007bf4 <_dtoa_r+0x72c>
 8007d66:	9b07      	ldr	r3, [sp, #28]
 8007d68:	1e5c      	subs	r4, r3, #1
 8007d6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d6c:	42a3      	cmp	r3, r4
 8007d6e:	bfbf      	itttt	lt
 8007d70:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007d72:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007d74:	1ae3      	sublt	r3, r4, r3
 8007d76:	18d2      	addlt	r2, r2, r3
 8007d78:	bfa8      	it	ge
 8007d7a:	1b1c      	subge	r4, r3, r4
 8007d7c:	9b07      	ldr	r3, [sp, #28]
 8007d7e:	bfbe      	ittt	lt
 8007d80:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007d82:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007d84:	2400      	movlt	r4, #0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	bfb5      	itete	lt
 8007d8a:	eba8 0603 	sublt.w	r6, r8, r3
 8007d8e:	4646      	movge	r6, r8
 8007d90:	2300      	movlt	r3, #0
 8007d92:	9b07      	ldrge	r3, [sp, #28]
 8007d94:	e730      	b.n	8007bf8 <_dtoa_r+0x730>
 8007d96:	4646      	mov	r6, r8
 8007d98:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007d9a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007d9c:	e735      	b.n	8007c0a <_dtoa_r+0x742>
 8007d9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007da0:	e75c      	b.n	8007c5c <_dtoa_r+0x794>
 8007da2:	2300      	movs	r3, #0
 8007da4:	e788      	b.n	8007cb8 <_dtoa_r+0x7f0>
 8007da6:	9b02      	ldr	r3, [sp, #8]
 8007da8:	e786      	b.n	8007cb8 <_dtoa_r+0x7f0>
 8007daa:	2300      	movs	r3, #0
 8007dac:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dae:	e788      	b.n	8007cc2 <_dtoa_r+0x7fa>
 8007db0:	d09f      	beq.n	8007cf2 <_dtoa_r+0x82a>
 8007db2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007db4:	331c      	adds	r3, #28
 8007db6:	441a      	add	r2, r3
 8007db8:	4498      	add	r8, r3
 8007dba:	441e      	add	r6, r3
 8007dbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dbe:	e798      	b.n	8007cf2 <_dtoa_r+0x82a>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	e7f6      	b.n	8007db2 <_dtoa_r+0x8ea>
 8007dc4:	9b07      	ldr	r3, [sp, #28]
 8007dc6:	9704      	str	r7, [sp, #16]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	dc20      	bgt.n	8007e0e <_dtoa_r+0x946>
 8007dcc:	9308      	str	r3, [sp, #32]
 8007dce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	dd1e      	ble.n	8007e12 <_dtoa_r+0x94a>
 8007dd4:	9b08      	ldr	r3, [sp, #32]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f47f aebc 	bne.w	8007b54 <_dtoa_r+0x68c>
 8007ddc:	4621      	mov	r1, r4
 8007dde:	2205      	movs	r2, #5
 8007de0:	4658      	mov	r0, fp
 8007de2:	f000 fc51 	bl	8008688 <__multadd>
 8007de6:	4601      	mov	r1, r0
 8007de8:	4604      	mov	r4, r0
 8007dea:	4648      	mov	r0, r9
 8007dec:	f000 fe62 	bl	8008ab4 <__mcmp>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	f77f aeaf 	ble.w	8007b54 <_dtoa_r+0x68c>
 8007df6:	2331      	movs	r3, #49	@ 0x31
 8007df8:	4656      	mov	r6, sl
 8007dfa:	f806 3b01 	strb.w	r3, [r6], #1
 8007dfe:	9b04      	ldr	r3, [sp, #16]
 8007e00:	3301      	adds	r3, #1
 8007e02:	9304      	str	r3, [sp, #16]
 8007e04:	e6aa      	b.n	8007b5c <_dtoa_r+0x694>
 8007e06:	9c07      	ldr	r4, [sp, #28]
 8007e08:	9704      	str	r7, [sp, #16]
 8007e0a:	4625      	mov	r5, r4
 8007e0c:	e7f3      	b.n	8007df6 <_dtoa_r+0x92e>
 8007e0e:	9b07      	ldr	r3, [sp, #28]
 8007e10:	9308      	str	r3, [sp, #32]
 8007e12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f000 8104 	beq.w	8008022 <_dtoa_r+0xb5a>
 8007e1a:	2e00      	cmp	r6, #0
 8007e1c:	dd05      	ble.n	8007e2a <_dtoa_r+0x962>
 8007e1e:	4629      	mov	r1, r5
 8007e20:	4632      	mov	r2, r6
 8007e22:	4658      	mov	r0, fp
 8007e24:	f000 fdda 	bl	80089dc <__lshift>
 8007e28:	4605      	mov	r5, r0
 8007e2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d05a      	beq.n	8007ee6 <_dtoa_r+0xa1e>
 8007e30:	4658      	mov	r0, fp
 8007e32:	6869      	ldr	r1, [r5, #4]
 8007e34:	f000 fbc6 	bl	80085c4 <_Balloc>
 8007e38:	4606      	mov	r6, r0
 8007e3a:	b928      	cbnz	r0, 8007e48 <_dtoa_r+0x980>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007e42:	4b83      	ldr	r3, [pc, #524]	@ (8008050 <_dtoa_r+0xb88>)
 8007e44:	f7ff bb54 	b.w	80074f0 <_dtoa_r+0x28>
 8007e48:	692a      	ldr	r2, [r5, #16]
 8007e4a:	f105 010c 	add.w	r1, r5, #12
 8007e4e:	3202      	adds	r2, #2
 8007e50:	0092      	lsls	r2, r2, #2
 8007e52:	300c      	adds	r0, #12
 8007e54:	f001 f818 	bl	8008e88 <memcpy>
 8007e58:	2201      	movs	r2, #1
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4658      	mov	r0, fp
 8007e5e:	f000 fdbd 	bl	80089dc <__lshift>
 8007e62:	462f      	mov	r7, r5
 8007e64:	4605      	mov	r5, r0
 8007e66:	f10a 0301 	add.w	r3, sl, #1
 8007e6a:	9307      	str	r3, [sp, #28]
 8007e6c:	9b08      	ldr	r3, [sp, #32]
 8007e6e:	4453      	add	r3, sl
 8007e70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e72:	9b02      	ldr	r3, [sp, #8]
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e7a:	9b07      	ldr	r3, [sp, #28]
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	4648      	mov	r0, r9
 8007e82:	9302      	str	r3, [sp, #8]
 8007e84:	f7ff fa95 	bl	80073b2 <quorem>
 8007e88:	4639      	mov	r1, r7
 8007e8a:	9008      	str	r0, [sp, #32]
 8007e8c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007e90:	4648      	mov	r0, r9
 8007e92:	f000 fe0f 	bl	8008ab4 <__mcmp>
 8007e96:	462a      	mov	r2, r5
 8007e98:	9009      	str	r0, [sp, #36]	@ 0x24
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	4658      	mov	r0, fp
 8007e9e:	f000 fe25 	bl	8008aec <__mdiff>
 8007ea2:	68c2      	ldr	r2, [r0, #12]
 8007ea4:	4606      	mov	r6, r0
 8007ea6:	bb02      	cbnz	r2, 8007eea <_dtoa_r+0xa22>
 8007ea8:	4601      	mov	r1, r0
 8007eaa:	4648      	mov	r0, r9
 8007eac:	f000 fe02 	bl	8008ab4 <__mcmp>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	4658      	mov	r0, fp
 8007eb6:	920c      	str	r2, [sp, #48]	@ 0x30
 8007eb8:	f000 fbc4 	bl	8008644 <_Bfree>
 8007ebc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007ebe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007ec0:	9e07      	ldr	r6, [sp, #28]
 8007ec2:	ea43 0102 	orr.w	r1, r3, r2
 8007ec6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ec8:	4319      	orrs	r1, r3
 8007eca:	d110      	bne.n	8007eee <_dtoa_r+0xa26>
 8007ecc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ed0:	d029      	beq.n	8007f26 <_dtoa_r+0xa5e>
 8007ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	dd02      	ble.n	8007ede <_dtoa_r+0xa16>
 8007ed8:	9b08      	ldr	r3, [sp, #32]
 8007eda:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007ede:	9b02      	ldr	r3, [sp, #8]
 8007ee0:	f883 8000 	strb.w	r8, [r3]
 8007ee4:	e63b      	b.n	8007b5e <_dtoa_r+0x696>
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	e7bb      	b.n	8007e62 <_dtoa_r+0x99a>
 8007eea:	2201      	movs	r2, #1
 8007eec:	e7e1      	b.n	8007eb2 <_dtoa_r+0x9ea>
 8007eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	db04      	blt.n	8007efe <_dtoa_r+0xa36>
 8007ef4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007ef6:	430b      	orrs	r3, r1
 8007ef8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007efa:	430b      	orrs	r3, r1
 8007efc:	d120      	bne.n	8007f40 <_dtoa_r+0xa78>
 8007efe:	2a00      	cmp	r2, #0
 8007f00:	dded      	ble.n	8007ede <_dtoa_r+0xa16>
 8007f02:	4649      	mov	r1, r9
 8007f04:	2201      	movs	r2, #1
 8007f06:	4658      	mov	r0, fp
 8007f08:	f000 fd68 	bl	80089dc <__lshift>
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	4681      	mov	r9, r0
 8007f10:	f000 fdd0 	bl	8008ab4 <__mcmp>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	dc03      	bgt.n	8007f20 <_dtoa_r+0xa58>
 8007f18:	d1e1      	bne.n	8007ede <_dtoa_r+0xa16>
 8007f1a:	f018 0f01 	tst.w	r8, #1
 8007f1e:	d0de      	beq.n	8007ede <_dtoa_r+0xa16>
 8007f20:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f24:	d1d8      	bne.n	8007ed8 <_dtoa_r+0xa10>
 8007f26:	2339      	movs	r3, #57	@ 0x39
 8007f28:	9a02      	ldr	r2, [sp, #8]
 8007f2a:	7013      	strb	r3, [r2, #0]
 8007f2c:	4633      	mov	r3, r6
 8007f2e:	461e      	mov	r6, r3
 8007f30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007f34:	3b01      	subs	r3, #1
 8007f36:	2a39      	cmp	r2, #57	@ 0x39
 8007f38:	d052      	beq.n	8007fe0 <_dtoa_r+0xb18>
 8007f3a:	3201      	adds	r2, #1
 8007f3c:	701a      	strb	r2, [r3, #0]
 8007f3e:	e60e      	b.n	8007b5e <_dtoa_r+0x696>
 8007f40:	2a00      	cmp	r2, #0
 8007f42:	dd07      	ble.n	8007f54 <_dtoa_r+0xa8c>
 8007f44:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f48:	d0ed      	beq.n	8007f26 <_dtoa_r+0xa5e>
 8007f4a:	9a02      	ldr	r2, [sp, #8]
 8007f4c:	f108 0301 	add.w	r3, r8, #1
 8007f50:	7013      	strb	r3, [r2, #0]
 8007f52:	e604      	b.n	8007b5e <_dtoa_r+0x696>
 8007f54:	9b07      	ldr	r3, [sp, #28]
 8007f56:	9a07      	ldr	r2, [sp, #28]
 8007f58:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007f5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d028      	beq.n	8007fb4 <_dtoa_r+0xaec>
 8007f62:	4649      	mov	r1, r9
 8007f64:	2300      	movs	r3, #0
 8007f66:	220a      	movs	r2, #10
 8007f68:	4658      	mov	r0, fp
 8007f6a:	f000 fb8d 	bl	8008688 <__multadd>
 8007f6e:	42af      	cmp	r7, r5
 8007f70:	4681      	mov	r9, r0
 8007f72:	f04f 0300 	mov.w	r3, #0
 8007f76:	f04f 020a 	mov.w	r2, #10
 8007f7a:	4639      	mov	r1, r7
 8007f7c:	4658      	mov	r0, fp
 8007f7e:	d107      	bne.n	8007f90 <_dtoa_r+0xac8>
 8007f80:	f000 fb82 	bl	8008688 <__multadd>
 8007f84:	4607      	mov	r7, r0
 8007f86:	4605      	mov	r5, r0
 8007f88:	9b07      	ldr	r3, [sp, #28]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	9307      	str	r3, [sp, #28]
 8007f8e:	e774      	b.n	8007e7a <_dtoa_r+0x9b2>
 8007f90:	f000 fb7a 	bl	8008688 <__multadd>
 8007f94:	4629      	mov	r1, r5
 8007f96:	4607      	mov	r7, r0
 8007f98:	2300      	movs	r3, #0
 8007f9a:	220a      	movs	r2, #10
 8007f9c:	4658      	mov	r0, fp
 8007f9e:	f000 fb73 	bl	8008688 <__multadd>
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	e7f0      	b.n	8007f88 <_dtoa_r+0xac0>
 8007fa6:	9b08      	ldr	r3, [sp, #32]
 8007fa8:	2700      	movs	r7, #0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	bfcc      	ite	gt
 8007fae:	461e      	movgt	r6, r3
 8007fb0:	2601      	movle	r6, #1
 8007fb2:	4456      	add	r6, sl
 8007fb4:	4649      	mov	r1, r9
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	4658      	mov	r0, fp
 8007fba:	f000 fd0f 	bl	80089dc <__lshift>
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	4681      	mov	r9, r0
 8007fc2:	f000 fd77 	bl	8008ab4 <__mcmp>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	dcb0      	bgt.n	8007f2c <_dtoa_r+0xa64>
 8007fca:	d102      	bne.n	8007fd2 <_dtoa_r+0xb0a>
 8007fcc:	f018 0f01 	tst.w	r8, #1
 8007fd0:	d1ac      	bne.n	8007f2c <_dtoa_r+0xa64>
 8007fd2:	4633      	mov	r3, r6
 8007fd4:	461e      	mov	r6, r3
 8007fd6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fda:	2a30      	cmp	r2, #48	@ 0x30
 8007fdc:	d0fa      	beq.n	8007fd4 <_dtoa_r+0xb0c>
 8007fde:	e5be      	b.n	8007b5e <_dtoa_r+0x696>
 8007fe0:	459a      	cmp	sl, r3
 8007fe2:	d1a4      	bne.n	8007f2e <_dtoa_r+0xa66>
 8007fe4:	9b04      	ldr	r3, [sp, #16]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	9304      	str	r3, [sp, #16]
 8007fea:	2331      	movs	r3, #49	@ 0x31
 8007fec:	f88a 3000 	strb.w	r3, [sl]
 8007ff0:	e5b5      	b.n	8007b5e <_dtoa_r+0x696>
 8007ff2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007ff4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008054 <_dtoa_r+0xb8c>
 8007ff8:	b11b      	cbz	r3, 8008002 <_dtoa_r+0xb3a>
 8007ffa:	f10a 0308 	add.w	r3, sl, #8
 8007ffe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008000:	6013      	str	r3, [r2, #0]
 8008002:	4650      	mov	r0, sl
 8008004:	b017      	add	sp, #92	@ 0x5c
 8008006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800800c:	2b01      	cmp	r3, #1
 800800e:	f77f ae3d 	ble.w	8007c8c <_dtoa_r+0x7c4>
 8008012:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008014:	930a      	str	r3, [sp, #40]	@ 0x28
 8008016:	2001      	movs	r0, #1
 8008018:	e65b      	b.n	8007cd2 <_dtoa_r+0x80a>
 800801a:	9b08      	ldr	r3, [sp, #32]
 800801c:	2b00      	cmp	r3, #0
 800801e:	f77f aed6 	ble.w	8007dce <_dtoa_r+0x906>
 8008022:	4656      	mov	r6, sl
 8008024:	4621      	mov	r1, r4
 8008026:	4648      	mov	r0, r9
 8008028:	f7ff f9c3 	bl	80073b2 <quorem>
 800802c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008030:	9b08      	ldr	r3, [sp, #32]
 8008032:	f806 8b01 	strb.w	r8, [r6], #1
 8008036:	eba6 020a 	sub.w	r2, r6, sl
 800803a:	4293      	cmp	r3, r2
 800803c:	ddb3      	ble.n	8007fa6 <_dtoa_r+0xade>
 800803e:	4649      	mov	r1, r9
 8008040:	2300      	movs	r3, #0
 8008042:	220a      	movs	r2, #10
 8008044:	4658      	mov	r0, fp
 8008046:	f000 fb1f 	bl	8008688 <__multadd>
 800804a:	4681      	mov	r9, r0
 800804c:	e7ea      	b.n	8008024 <_dtoa_r+0xb5c>
 800804e:	bf00      	nop
 8008050:	080097b8 	.word	0x080097b8
 8008054:	0800973c 	.word	0x0800973c

08008058 <__ssputs_r>:
 8008058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800805c:	461f      	mov	r7, r3
 800805e:	688e      	ldr	r6, [r1, #8]
 8008060:	4682      	mov	sl, r0
 8008062:	42be      	cmp	r6, r7
 8008064:	460c      	mov	r4, r1
 8008066:	4690      	mov	r8, r2
 8008068:	680b      	ldr	r3, [r1, #0]
 800806a:	d82d      	bhi.n	80080c8 <__ssputs_r+0x70>
 800806c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008070:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008074:	d026      	beq.n	80080c4 <__ssputs_r+0x6c>
 8008076:	6965      	ldr	r5, [r4, #20]
 8008078:	6909      	ldr	r1, [r1, #16]
 800807a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800807e:	eba3 0901 	sub.w	r9, r3, r1
 8008082:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008086:	1c7b      	adds	r3, r7, #1
 8008088:	444b      	add	r3, r9
 800808a:	106d      	asrs	r5, r5, #1
 800808c:	429d      	cmp	r5, r3
 800808e:	bf38      	it	cc
 8008090:	461d      	movcc	r5, r3
 8008092:	0553      	lsls	r3, r2, #21
 8008094:	d527      	bpl.n	80080e6 <__ssputs_r+0x8e>
 8008096:	4629      	mov	r1, r5
 8008098:	f000 f960 	bl	800835c <_malloc_r>
 800809c:	4606      	mov	r6, r0
 800809e:	b360      	cbz	r0, 80080fa <__ssputs_r+0xa2>
 80080a0:	464a      	mov	r2, r9
 80080a2:	6921      	ldr	r1, [r4, #16]
 80080a4:	f000 fef0 	bl	8008e88 <memcpy>
 80080a8:	89a3      	ldrh	r3, [r4, #12]
 80080aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80080ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080b2:	81a3      	strh	r3, [r4, #12]
 80080b4:	6126      	str	r6, [r4, #16]
 80080b6:	444e      	add	r6, r9
 80080b8:	6026      	str	r6, [r4, #0]
 80080ba:	463e      	mov	r6, r7
 80080bc:	6165      	str	r5, [r4, #20]
 80080be:	eba5 0509 	sub.w	r5, r5, r9
 80080c2:	60a5      	str	r5, [r4, #8]
 80080c4:	42be      	cmp	r6, r7
 80080c6:	d900      	bls.n	80080ca <__ssputs_r+0x72>
 80080c8:	463e      	mov	r6, r7
 80080ca:	4632      	mov	r2, r6
 80080cc:	4641      	mov	r1, r8
 80080ce:	6820      	ldr	r0, [r4, #0]
 80080d0:	f000 fe69 	bl	8008da6 <memmove>
 80080d4:	2000      	movs	r0, #0
 80080d6:	68a3      	ldr	r3, [r4, #8]
 80080d8:	1b9b      	subs	r3, r3, r6
 80080da:	60a3      	str	r3, [r4, #8]
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	4433      	add	r3, r6
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e6:	462a      	mov	r2, r5
 80080e8:	f000 fe2f 	bl	8008d4a <_realloc_r>
 80080ec:	4606      	mov	r6, r0
 80080ee:	2800      	cmp	r0, #0
 80080f0:	d1e0      	bne.n	80080b4 <__ssputs_r+0x5c>
 80080f2:	4650      	mov	r0, sl
 80080f4:	6921      	ldr	r1, [r4, #16]
 80080f6:	f000 ff07 	bl	8008f08 <_free_r>
 80080fa:	230c      	movs	r3, #12
 80080fc:	f8ca 3000 	str.w	r3, [sl]
 8008100:	89a3      	ldrh	r3, [r4, #12]
 8008102:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800810a:	81a3      	strh	r3, [r4, #12]
 800810c:	e7e9      	b.n	80080e2 <__ssputs_r+0x8a>
	...

08008110 <_svfiprintf_r>:
 8008110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008114:	4698      	mov	r8, r3
 8008116:	898b      	ldrh	r3, [r1, #12]
 8008118:	4607      	mov	r7, r0
 800811a:	061b      	lsls	r3, r3, #24
 800811c:	460d      	mov	r5, r1
 800811e:	4614      	mov	r4, r2
 8008120:	b09d      	sub	sp, #116	@ 0x74
 8008122:	d510      	bpl.n	8008146 <_svfiprintf_r+0x36>
 8008124:	690b      	ldr	r3, [r1, #16]
 8008126:	b973      	cbnz	r3, 8008146 <_svfiprintf_r+0x36>
 8008128:	2140      	movs	r1, #64	@ 0x40
 800812a:	f000 f917 	bl	800835c <_malloc_r>
 800812e:	6028      	str	r0, [r5, #0]
 8008130:	6128      	str	r0, [r5, #16]
 8008132:	b930      	cbnz	r0, 8008142 <_svfiprintf_r+0x32>
 8008134:	230c      	movs	r3, #12
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800813c:	b01d      	add	sp, #116	@ 0x74
 800813e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008142:	2340      	movs	r3, #64	@ 0x40
 8008144:	616b      	str	r3, [r5, #20]
 8008146:	2300      	movs	r3, #0
 8008148:	9309      	str	r3, [sp, #36]	@ 0x24
 800814a:	2320      	movs	r3, #32
 800814c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008150:	2330      	movs	r3, #48	@ 0x30
 8008152:	f04f 0901 	mov.w	r9, #1
 8008156:	f8cd 800c 	str.w	r8, [sp, #12]
 800815a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80082f4 <_svfiprintf_r+0x1e4>
 800815e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008162:	4623      	mov	r3, r4
 8008164:	469a      	mov	sl, r3
 8008166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800816a:	b10a      	cbz	r2, 8008170 <_svfiprintf_r+0x60>
 800816c:	2a25      	cmp	r2, #37	@ 0x25
 800816e:	d1f9      	bne.n	8008164 <_svfiprintf_r+0x54>
 8008170:	ebba 0b04 	subs.w	fp, sl, r4
 8008174:	d00b      	beq.n	800818e <_svfiprintf_r+0x7e>
 8008176:	465b      	mov	r3, fp
 8008178:	4622      	mov	r2, r4
 800817a:	4629      	mov	r1, r5
 800817c:	4638      	mov	r0, r7
 800817e:	f7ff ff6b 	bl	8008058 <__ssputs_r>
 8008182:	3001      	adds	r0, #1
 8008184:	f000 80a7 	beq.w	80082d6 <_svfiprintf_r+0x1c6>
 8008188:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800818a:	445a      	add	r2, fp
 800818c:	9209      	str	r2, [sp, #36]	@ 0x24
 800818e:	f89a 3000 	ldrb.w	r3, [sl]
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 809f 	beq.w	80082d6 <_svfiprintf_r+0x1c6>
 8008198:	2300      	movs	r3, #0
 800819a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800819e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081a2:	f10a 0a01 	add.w	sl, sl, #1
 80081a6:	9304      	str	r3, [sp, #16]
 80081a8:	9307      	str	r3, [sp, #28]
 80081aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80081b0:	4654      	mov	r4, sl
 80081b2:	2205      	movs	r2, #5
 80081b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b8:	484e      	ldr	r0, [pc, #312]	@ (80082f4 <_svfiprintf_r+0x1e4>)
 80081ba:	f7ff f8ec 	bl	8007396 <memchr>
 80081be:	9a04      	ldr	r2, [sp, #16]
 80081c0:	b9d8      	cbnz	r0, 80081fa <_svfiprintf_r+0xea>
 80081c2:	06d0      	lsls	r0, r2, #27
 80081c4:	bf44      	itt	mi
 80081c6:	2320      	movmi	r3, #32
 80081c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081cc:	0711      	lsls	r1, r2, #28
 80081ce:	bf44      	itt	mi
 80081d0:	232b      	movmi	r3, #43	@ 0x2b
 80081d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081d6:	f89a 3000 	ldrb.w	r3, [sl]
 80081da:	2b2a      	cmp	r3, #42	@ 0x2a
 80081dc:	d015      	beq.n	800820a <_svfiprintf_r+0xfa>
 80081de:	4654      	mov	r4, sl
 80081e0:	2000      	movs	r0, #0
 80081e2:	f04f 0c0a 	mov.w	ip, #10
 80081e6:	9a07      	ldr	r2, [sp, #28]
 80081e8:	4621      	mov	r1, r4
 80081ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081ee:	3b30      	subs	r3, #48	@ 0x30
 80081f0:	2b09      	cmp	r3, #9
 80081f2:	d94b      	bls.n	800828c <_svfiprintf_r+0x17c>
 80081f4:	b1b0      	cbz	r0, 8008224 <_svfiprintf_r+0x114>
 80081f6:	9207      	str	r2, [sp, #28]
 80081f8:	e014      	b.n	8008224 <_svfiprintf_r+0x114>
 80081fa:	eba0 0308 	sub.w	r3, r0, r8
 80081fe:	fa09 f303 	lsl.w	r3, r9, r3
 8008202:	4313      	orrs	r3, r2
 8008204:	46a2      	mov	sl, r4
 8008206:	9304      	str	r3, [sp, #16]
 8008208:	e7d2      	b.n	80081b0 <_svfiprintf_r+0xa0>
 800820a:	9b03      	ldr	r3, [sp, #12]
 800820c:	1d19      	adds	r1, r3, #4
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	9103      	str	r1, [sp, #12]
 8008212:	2b00      	cmp	r3, #0
 8008214:	bfbb      	ittet	lt
 8008216:	425b      	neglt	r3, r3
 8008218:	f042 0202 	orrlt.w	r2, r2, #2
 800821c:	9307      	strge	r3, [sp, #28]
 800821e:	9307      	strlt	r3, [sp, #28]
 8008220:	bfb8      	it	lt
 8008222:	9204      	strlt	r2, [sp, #16]
 8008224:	7823      	ldrb	r3, [r4, #0]
 8008226:	2b2e      	cmp	r3, #46	@ 0x2e
 8008228:	d10a      	bne.n	8008240 <_svfiprintf_r+0x130>
 800822a:	7863      	ldrb	r3, [r4, #1]
 800822c:	2b2a      	cmp	r3, #42	@ 0x2a
 800822e:	d132      	bne.n	8008296 <_svfiprintf_r+0x186>
 8008230:	9b03      	ldr	r3, [sp, #12]
 8008232:	3402      	adds	r4, #2
 8008234:	1d1a      	adds	r2, r3, #4
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	9203      	str	r2, [sp, #12]
 800823a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800823e:	9305      	str	r3, [sp, #20]
 8008240:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80082f8 <_svfiprintf_r+0x1e8>
 8008244:	2203      	movs	r2, #3
 8008246:	4650      	mov	r0, sl
 8008248:	7821      	ldrb	r1, [r4, #0]
 800824a:	f7ff f8a4 	bl	8007396 <memchr>
 800824e:	b138      	cbz	r0, 8008260 <_svfiprintf_r+0x150>
 8008250:	2240      	movs	r2, #64	@ 0x40
 8008252:	9b04      	ldr	r3, [sp, #16]
 8008254:	eba0 000a 	sub.w	r0, r0, sl
 8008258:	4082      	lsls	r2, r0
 800825a:	4313      	orrs	r3, r2
 800825c:	3401      	adds	r4, #1
 800825e:	9304      	str	r3, [sp, #16]
 8008260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008264:	2206      	movs	r2, #6
 8008266:	4825      	ldr	r0, [pc, #148]	@ (80082fc <_svfiprintf_r+0x1ec>)
 8008268:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800826c:	f7ff f893 	bl	8007396 <memchr>
 8008270:	2800      	cmp	r0, #0
 8008272:	d036      	beq.n	80082e2 <_svfiprintf_r+0x1d2>
 8008274:	4b22      	ldr	r3, [pc, #136]	@ (8008300 <_svfiprintf_r+0x1f0>)
 8008276:	bb1b      	cbnz	r3, 80082c0 <_svfiprintf_r+0x1b0>
 8008278:	9b03      	ldr	r3, [sp, #12]
 800827a:	3307      	adds	r3, #7
 800827c:	f023 0307 	bic.w	r3, r3, #7
 8008280:	3308      	adds	r3, #8
 8008282:	9303      	str	r3, [sp, #12]
 8008284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008286:	4433      	add	r3, r6
 8008288:	9309      	str	r3, [sp, #36]	@ 0x24
 800828a:	e76a      	b.n	8008162 <_svfiprintf_r+0x52>
 800828c:	460c      	mov	r4, r1
 800828e:	2001      	movs	r0, #1
 8008290:	fb0c 3202 	mla	r2, ip, r2, r3
 8008294:	e7a8      	b.n	80081e8 <_svfiprintf_r+0xd8>
 8008296:	2300      	movs	r3, #0
 8008298:	f04f 0c0a 	mov.w	ip, #10
 800829c:	4619      	mov	r1, r3
 800829e:	3401      	adds	r4, #1
 80082a0:	9305      	str	r3, [sp, #20]
 80082a2:	4620      	mov	r0, r4
 80082a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082a8:	3a30      	subs	r2, #48	@ 0x30
 80082aa:	2a09      	cmp	r2, #9
 80082ac:	d903      	bls.n	80082b6 <_svfiprintf_r+0x1a6>
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d0c6      	beq.n	8008240 <_svfiprintf_r+0x130>
 80082b2:	9105      	str	r1, [sp, #20]
 80082b4:	e7c4      	b.n	8008240 <_svfiprintf_r+0x130>
 80082b6:	4604      	mov	r4, r0
 80082b8:	2301      	movs	r3, #1
 80082ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80082be:	e7f0      	b.n	80082a2 <_svfiprintf_r+0x192>
 80082c0:	ab03      	add	r3, sp, #12
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	462a      	mov	r2, r5
 80082c6:	4638      	mov	r0, r7
 80082c8:	4b0e      	ldr	r3, [pc, #56]	@ (8008304 <_svfiprintf_r+0x1f4>)
 80082ca:	a904      	add	r1, sp, #16
 80082cc:	f7fe fb76 	bl	80069bc <_printf_float>
 80082d0:	1c42      	adds	r2, r0, #1
 80082d2:	4606      	mov	r6, r0
 80082d4:	d1d6      	bne.n	8008284 <_svfiprintf_r+0x174>
 80082d6:	89ab      	ldrh	r3, [r5, #12]
 80082d8:	065b      	lsls	r3, r3, #25
 80082da:	f53f af2d 	bmi.w	8008138 <_svfiprintf_r+0x28>
 80082de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082e0:	e72c      	b.n	800813c <_svfiprintf_r+0x2c>
 80082e2:	ab03      	add	r3, sp, #12
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	462a      	mov	r2, r5
 80082e8:	4638      	mov	r0, r7
 80082ea:	4b06      	ldr	r3, [pc, #24]	@ (8008304 <_svfiprintf_r+0x1f4>)
 80082ec:	a904      	add	r1, sp, #16
 80082ee:	f7fe fe03 	bl	8006ef8 <_printf_i>
 80082f2:	e7ed      	b.n	80082d0 <_svfiprintf_r+0x1c0>
 80082f4:	080097c9 	.word	0x080097c9
 80082f8:	080097cf 	.word	0x080097cf
 80082fc:	080097d3 	.word	0x080097d3
 8008300:	080069bd 	.word	0x080069bd
 8008304:	08008059 	.word	0x08008059

08008308 <malloc>:
 8008308:	4b02      	ldr	r3, [pc, #8]	@ (8008314 <malloc+0xc>)
 800830a:	4601      	mov	r1, r0
 800830c:	6818      	ldr	r0, [r3, #0]
 800830e:	f000 b825 	b.w	800835c <_malloc_r>
 8008312:	bf00      	nop
 8008314:	20000018 	.word	0x20000018

08008318 <sbrk_aligned>:
 8008318:	b570      	push	{r4, r5, r6, lr}
 800831a:	4e0f      	ldr	r6, [pc, #60]	@ (8008358 <sbrk_aligned+0x40>)
 800831c:	460c      	mov	r4, r1
 800831e:	6831      	ldr	r1, [r6, #0]
 8008320:	4605      	mov	r5, r0
 8008322:	b911      	cbnz	r1, 800832a <sbrk_aligned+0x12>
 8008324:	f000 fd8e 	bl	8008e44 <_sbrk_r>
 8008328:	6030      	str	r0, [r6, #0]
 800832a:	4621      	mov	r1, r4
 800832c:	4628      	mov	r0, r5
 800832e:	f000 fd89 	bl	8008e44 <_sbrk_r>
 8008332:	1c43      	adds	r3, r0, #1
 8008334:	d103      	bne.n	800833e <sbrk_aligned+0x26>
 8008336:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800833a:	4620      	mov	r0, r4
 800833c:	bd70      	pop	{r4, r5, r6, pc}
 800833e:	1cc4      	adds	r4, r0, #3
 8008340:	f024 0403 	bic.w	r4, r4, #3
 8008344:	42a0      	cmp	r0, r4
 8008346:	d0f8      	beq.n	800833a <sbrk_aligned+0x22>
 8008348:	1a21      	subs	r1, r4, r0
 800834a:	4628      	mov	r0, r5
 800834c:	f000 fd7a 	bl	8008e44 <_sbrk_r>
 8008350:	3001      	adds	r0, #1
 8008352:	d1f2      	bne.n	800833a <sbrk_aligned+0x22>
 8008354:	e7ef      	b.n	8008336 <sbrk_aligned+0x1e>
 8008356:	bf00      	nop
 8008358:	200006ac 	.word	0x200006ac

0800835c <_malloc_r>:
 800835c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008360:	1ccd      	adds	r5, r1, #3
 8008362:	f025 0503 	bic.w	r5, r5, #3
 8008366:	3508      	adds	r5, #8
 8008368:	2d0c      	cmp	r5, #12
 800836a:	bf38      	it	cc
 800836c:	250c      	movcc	r5, #12
 800836e:	2d00      	cmp	r5, #0
 8008370:	4606      	mov	r6, r0
 8008372:	db01      	blt.n	8008378 <_malloc_r+0x1c>
 8008374:	42a9      	cmp	r1, r5
 8008376:	d904      	bls.n	8008382 <_malloc_r+0x26>
 8008378:	230c      	movs	r3, #12
 800837a:	6033      	str	r3, [r6, #0]
 800837c:	2000      	movs	r0, #0
 800837e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008382:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008458 <_malloc_r+0xfc>
 8008386:	f000 f911 	bl	80085ac <__malloc_lock>
 800838a:	f8d8 3000 	ldr.w	r3, [r8]
 800838e:	461c      	mov	r4, r3
 8008390:	bb44      	cbnz	r4, 80083e4 <_malloc_r+0x88>
 8008392:	4629      	mov	r1, r5
 8008394:	4630      	mov	r0, r6
 8008396:	f7ff ffbf 	bl	8008318 <sbrk_aligned>
 800839a:	1c43      	adds	r3, r0, #1
 800839c:	4604      	mov	r4, r0
 800839e:	d158      	bne.n	8008452 <_malloc_r+0xf6>
 80083a0:	f8d8 4000 	ldr.w	r4, [r8]
 80083a4:	4627      	mov	r7, r4
 80083a6:	2f00      	cmp	r7, #0
 80083a8:	d143      	bne.n	8008432 <_malloc_r+0xd6>
 80083aa:	2c00      	cmp	r4, #0
 80083ac:	d04b      	beq.n	8008446 <_malloc_r+0xea>
 80083ae:	6823      	ldr	r3, [r4, #0]
 80083b0:	4639      	mov	r1, r7
 80083b2:	4630      	mov	r0, r6
 80083b4:	eb04 0903 	add.w	r9, r4, r3
 80083b8:	f000 fd44 	bl	8008e44 <_sbrk_r>
 80083bc:	4581      	cmp	r9, r0
 80083be:	d142      	bne.n	8008446 <_malloc_r+0xea>
 80083c0:	6821      	ldr	r1, [r4, #0]
 80083c2:	4630      	mov	r0, r6
 80083c4:	1a6d      	subs	r5, r5, r1
 80083c6:	4629      	mov	r1, r5
 80083c8:	f7ff ffa6 	bl	8008318 <sbrk_aligned>
 80083cc:	3001      	adds	r0, #1
 80083ce:	d03a      	beq.n	8008446 <_malloc_r+0xea>
 80083d0:	6823      	ldr	r3, [r4, #0]
 80083d2:	442b      	add	r3, r5
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	f8d8 3000 	ldr.w	r3, [r8]
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	bb62      	cbnz	r2, 8008438 <_malloc_r+0xdc>
 80083de:	f8c8 7000 	str.w	r7, [r8]
 80083e2:	e00f      	b.n	8008404 <_malloc_r+0xa8>
 80083e4:	6822      	ldr	r2, [r4, #0]
 80083e6:	1b52      	subs	r2, r2, r5
 80083e8:	d420      	bmi.n	800842c <_malloc_r+0xd0>
 80083ea:	2a0b      	cmp	r2, #11
 80083ec:	d917      	bls.n	800841e <_malloc_r+0xc2>
 80083ee:	1961      	adds	r1, r4, r5
 80083f0:	42a3      	cmp	r3, r4
 80083f2:	6025      	str	r5, [r4, #0]
 80083f4:	bf18      	it	ne
 80083f6:	6059      	strne	r1, [r3, #4]
 80083f8:	6863      	ldr	r3, [r4, #4]
 80083fa:	bf08      	it	eq
 80083fc:	f8c8 1000 	streq.w	r1, [r8]
 8008400:	5162      	str	r2, [r4, r5]
 8008402:	604b      	str	r3, [r1, #4]
 8008404:	4630      	mov	r0, r6
 8008406:	f000 f8d7 	bl	80085b8 <__malloc_unlock>
 800840a:	f104 000b 	add.w	r0, r4, #11
 800840e:	1d23      	adds	r3, r4, #4
 8008410:	f020 0007 	bic.w	r0, r0, #7
 8008414:	1ac2      	subs	r2, r0, r3
 8008416:	bf1c      	itt	ne
 8008418:	1a1b      	subne	r3, r3, r0
 800841a:	50a3      	strne	r3, [r4, r2]
 800841c:	e7af      	b.n	800837e <_malloc_r+0x22>
 800841e:	6862      	ldr	r2, [r4, #4]
 8008420:	42a3      	cmp	r3, r4
 8008422:	bf0c      	ite	eq
 8008424:	f8c8 2000 	streq.w	r2, [r8]
 8008428:	605a      	strne	r2, [r3, #4]
 800842a:	e7eb      	b.n	8008404 <_malloc_r+0xa8>
 800842c:	4623      	mov	r3, r4
 800842e:	6864      	ldr	r4, [r4, #4]
 8008430:	e7ae      	b.n	8008390 <_malloc_r+0x34>
 8008432:	463c      	mov	r4, r7
 8008434:	687f      	ldr	r7, [r7, #4]
 8008436:	e7b6      	b.n	80083a6 <_malloc_r+0x4a>
 8008438:	461a      	mov	r2, r3
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	42a3      	cmp	r3, r4
 800843e:	d1fb      	bne.n	8008438 <_malloc_r+0xdc>
 8008440:	2300      	movs	r3, #0
 8008442:	6053      	str	r3, [r2, #4]
 8008444:	e7de      	b.n	8008404 <_malloc_r+0xa8>
 8008446:	230c      	movs	r3, #12
 8008448:	4630      	mov	r0, r6
 800844a:	6033      	str	r3, [r6, #0]
 800844c:	f000 f8b4 	bl	80085b8 <__malloc_unlock>
 8008450:	e794      	b.n	800837c <_malloc_r+0x20>
 8008452:	6005      	str	r5, [r0, #0]
 8008454:	e7d6      	b.n	8008404 <_malloc_r+0xa8>
 8008456:	bf00      	nop
 8008458:	200006b0 	.word	0x200006b0

0800845c <__sflush_r>:
 800845c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	0716      	lsls	r6, r2, #28
 8008464:	4605      	mov	r5, r0
 8008466:	460c      	mov	r4, r1
 8008468:	d454      	bmi.n	8008514 <__sflush_r+0xb8>
 800846a:	684b      	ldr	r3, [r1, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	dc02      	bgt.n	8008476 <__sflush_r+0x1a>
 8008470:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008472:	2b00      	cmp	r3, #0
 8008474:	dd48      	ble.n	8008508 <__sflush_r+0xac>
 8008476:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008478:	2e00      	cmp	r6, #0
 800847a:	d045      	beq.n	8008508 <__sflush_r+0xac>
 800847c:	2300      	movs	r3, #0
 800847e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008482:	682f      	ldr	r7, [r5, #0]
 8008484:	6a21      	ldr	r1, [r4, #32]
 8008486:	602b      	str	r3, [r5, #0]
 8008488:	d030      	beq.n	80084ec <__sflush_r+0x90>
 800848a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	0759      	lsls	r1, r3, #29
 8008490:	d505      	bpl.n	800849e <__sflush_r+0x42>
 8008492:	6863      	ldr	r3, [r4, #4]
 8008494:	1ad2      	subs	r2, r2, r3
 8008496:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008498:	b10b      	cbz	r3, 800849e <__sflush_r+0x42>
 800849a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800849c:	1ad2      	subs	r2, r2, r3
 800849e:	2300      	movs	r3, #0
 80084a0:	4628      	mov	r0, r5
 80084a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084a4:	6a21      	ldr	r1, [r4, #32]
 80084a6:	47b0      	blx	r6
 80084a8:	1c43      	adds	r3, r0, #1
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	d106      	bne.n	80084bc <__sflush_r+0x60>
 80084ae:	6829      	ldr	r1, [r5, #0]
 80084b0:	291d      	cmp	r1, #29
 80084b2:	d82b      	bhi.n	800850c <__sflush_r+0xb0>
 80084b4:	4a28      	ldr	r2, [pc, #160]	@ (8008558 <__sflush_r+0xfc>)
 80084b6:	410a      	asrs	r2, r1
 80084b8:	07d6      	lsls	r6, r2, #31
 80084ba:	d427      	bmi.n	800850c <__sflush_r+0xb0>
 80084bc:	2200      	movs	r2, #0
 80084be:	6062      	str	r2, [r4, #4]
 80084c0:	6922      	ldr	r2, [r4, #16]
 80084c2:	04d9      	lsls	r1, r3, #19
 80084c4:	6022      	str	r2, [r4, #0]
 80084c6:	d504      	bpl.n	80084d2 <__sflush_r+0x76>
 80084c8:	1c42      	adds	r2, r0, #1
 80084ca:	d101      	bne.n	80084d0 <__sflush_r+0x74>
 80084cc:	682b      	ldr	r3, [r5, #0]
 80084ce:	b903      	cbnz	r3, 80084d2 <__sflush_r+0x76>
 80084d0:	6560      	str	r0, [r4, #84]	@ 0x54
 80084d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084d4:	602f      	str	r7, [r5, #0]
 80084d6:	b1b9      	cbz	r1, 8008508 <__sflush_r+0xac>
 80084d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084dc:	4299      	cmp	r1, r3
 80084de:	d002      	beq.n	80084e6 <__sflush_r+0x8a>
 80084e0:	4628      	mov	r0, r5
 80084e2:	f000 fd11 	bl	8008f08 <_free_r>
 80084e6:	2300      	movs	r3, #0
 80084e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80084ea:	e00d      	b.n	8008508 <__sflush_r+0xac>
 80084ec:	2301      	movs	r3, #1
 80084ee:	4628      	mov	r0, r5
 80084f0:	47b0      	blx	r6
 80084f2:	4602      	mov	r2, r0
 80084f4:	1c50      	adds	r0, r2, #1
 80084f6:	d1c9      	bne.n	800848c <__sflush_r+0x30>
 80084f8:	682b      	ldr	r3, [r5, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d0c6      	beq.n	800848c <__sflush_r+0x30>
 80084fe:	2b1d      	cmp	r3, #29
 8008500:	d001      	beq.n	8008506 <__sflush_r+0xaa>
 8008502:	2b16      	cmp	r3, #22
 8008504:	d11d      	bne.n	8008542 <__sflush_r+0xe6>
 8008506:	602f      	str	r7, [r5, #0]
 8008508:	2000      	movs	r0, #0
 800850a:	e021      	b.n	8008550 <__sflush_r+0xf4>
 800850c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008510:	b21b      	sxth	r3, r3
 8008512:	e01a      	b.n	800854a <__sflush_r+0xee>
 8008514:	690f      	ldr	r7, [r1, #16]
 8008516:	2f00      	cmp	r7, #0
 8008518:	d0f6      	beq.n	8008508 <__sflush_r+0xac>
 800851a:	0793      	lsls	r3, r2, #30
 800851c:	bf18      	it	ne
 800851e:	2300      	movne	r3, #0
 8008520:	680e      	ldr	r6, [r1, #0]
 8008522:	bf08      	it	eq
 8008524:	694b      	ldreq	r3, [r1, #20]
 8008526:	1bf6      	subs	r6, r6, r7
 8008528:	600f      	str	r7, [r1, #0]
 800852a:	608b      	str	r3, [r1, #8]
 800852c:	2e00      	cmp	r6, #0
 800852e:	ddeb      	ble.n	8008508 <__sflush_r+0xac>
 8008530:	4633      	mov	r3, r6
 8008532:	463a      	mov	r2, r7
 8008534:	4628      	mov	r0, r5
 8008536:	6a21      	ldr	r1, [r4, #32]
 8008538:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800853c:	47e0      	blx	ip
 800853e:	2800      	cmp	r0, #0
 8008540:	dc07      	bgt.n	8008552 <__sflush_r+0xf6>
 8008542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800854a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800854e:	81a3      	strh	r3, [r4, #12]
 8008550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008552:	4407      	add	r7, r0
 8008554:	1a36      	subs	r6, r6, r0
 8008556:	e7e9      	b.n	800852c <__sflush_r+0xd0>
 8008558:	dfbffffe 	.word	0xdfbffffe

0800855c <_fflush_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	690b      	ldr	r3, [r1, #16]
 8008560:	4605      	mov	r5, r0
 8008562:	460c      	mov	r4, r1
 8008564:	b913      	cbnz	r3, 800856c <_fflush_r+0x10>
 8008566:	2500      	movs	r5, #0
 8008568:	4628      	mov	r0, r5
 800856a:	bd38      	pop	{r3, r4, r5, pc}
 800856c:	b118      	cbz	r0, 8008576 <_fflush_r+0x1a>
 800856e:	6a03      	ldr	r3, [r0, #32]
 8008570:	b90b      	cbnz	r3, 8008576 <_fflush_r+0x1a>
 8008572:	f7fe fe8d 	bl	8007290 <__sinit>
 8008576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0f3      	beq.n	8008566 <_fflush_r+0xa>
 800857e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008580:	07d0      	lsls	r0, r2, #31
 8008582:	d404      	bmi.n	800858e <_fflush_r+0x32>
 8008584:	0599      	lsls	r1, r3, #22
 8008586:	d402      	bmi.n	800858e <_fflush_r+0x32>
 8008588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800858a:	f7fe ff02 	bl	8007392 <__retarget_lock_acquire_recursive>
 800858e:	4628      	mov	r0, r5
 8008590:	4621      	mov	r1, r4
 8008592:	f7ff ff63 	bl	800845c <__sflush_r>
 8008596:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008598:	4605      	mov	r5, r0
 800859a:	07da      	lsls	r2, r3, #31
 800859c:	d4e4      	bmi.n	8008568 <_fflush_r+0xc>
 800859e:	89a3      	ldrh	r3, [r4, #12]
 80085a0:	059b      	lsls	r3, r3, #22
 80085a2:	d4e1      	bmi.n	8008568 <_fflush_r+0xc>
 80085a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085a6:	f7fe fef5 	bl	8007394 <__retarget_lock_release_recursive>
 80085aa:	e7dd      	b.n	8008568 <_fflush_r+0xc>

080085ac <__malloc_lock>:
 80085ac:	4801      	ldr	r0, [pc, #4]	@ (80085b4 <__malloc_lock+0x8>)
 80085ae:	f7fe bef0 	b.w	8007392 <__retarget_lock_acquire_recursive>
 80085b2:	bf00      	nop
 80085b4:	200006a8 	.word	0x200006a8

080085b8 <__malloc_unlock>:
 80085b8:	4801      	ldr	r0, [pc, #4]	@ (80085c0 <__malloc_unlock+0x8>)
 80085ba:	f7fe beeb 	b.w	8007394 <__retarget_lock_release_recursive>
 80085be:	bf00      	nop
 80085c0:	200006a8 	.word	0x200006a8

080085c4 <_Balloc>:
 80085c4:	b570      	push	{r4, r5, r6, lr}
 80085c6:	69c6      	ldr	r6, [r0, #28]
 80085c8:	4604      	mov	r4, r0
 80085ca:	460d      	mov	r5, r1
 80085cc:	b976      	cbnz	r6, 80085ec <_Balloc+0x28>
 80085ce:	2010      	movs	r0, #16
 80085d0:	f7ff fe9a 	bl	8008308 <malloc>
 80085d4:	4602      	mov	r2, r0
 80085d6:	61e0      	str	r0, [r4, #28]
 80085d8:	b920      	cbnz	r0, 80085e4 <_Balloc+0x20>
 80085da:	216b      	movs	r1, #107	@ 0x6b
 80085dc:	4b17      	ldr	r3, [pc, #92]	@ (800863c <_Balloc+0x78>)
 80085de:	4818      	ldr	r0, [pc, #96]	@ (8008640 <_Balloc+0x7c>)
 80085e0:	f000 fc60 	bl	8008ea4 <__assert_func>
 80085e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085e8:	6006      	str	r6, [r0, #0]
 80085ea:	60c6      	str	r6, [r0, #12]
 80085ec:	69e6      	ldr	r6, [r4, #28]
 80085ee:	68f3      	ldr	r3, [r6, #12]
 80085f0:	b183      	cbz	r3, 8008614 <_Balloc+0x50>
 80085f2:	69e3      	ldr	r3, [r4, #28]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085fa:	b9b8      	cbnz	r0, 800862c <_Balloc+0x68>
 80085fc:	2101      	movs	r1, #1
 80085fe:	fa01 f605 	lsl.w	r6, r1, r5
 8008602:	1d72      	adds	r2, r6, #5
 8008604:	4620      	mov	r0, r4
 8008606:	0092      	lsls	r2, r2, #2
 8008608:	f000 fc6a 	bl	8008ee0 <_calloc_r>
 800860c:	b160      	cbz	r0, 8008628 <_Balloc+0x64>
 800860e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008612:	e00e      	b.n	8008632 <_Balloc+0x6e>
 8008614:	2221      	movs	r2, #33	@ 0x21
 8008616:	2104      	movs	r1, #4
 8008618:	4620      	mov	r0, r4
 800861a:	f000 fc61 	bl	8008ee0 <_calloc_r>
 800861e:	69e3      	ldr	r3, [r4, #28]
 8008620:	60f0      	str	r0, [r6, #12]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1e4      	bne.n	80085f2 <_Balloc+0x2e>
 8008628:	2000      	movs	r0, #0
 800862a:	bd70      	pop	{r4, r5, r6, pc}
 800862c:	6802      	ldr	r2, [r0, #0]
 800862e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008632:	2300      	movs	r3, #0
 8008634:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008638:	e7f7      	b.n	800862a <_Balloc+0x66>
 800863a:	bf00      	nop
 800863c:	08009749 	.word	0x08009749
 8008640:	080097da 	.word	0x080097da

08008644 <_Bfree>:
 8008644:	b570      	push	{r4, r5, r6, lr}
 8008646:	69c6      	ldr	r6, [r0, #28]
 8008648:	4605      	mov	r5, r0
 800864a:	460c      	mov	r4, r1
 800864c:	b976      	cbnz	r6, 800866c <_Bfree+0x28>
 800864e:	2010      	movs	r0, #16
 8008650:	f7ff fe5a 	bl	8008308 <malloc>
 8008654:	4602      	mov	r2, r0
 8008656:	61e8      	str	r0, [r5, #28]
 8008658:	b920      	cbnz	r0, 8008664 <_Bfree+0x20>
 800865a:	218f      	movs	r1, #143	@ 0x8f
 800865c:	4b08      	ldr	r3, [pc, #32]	@ (8008680 <_Bfree+0x3c>)
 800865e:	4809      	ldr	r0, [pc, #36]	@ (8008684 <_Bfree+0x40>)
 8008660:	f000 fc20 	bl	8008ea4 <__assert_func>
 8008664:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008668:	6006      	str	r6, [r0, #0]
 800866a:	60c6      	str	r6, [r0, #12]
 800866c:	b13c      	cbz	r4, 800867e <_Bfree+0x3a>
 800866e:	69eb      	ldr	r3, [r5, #28]
 8008670:	6862      	ldr	r2, [r4, #4]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008678:	6021      	str	r1, [r4, #0]
 800867a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800867e:	bd70      	pop	{r4, r5, r6, pc}
 8008680:	08009749 	.word	0x08009749
 8008684:	080097da 	.word	0x080097da

08008688 <__multadd>:
 8008688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800868c:	4607      	mov	r7, r0
 800868e:	460c      	mov	r4, r1
 8008690:	461e      	mov	r6, r3
 8008692:	2000      	movs	r0, #0
 8008694:	690d      	ldr	r5, [r1, #16]
 8008696:	f101 0c14 	add.w	ip, r1, #20
 800869a:	f8dc 3000 	ldr.w	r3, [ip]
 800869e:	3001      	adds	r0, #1
 80086a0:	b299      	uxth	r1, r3
 80086a2:	fb02 6101 	mla	r1, r2, r1, r6
 80086a6:	0c1e      	lsrs	r6, r3, #16
 80086a8:	0c0b      	lsrs	r3, r1, #16
 80086aa:	fb02 3306 	mla	r3, r2, r6, r3
 80086ae:	b289      	uxth	r1, r1
 80086b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086b4:	4285      	cmp	r5, r0
 80086b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086ba:	f84c 1b04 	str.w	r1, [ip], #4
 80086be:	dcec      	bgt.n	800869a <__multadd+0x12>
 80086c0:	b30e      	cbz	r6, 8008706 <__multadd+0x7e>
 80086c2:	68a3      	ldr	r3, [r4, #8]
 80086c4:	42ab      	cmp	r3, r5
 80086c6:	dc19      	bgt.n	80086fc <__multadd+0x74>
 80086c8:	6861      	ldr	r1, [r4, #4]
 80086ca:	4638      	mov	r0, r7
 80086cc:	3101      	adds	r1, #1
 80086ce:	f7ff ff79 	bl	80085c4 <_Balloc>
 80086d2:	4680      	mov	r8, r0
 80086d4:	b928      	cbnz	r0, 80086e2 <__multadd+0x5a>
 80086d6:	4602      	mov	r2, r0
 80086d8:	21ba      	movs	r1, #186	@ 0xba
 80086da:	4b0c      	ldr	r3, [pc, #48]	@ (800870c <__multadd+0x84>)
 80086dc:	480c      	ldr	r0, [pc, #48]	@ (8008710 <__multadd+0x88>)
 80086de:	f000 fbe1 	bl	8008ea4 <__assert_func>
 80086e2:	6922      	ldr	r2, [r4, #16]
 80086e4:	f104 010c 	add.w	r1, r4, #12
 80086e8:	3202      	adds	r2, #2
 80086ea:	0092      	lsls	r2, r2, #2
 80086ec:	300c      	adds	r0, #12
 80086ee:	f000 fbcb 	bl	8008e88 <memcpy>
 80086f2:	4621      	mov	r1, r4
 80086f4:	4638      	mov	r0, r7
 80086f6:	f7ff ffa5 	bl	8008644 <_Bfree>
 80086fa:	4644      	mov	r4, r8
 80086fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008700:	3501      	adds	r5, #1
 8008702:	615e      	str	r6, [r3, #20]
 8008704:	6125      	str	r5, [r4, #16]
 8008706:	4620      	mov	r0, r4
 8008708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800870c:	080097b8 	.word	0x080097b8
 8008710:	080097da 	.word	0x080097da

08008714 <__hi0bits>:
 8008714:	4603      	mov	r3, r0
 8008716:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800871a:	bf3a      	itte	cc
 800871c:	0403      	lslcc	r3, r0, #16
 800871e:	2010      	movcc	r0, #16
 8008720:	2000      	movcs	r0, #0
 8008722:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008726:	bf3c      	itt	cc
 8008728:	021b      	lslcc	r3, r3, #8
 800872a:	3008      	addcc	r0, #8
 800872c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008730:	bf3c      	itt	cc
 8008732:	011b      	lslcc	r3, r3, #4
 8008734:	3004      	addcc	r0, #4
 8008736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800873a:	bf3c      	itt	cc
 800873c:	009b      	lslcc	r3, r3, #2
 800873e:	3002      	addcc	r0, #2
 8008740:	2b00      	cmp	r3, #0
 8008742:	db05      	blt.n	8008750 <__hi0bits+0x3c>
 8008744:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008748:	f100 0001 	add.w	r0, r0, #1
 800874c:	bf08      	it	eq
 800874e:	2020      	moveq	r0, #32
 8008750:	4770      	bx	lr

08008752 <__lo0bits>:
 8008752:	6803      	ldr	r3, [r0, #0]
 8008754:	4602      	mov	r2, r0
 8008756:	f013 0007 	ands.w	r0, r3, #7
 800875a:	d00b      	beq.n	8008774 <__lo0bits+0x22>
 800875c:	07d9      	lsls	r1, r3, #31
 800875e:	d421      	bmi.n	80087a4 <__lo0bits+0x52>
 8008760:	0798      	lsls	r0, r3, #30
 8008762:	bf49      	itett	mi
 8008764:	085b      	lsrmi	r3, r3, #1
 8008766:	089b      	lsrpl	r3, r3, #2
 8008768:	2001      	movmi	r0, #1
 800876a:	6013      	strmi	r3, [r2, #0]
 800876c:	bf5c      	itt	pl
 800876e:	2002      	movpl	r0, #2
 8008770:	6013      	strpl	r3, [r2, #0]
 8008772:	4770      	bx	lr
 8008774:	b299      	uxth	r1, r3
 8008776:	b909      	cbnz	r1, 800877c <__lo0bits+0x2a>
 8008778:	2010      	movs	r0, #16
 800877a:	0c1b      	lsrs	r3, r3, #16
 800877c:	b2d9      	uxtb	r1, r3
 800877e:	b909      	cbnz	r1, 8008784 <__lo0bits+0x32>
 8008780:	3008      	adds	r0, #8
 8008782:	0a1b      	lsrs	r3, r3, #8
 8008784:	0719      	lsls	r1, r3, #28
 8008786:	bf04      	itt	eq
 8008788:	091b      	lsreq	r3, r3, #4
 800878a:	3004      	addeq	r0, #4
 800878c:	0799      	lsls	r1, r3, #30
 800878e:	bf04      	itt	eq
 8008790:	089b      	lsreq	r3, r3, #2
 8008792:	3002      	addeq	r0, #2
 8008794:	07d9      	lsls	r1, r3, #31
 8008796:	d403      	bmi.n	80087a0 <__lo0bits+0x4e>
 8008798:	085b      	lsrs	r3, r3, #1
 800879a:	f100 0001 	add.w	r0, r0, #1
 800879e:	d003      	beq.n	80087a8 <__lo0bits+0x56>
 80087a0:	6013      	str	r3, [r2, #0]
 80087a2:	4770      	bx	lr
 80087a4:	2000      	movs	r0, #0
 80087a6:	4770      	bx	lr
 80087a8:	2020      	movs	r0, #32
 80087aa:	4770      	bx	lr

080087ac <__i2b>:
 80087ac:	b510      	push	{r4, lr}
 80087ae:	460c      	mov	r4, r1
 80087b0:	2101      	movs	r1, #1
 80087b2:	f7ff ff07 	bl	80085c4 <_Balloc>
 80087b6:	4602      	mov	r2, r0
 80087b8:	b928      	cbnz	r0, 80087c6 <__i2b+0x1a>
 80087ba:	f240 1145 	movw	r1, #325	@ 0x145
 80087be:	4b04      	ldr	r3, [pc, #16]	@ (80087d0 <__i2b+0x24>)
 80087c0:	4804      	ldr	r0, [pc, #16]	@ (80087d4 <__i2b+0x28>)
 80087c2:	f000 fb6f 	bl	8008ea4 <__assert_func>
 80087c6:	2301      	movs	r3, #1
 80087c8:	6144      	str	r4, [r0, #20]
 80087ca:	6103      	str	r3, [r0, #16]
 80087cc:	bd10      	pop	{r4, pc}
 80087ce:	bf00      	nop
 80087d0:	080097b8 	.word	0x080097b8
 80087d4:	080097da 	.word	0x080097da

080087d8 <__multiply>:
 80087d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087dc:	4614      	mov	r4, r2
 80087de:	690a      	ldr	r2, [r1, #16]
 80087e0:	6923      	ldr	r3, [r4, #16]
 80087e2:	460f      	mov	r7, r1
 80087e4:	429a      	cmp	r2, r3
 80087e6:	bfa2      	ittt	ge
 80087e8:	4623      	movge	r3, r4
 80087ea:	460c      	movge	r4, r1
 80087ec:	461f      	movge	r7, r3
 80087ee:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80087f2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80087f6:	68a3      	ldr	r3, [r4, #8]
 80087f8:	6861      	ldr	r1, [r4, #4]
 80087fa:	eb0a 0609 	add.w	r6, sl, r9
 80087fe:	42b3      	cmp	r3, r6
 8008800:	b085      	sub	sp, #20
 8008802:	bfb8      	it	lt
 8008804:	3101      	addlt	r1, #1
 8008806:	f7ff fedd 	bl	80085c4 <_Balloc>
 800880a:	b930      	cbnz	r0, 800881a <__multiply+0x42>
 800880c:	4602      	mov	r2, r0
 800880e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008812:	4b43      	ldr	r3, [pc, #268]	@ (8008920 <__multiply+0x148>)
 8008814:	4843      	ldr	r0, [pc, #268]	@ (8008924 <__multiply+0x14c>)
 8008816:	f000 fb45 	bl	8008ea4 <__assert_func>
 800881a:	f100 0514 	add.w	r5, r0, #20
 800881e:	462b      	mov	r3, r5
 8008820:	2200      	movs	r2, #0
 8008822:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008826:	4543      	cmp	r3, r8
 8008828:	d321      	bcc.n	800886e <__multiply+0x96>
 800882a:	f107 0114 	add.w	r1, r7, #20
 800882e:	f104 0214 	add.w	r2, r4, #20
 8008832:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008836:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800883a:	9302      	str	r3, [sp, #8]
 800883c:	1b13      	subs	r3, r2, r4
 800883e:	3b15      	subs	r3, #21
 8008840:	f023 0303 	bic.w	r3, r3, #3
 8008844:	3304      	adds	r3, #4
 8008846:	f104 0715 	add.w	r7, r4, #21
 800884a:	42ba      	cmp	r2, r7
 800884c:	bf38      	it	cc
 800884e:	2304      	movcc	r3, #4
 8008850:	9301      	str	r3, [sp, #4]
 8008852:	9b02      	ldr	r3, [sp, #8]
 8008854:	9103      	str	r1, [sp, #12]
 8008856:	428b      	cmp	r3, r1
 8008858:	d80c      	bhi.n	8008874 <__multiply+0x9c>
 800885a:	2e00      	cmp	r6, #0
 800885c:	dd03      	ble.n	8008866 <__multiply+0x8e>
 800885e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008862:	2b00      	cmp	r3, #0
 8008864:	d05a      	beq.n	800891c <__multiply+0x144>
 8008866:	6106      	str	r6, [r0, #16]
 8008868:	b005      	add	sp, #20
 800886a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886e:	f843 2b04 	str.w	r2, [r3], #4
 8008872:	e7d8      	b.n	8008826 <__multiply+0x4e>
 8008874:	f8b1 a000 	ldrh.w	sl, [r1]
 8008878:	f1ba 0f00 	cmp.w	sl, #0
 800887c:	d023      	beq.n	80088c6 <__multiply+0xee>
 800887e:	46a9      	mov	r9, r5
 8008880:	f04f 0c00 	mov.w	ip, #0
 8008884:	f104 0e14 	add.w	lr, r4, #20
 8008888:	f85e 7b04 	ldr.w	r7, [lr], #4
 800888c:	f8d9 3000 	ldr.w	r3, [r9]
 8008890:	fa1f fb87 	uxth.w	fp, r7
 8008894:	b29b      	uxth	r3, r3
 8008896:	fb0a 330b 	mla	r3, sl, fp, r3
 800889a:	4463      	add	r3, ip
 800889c:	f8d9 c000 	ldr.w	ip, [r9]
 80088a0:	0c3f      	lsrs	r7, r7, #16
 80088a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80088a6:	fb0a c707 	mla	r7, sl, r7, ip
 80088aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80088b4:	4572      	cmp	r2, lr
 80088b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80088ba:	f849 3b04 	str.w	r3, [r9], #4
 80088be:	d8e3      	bhi.n	8008888 <__multiply+0xb0>
 80088c0:	9b01      	ldr	r3, [sp, #4]
 80088c2:	f845 c003 	str.w	ip, [r5, r3]
 80088c6:	9b03      	ldr	r3, [sp, #12]
 80088c8:	3104      	adds	r1, #4
 80088ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80088ce:	f1b9 0f00 	cmp.w	r9, #0
 80088d2:	d021      	beq.n	8008918 <__multiply+0x140>
 80088d4:	46ae      	mov	lr, r5
 80088d6:	f04f 0a00 	mov.w	sl, #0
 80088da:	682b      	ldr	r3, [r5, #0]
 80088dc:	f104 0c14 	add.w	ip, r4, #20
 80088e0:	f8bc b000 	ldrh.w	fp, [ip]
 80088e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	fb09 770b 	mla	r7, r9, fp, r7
 80088ee:	4457      	add	r7, sl
 80088f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80088f4:	f84e 3b04 	str.w	r3, [lr], #4
 80088f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80088fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008900:	f8be 3000 	ldrh.w	r3, [lr]
 8008904:	4562      	cmp	r2, ip
 8008906:	fb09 330a 	mla	r3, r9, sl, r3
 800890a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800890e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008912:	d8e5      	bhi.n	80088e0 <__multiply+0x108>
 8008914:	9f01      	ldr	r7, [sp, #4]
 8008916:	51eb      	str	r3, [r5, r7]
 8008918:	3504      	adds	r5, #4
 800891a:	e79a      	b.n	8008852 <__multiply+0x7a>
 800891c:	3e01      	subs	r6, #1
 800891e:	e79c      	b.n	800885a <__multiply+0x82>
 8008920:	080097b8 	.word	0x080097b8
 8008924:	080097da 	.word	0x080097da

08008928 <__pow5mult>:
 8008928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800892c:	4615      	mov	r5, r2
 800892e:	f012 0203 	ands.w	r2, r2, #3
 8008932:	4607      	mov	r7, r0
 8008934:	460e      	mov	r6, r1
 8008936:	d007      	beq.n	8008948 <__pow5mult+0x20>
 8008938:	4c25      	ldr	r4, [pc, #148]	@ (80089d0 <__pow5mult+0xa8>)
 800893a:	3a01      	subs	r2, #1
 800893c:	2300      	movs	r3, #0
 800893e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008942:	f7ff fea1 	bl	8008688 <__multadd>
 8008946:	4606      	mov	r6, r0
 8008948:	10ad      	asrs	r5, r5, #2
 800894a:	d03d      	beq.n	80089c8 <__pow5mult+0xa0>
 800894c:	69fc      	ldr	r4, [r7, #28]
 800894e:	b97c      	cbnz	r4, 8008970 <__pow5mult+0x48>
 8008950:	2010      	movs	r0, #16
 8008952:	f7ff fcd9 	bl	8008308 <malloc>
 8008956:	4602      	mov	r2, r0
 8008958:	61f8      	str	r0, [r7, #28]
 800895a:	b928      	cbnz	r0, 8008968 <__pow5mult+0x40>
 800895c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008960:	4b1c      	ldr	r3, [pc, #112]	@ (80089d4 <__pow5mult+0xac>)
 8008962:	481d      	ldr	r0, [pc, #116]	@ (80089d8 <__pow5mult+0xb0>)
 8008964:	f000 fa9e 	bl	8008ea4 <__assert_func>
 8008968:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800896c:	6004      	str	r4, [r0, #0]
 800896e:	60c4      	str	r4, [r0, #12]
 8008970:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008974:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008978:	b94c      	cbnz	r4, 800898e <__pow5mult+0x66>
 800897a:	f240 2171 	movw	r1, #625	@ 0x271
 800897e:	4638      	mov	r0, r7
 8008980:	f7ff ff14 	bl	80087ac <__i2b>
 8008984:	2300      	movs	r3, #0
 8008986:	4604      	mov	r4, r0
 8008988:	f8c8 0008 	str.w	r0, [r8, #8]
 800898c:	6003      	str	r3, [r0, #0]
 800898e:	f04f 0900 	mov.w	r9, #0
 8008992:	07eb      	lsls	r3, r5, #31
 8008994:	d50a      	bpl.n	80089ac <__pow5mult+0x84>
 8008996:	4631      	mov	r1, r6
 8008998:	4622      	mov	r2, r4
 800899a:	4638      	mov	r0, r7
 800899c:	f7ff ff1c 	bl	80087d8 <__multiply>
 80089a0:	4680      	mov	r8, r0
 80089a2:	4631      	mov	r1, r6
 80089a4:	4638      	mov	r0, r7
 80089a6:	f7ff fe4d 	bl	8008644 <_Bfree>
 80089aa:	4646      	mov	r6, r8
 80089ac:	106d      	asrs	r5, r5, #1
 80089ae:	d00b      	beq.n	80089c8 <__pow5mult+0xa0>
 80089b0:	6820      	ldr	r0, [r4, #0]
 80089b2:	b938      	cbnz	r0, 80089c4 <__pow5mult+0x9c>
 80089b4:	4622      	mov	r2, r4
 80089b6:	4621      	mov	r1, r4
 80089b8:	4638      	mov	r0, r7
 80089ba:	f7ff ff0d 	bl	80087d8 <__multiply>
 80089be:	6020      	str	r0, [r4, #0]
 80089c0:	f8c0 9000 	str.w	r9, [r0]
 80089c4:	4604      	mov	r4, r0
 80089c6:	e7e4      	b.n	8008992 <__pow5mult+0x6a>
 80089c8:	4630      	mov	r0, r6
 80089ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ce:	bf00      	nop
 80089d0:	08009834 	.word	0x08009834
 80089d4:	08009749 	.word	0x08009749
 80089d8:	080097da 	.word	0x080097da

080089dc <__lshift>:
 80089dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089e0:	460c      	mov	r4, r1
 80089e2:	4607      	mov	r7, r0
 80089e4:	4691      	mov	r9, r2
 80089e6:	6923      	ldr	r3, [r4, #16]
 80089e8:	6849      	ldr	r1, [r1, #4]
 80089ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089ee:	68a3      	ldr	r3, [r4, #8]
 80089f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089f4:	f108 0601 	add.w	r6, r8, #1
 80089f8:	42b3      	cmp	r3, r6
 80089fa:	db0b      	blt.n	8008a14 <__lshift+0x38>
 80089fc:	4638      	mov	r0, r7
 80089fe:	f7ff fde1 	bl	80085c4 <_Balloc>
 8008a02:	4605      	mov	r5, r0
 8008a04:	b948      	cbnz	r0, 8008a1a <__lshift+0x3e>
 8008a06:	4602      	mov	r2, r0
 8008a08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008a0c:	4b27      	ldr	r3, [pc, #156]	@ (8008aac <__lshift+0xd0>)
 8008a0e:	4828      	ldr	r0, [pc, #160]	@ (8008ab0 <__lshift+0xd4>)
 8008a10:	f000 fa48 	bl	8008ea4 <__assert_func>
 8008a14:	3101      	adds	r1, #1
 8008a16:	005b      	lsls	r3, r3, #1
 8008a18:	e7ee      	b.n	80089f8 <__lshift+0x1c>
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	f100 0114 	add.w	r1, r0, #20
 8008a20:	f100 0210 	add.w	r2, r0, #16
 8008a24:	4618      	mov	r0, r3
 8008a26:	4553      	cmp	r3, sl
 8008a28:	db33      	blt.n	8008a92 <__lshift+0xb6>
 8008a2a:	6920      	ldr	r0, [r4, #16]
 8008a2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a30:	f104 0314 	add.w	r3, r4, #20
 8008a34:	f019 091f 	ands.w	r9, r9, #31
 8008a38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a40:	d02b      	beq.n	8008a9a <__lshift+0xbe>
 8008a42:	468a      	mov	sl, r1
 8008a44:	2200      	movs	r2, #0
 8008a46:	f1c9 0e20 	rsb	lr, r9, #32
 8008a4a:	6818      	ldr	r0, [r3, #0]
 8008a4c:	fa00 f009 	lsl.w	r0, r0, r9
 8008a50:	4310      	orrs	r0, r2
 8008a52:	f84a 0b04 	str.w	r0, [sl], #4
 8008a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a5a:	459c      	cmp	ip, r3
 8008a5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a60:	d8f3      	bhi.n	8008a4a <__lshift+0x6e>
 8008a62:	ebac 0304 	sub.w	r3, ip, r4
 8008a66:	3b15      	subs	r3, #21
 8008a68:	f023 0303 	bic.w	r3, r3, #3
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	f104 0015 	add.w	r0, r4, #21
 8008a72:	4584      	cmp	ip, r0
 8008a74:	bf38      	it	cc
 8008a76:	2304      	movcc	r3, #4
 8008a78:	50ca      	str	r2, [r1, r3]
 8008a7a:	b10a      	cbz	r2, 8008a80 <__lshift+0xa4>
 8008a7c:	f108 0602 	add.w	r6, r8, #2
 8008a80:	3e01      	subs	r6, #1
 8008a82:	4638      	mov	r0, r7
 8008a84:	4621      	mov	r1, r4
 8008a86:	612e      	str	r6, [r5, #16]
 8008a88:	f7ff fddc 	bl	8008644 <_Bfree>
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a92:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a96:	3301      	adds	r3, #1
 8008a98:	e7c5      	b.n	8008a26 <__lshift+0x4a>
 8008a9a:	3904      	subs	r1, #4
 8008a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aa0:	459c      	cmp	ip, r3
 8008aa2:	f841 2f04 	str.w	r2, [r1, #4]!
 8008aa6:	d8f9      	bhi.n	8008a9c <__lshift+0xc0>
 8008aa8:	e7ea      	b.n	8008a80 <__lshift+0xa4>
 8008aaa:	bf00      	nop
 8008aac:	080097b8 	.word	0x080097b8
 8008ab0:	080097da 	.word	0x080097da

08008ab4 <__mcmp>:
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	690a      	ldr	r2, [r1, #16]
 8008ab8:	6900      	ldr	r0, [r0, #16]
 8008aba:	b530      	push	{r4, r5, lr}
 8008abc:	1a80      	subs	r0, r0, r2
 8008abe:	d10e      	bne.n	8008ade <__mcmp+0x2a>
 8008ac0:	3314      	adds	r3, #20
 8008ac2:	3114      	adds	r1, #20
 8008ac4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ac8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008acc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ad0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ad4:	4295      	cmp	r5, r2
 8008ad6:	d003      	beq.n	8008ae0 <__mcmp+0x2c>
 8008ad8:	d205      	bcs.n	8008ae6 <__mcmp+0x32>
 8008ada:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ade:	bd30      	pop	{r4, r5, pc}
 8008ae0:	42a3      	cmp	r3, r4
 8008ae2:	d3f3      	bcc.n	8008acc <__mcmp+0x18>
 8008ae4:	e7fb      	b.n	8008ade <__mcmp+0x2a>
 8008ae6:	2001      	movs	r0, #1
 8008ae8:	e7f9      	b.n	8008ade <__mcmp+0x2a>
	...

08008aec <__mdiff>:
 8008aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af0:	4689      	mov	r9, r1
 8008af2:	4606      	mov	r6, r0
 8008af4:	4611      	mov	r1, r2
 8008af6:	4648      	mov	r0, r9
 8008af8:	4614      	mov	r4, r2
 8008afa:	f7ff ffdb 	bl	8008ab4 <__mcmp>
 8008afe:	1e05      	subs	r5, r0, #0
 8008b00:	d112      	bne.n	8008b28 <__mdiff+0x3c>
 8008b02:	4629      	mov	r1, r5
 8008b04:	4630      	mov	r0, r6
 8008b06:	f7ff fd5d 	bl	80085c4 <_Balloc>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	b928      	cbnz	r0, 8008b1a <__mdiff+0x2e>
 8008b0e:	f240 2137 	movw	r1, #567	@ 0x237
 8008b12:	4b3e      	ldr	r3, [pc, #248]	@ (8008c0c <__mdiff+0x120>)
 8008b14:	483e      	ldr	r0, [pc, #248]	@ (8008c10 <__mdiff+0x124>)
 8008b16:	f000 f9c5 	bl	8008ea4 <__assert_func>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b20:	4610      	mov	r0, r2
 8008b22:	b003      	add	sp, #12
 8008b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b28:	bfbc      	itt	lt
 8008b2a:	464b      	movlt	r3, r9
 8008b2c:	46a1      	movlt	r9, r4
 8008b2e:	4630      	mov	r0, r6
 8008b30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008b34:	bfba      	itte	lt
 8008b36:	461c      	movlt	r4, r3
 8008b38:	2501      	movlt	r5, #1
 8008b3a:	2500      	movge	r5, #0
 8008b3c:	f7ff fd42 	bl	80085c4 <_Balloc>
 8008b40:	4602      	mov	r2, r0
 8008b42:	b918      	cbnz	r0, 8008b4c <__mdiff+0x60>
 8008b44:	f240 2145 	movw	r1, #581	@ 0x245
 8008b48:	4b30      	ldr	r3, [pc, #192]	@ (8008c0c <__mdiff+0x120>)
 8008b4a:	e7e3      	b.n	8008b14 <__mdiff+0x28>
 8008b4c:	f100 0b14 	add.w	fp, r0, #20
 8008b50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b54:	f109 0310 	add.w	r3, r9, #16
 8008b58:	60c5      	str	r5, [r0, #12]
 8008b5a:	f04f 0c00 	mov.w	ip, #0
 8008b5e:	f109 0514 	add.w	r5, r9, #20
 8008b62:	46d9      	mov	r9, fp
 8008b64:	6926      	ldr	r6, [r4, #16]
 8008b66:	f104 0e14 	add.w	lr, r4, #20
 8008b6a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b6e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b72:	9301      	str	r3, [sp, #4]
 8008b74:	9b01      	ldr	r3, [sp, #4]
 8008b76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b7e:	b281      	uxth	r1, r0
 8008b80:	9301      	str	r3, [sp, #4]
 8008b82:	fa1f f38a 	uxth.w	r3, sl
 8008b86:	1a5b      	subs	r3, r3, r1
 8008b88:	0c00      	lsrs	r0, r0, #16
 8008b8a:	4463      	add	r3, ip
 8008b8c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b90:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b9a:	4576      	cmp	r6, lr
 8008b9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ba0:	f849 3b04 	str.w	r3, [r9], #4
 8008ba4:	d8e6      	bhi.n	8008b74 <__mdiff+0x88>
 8008ba6:	1b33      	subs	r3, r6, r4
 8008ba8:	3b15      	subs	r3, #21
 8008baa:	f023 0303 	bic.w	r3, r3, #3
 8008bae:	3415      	adds	r4, #21
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	42a6      	cmp	r6, r4
 8008bb4:	bf38      	it	cc
 8008bb6:	2304      	movcc	r3, #4
 8008bb8:	441d      	add	r5, r3
 8008bba:	445b      	add	r3, fp
 8008bbc:	461e      	mov	r6, r3
 8008bbe:	462c      	mov	r4, r5
 8008bc0:	4544      	cmp	r4, r8
 8008bc2:	d30e      	bcc.n	8008be2 <__mdiff+0xf6>
 8008bc4:	f108 0103 	add.w	r1, r8, #3
 8008bc8:	1b49      	subs	r1, r1, r5
 8008bca:	f021 0103 	bic.w	r1, r1, #3
 8008bce:	3d03      	subs	r5, #3
 8008bd0:	45a8      	cmp	r8, r5
 8008bd2:	bf38      	it	cc
 8008bd4:	2100      	movcc	r1, #0
 8008bd6:	440b      	add	r3, r1
 8008bd8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008bdc:	b199      	cbz	r1, 8008c06 <__mdiff+0x11a>
 8008bde:	6117      	str	r7, [r2, #16]
 8008be0:	e79e      	b.n	8008b20 <__mdiff+0x34>
 8008be2:	46e6      	mov	lr, ip
 8008be4:	f854 1b04 	ldr.w	r1, [r4], #4
 8008be8:	fa1f fc81 	uxth.w	ip, r1
 8008bec:	44f4      	add	ip, lr
 8008bee:	0c08      	lsrs	r0, r1, #16
 8008bf0:	4471      	add	r1, lr
 8008bf2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008bf6:	b289      	uxth	r1, r1
 8008bf8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008bfc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c00:	f846 1b04 	str.w	r1, [r6], #4
 8008c04:	e7dc      	b.n	8008bc0 <__mdiff+0xd4>
 8008c06:	3f01      	subs	r7, #1
 8008c08:	e7e6      	b.n	8008bd8 <__mdiff+0xec>
 8008c0a:	bf00      	nop
 8008c0c:	080097b8 	.word	0x080097b8
 8008c10:	080097da 	.word	0x080097da

08008c14 <__d2b>:
 8008c14:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008c18:	2101      	movs	r1, #1
 8008c1a:	4690      	mov	r8, r2
 8008c1c:	4699      	mov	r9, r3
 8008c1e:	9e08      	ldr	r6, [sp, #32]
 8008c20:	f7ff fcd0 	bl	80085c4 <_Balloc>
 8008c24:	4604      	mov	r4, r0
 8008c26:	b930      	cbnz	r0, 8008c36 <__d2b+0x22>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	f240 310f 	movw	r1, #783	@ 0x30f
 8008c2e:	4b23      	ldr	r3, [pc, #140]	@ (8008cbc <__d2b+0xa8>)
 8008c30:	4823      	ldr	r0, [pc, #140]	@ (8008cc0 <__d2b+0xac>)
 8008c32:	f000 f937 	bl	8008ea4 <__assert_func>
 8008c36:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c3e:	b10d      	cbz	r5, 8008c44 <__d2b+0x30>
 8008c40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c44:	9301      	str	r3, [sp, #4]
 8008c46:	f1b8 0300 	subs.w	r3, r8, #0
 8008c4a:	d024      	beq.n	8008c96 <__d2b+0x82>
 8008c4c:	4668      	mov	r0, sp
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	f7ff fd7f 	bl	8008752 <__lo0bits>
 8008c54:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c58:	b1d8      	cbz	r0, 8008c92 <__d2b+0x7e>
 8008c5a:	f1c0 0320 	rsb	r3, r0, #32
 8008c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c62:	430b      	orrs	r3, r1
 8008c64:	40c2      	lsrs	r2, r0
 8008c66:	6163      	str	r3, [r4, #20]
 8008c68:	9201      	str	r2, [sp, #4]
 8008c6a:	9b01      	ldr	r3, [sp, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	bf0c      	ite	eq
 8008c70:	2201      	moveq	r2, #1
 8008c72:	2202      	movne	r2, #2
 8008c74:	61a3      	str	r3, [r4, #24]
 8008c76:	6122      	str	r2, [r4, #16]
 8008c78:	b1ad      	cbz	r5, 8008ca6 <__d2b+0x92>
 8008c7a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008c7e:	4405      	add	r5, r0
 8008c80:	6035      	str	r5, [r6, #0]
 8008c82:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c88:	6018      	str	r0, [r3, #0]
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	b002      	add	sp, #8
 8008c8e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008c92:	6161      	str	r1, [r4, #20]
 8008c94:	e7e9      	b.n	8008c6a <__d2b+0x56>
 8008c96:	a801      	add	r0, sp, #4
 8008c98:	f7ff fd5b 	bl	8008752 <__lo0bits>
 8008c9c:	9b01      	ldr	r3, [sp, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	6163      	str	r3, [r4, #20]
 8008ca2:	3020      	adds	r0, #32
 8008ca4:	e7e7      	b.n	8008c76 <__d2b+0x62>
 8008ca6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008caa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008cae:	6030      	str	r0, [r6, #0]
 8008cb0:	6918      	ldr	r0, [r3, #16]
 8008cb2:	f7ff fd2f 	bl	8008714 <__hi0bits>
 8008cb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008cba:	e7e4      	b.n	8008c86 <__d2b+0x72>
 8008cbc:	080097b8 	.word	0x080097b8
 8008cc0:	080097da 	.word	0x080097da

08008cc4 <__sread>:
 8008cc4:	b510      	push	{r4, lr}
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ccc:	f000 f8a8 	bl	8008e20 <_read_r>
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	bfab      	itete	ge
 8008cd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008cd6:	89a3      	ldrhlt	r3, [r4, #12]
 8008cd8:	181b      	addge	r3, r3, r0
 8008cda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008cde:	bfac      	ite	ge
 8008ce0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008ce2:	81a3      	strhlt	r3, [r4, #12]
 8008ce4:	bd10      	pop	{r4, pc}

08008ce6 <__swrite>:
 8008ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cea:	461f      	mov	r7, r3
 8008cec:	898b      	ldrh	r3, [r1, #12]
 8008cee:	4605      	mov	r5, r0
 8008cf0:	05db      	lsls	r3, r3, #23
 8008cf2:	460c      	mov	r4, r1
 8008cf4:	4616      	mov	r6, r2
 8008cf6:	d505      	bpl.n	8008d04 <__swrite+0x1e>
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d00:	f000 f87c 	bl	8008dfc <_lseek_r>
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	4632      	mov	r2, r6
 8008d08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d0c:	81a3      	strh	r3, [r4, #12]
 8008d0e:	4628      	mov	r0, r5
 8008d10:	463b      	mov	r3, r7
 8008d12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1a:	f000 b8a3 	b.w	8008e64 <_write_r>

08008d1e <__sseek>:
 8008d1e:	b510      	push	{r4, lr}
 8008d20:	460c      	mov	r4, r1
 8008d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d26:	f000 f869 	bl	8008dfc <_lseek_r>
 8008d2a:	1c43      	adds	r3, r0, #1
 8008d2c:	89a3      	ldrh	r3, [r4, #12]
 8008d2e:	bf15      	itete	ne
 8008d30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d3a:	81a3      	strheq	r3, [r4, #12]
 8008d3c:	bf18      	it	ne
 8008d3e:	81a3      	strhne	r3, [r4, #12]
 8008d40:	bd10      	pop	{r4, pc}

08008d42 <__sclose>:
 8008d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d46:	f000 b849 	b.w	8008ddc <_close_r>

08008d4a <_realloc_r>:
 8008d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d4e:	4680      	mov	r8, r0
 8008d50:	4615      	mov	r5, r2
 8008d52:	460c      	mov	r4, r1
 8008d54:	b921      	cbnz	r1, 8008d60 <_realloc_r+0x16>
 8008d56:	4611      	mov	r1, r2
 8008d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5c:	f7ff bafe 	b.w	800835c <_malloc_r>
 8008d60:	b92a      	cbnz	r2, 8008d6e <_realloc_r+0x24>
 8008d62:	f000 f8d1 	bl	8008f08 <_free_r>
 8008d66:	2400      	movs	r4, #0
 8008d68:	4620      	mov	r0, r4
 8008d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d6e:	f000 f925 	bl	8008fbc <_malloc_usable_size_r>
 8008d72:	4285      	cmp	r5, r0
 8008d74:	4606      	mov	r6, r0
 8008d76:	d802      	bhi.n	8008d7e <_realloc_r+0x34>
 8008d78:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d7c:	d8f4      	bhi.n	8008d68 <_realloc_r+0x1e>
 8008d7e:	4629      	mov	r1, r5
 8008d80:	4640      	mov	r0, r8
 8008d82:	f7ff faeb 	bl	800835c <_malloc_r>
 8008d86:	4607      	mov	r7, r0
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	d0ec      	beq.n	8008d66 <_realloc_r+0x1c>
 8008d8c:	42b5      	cmp	r5, r6
 8008d8e:	462a      	mov	r2, r5
 8008d90:	4621      	mov	r1, r4
 8008d92:	bf28      	it	cs
 8008d94:	4632      	movcs	r2, r6
 8008d96:	f000 f877 	bl	8008e88 <memcpy>
 8008d9a:	4621      	mov	r1, r4
 8008d9c:	4640      	mov	r0, r8
 8008d9e:	f000 f8b3 	bl	8008f08 <_free_r>
 8008da2:	463c      	mov	r4, r7
 8008da4:	e7e0      	b.n	8008d68 <_realloc_r+0x1e>

08008da6 <memmove>:
 8008da6:	4288      	cmp	r0, r1
 8008da8:	b510      	push	{r4, lr}
 8008daa:	eb01 0402 	add.w	r4, r1, r2
 8008dae:	d902      	bls.n	8008db6 <memmove+0x10>
 8008db0:	4284      	cmp	r4, r0
 8008db2:	4623      	mov	r3, r4
 8008db4:	d807      	bhi.n	8008dc6 <memmove+0x20>
 8008db6:	1e43      	subs	r3, r0, #1
 8008db8:	42a1      	cmp	r1, r4
 8008dba:	d008      	beq.n	8008dce <memmove+0x28>
 8008dbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dc0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dc4:	e7f8      	b.n	8008db8 <memmove+0x12>
 8008dc6:	4601      	mov	r1, r0
 8008dc8:	4402      	add	r2, r0
 8008dca:	428a      	cmp	r2, r1
 8008dcc:	d100      	bne.n	8008dd0 <memmove+0x2a>
 8008dce:	bd10      	pop	{r4, pc}
 8008dd0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dd4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dd8:	e7f7      	b.n	8008dca <memmove+0x24>
	...

08008ddc <_close_r>:
 8008ddc:	b538      	push	{r3, r4, r5, lr}
 8008dde:	2300      	movs	r3, #0
 8008de0:	4d05      	ldr	r5, [pc, #20]	@ (8008df8 <_close_r+0x1c>)
 8008de2:	4604      	mov	r4, r0
 8008de4:	4608      	mov	r0, r1
 8008de6:	602b      	str	r3, [r5, #0]
 8008de8:	f7f9 fbbb 	bl	8002562 <_close>
 8008dec:	1c43      	adds	r3, r0, #1
 8008dee:	d102      	bne.n	8008df6 <_close_r+0x1a>
 8008df0:	682b      	ldr	r3, [r5, #0]
 8008df2:	b103      	cbz	r3, 8008df6 <_close_r+0x1a>
 8008df4:	6023      	str	r3, [r4, #0]
 8008df6:	bd38      	pop	{r3, r4, r5, pc}
 8008df8:	200006b4 	.word	0x200006b4

08008dfc <_lseek_r>:
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	4604      	mov	r4, r0
 8008e00:	4608      	mov	r0, r1
 8008e02:	4611      	mov	r1, r2
 8008e04:	2200      	movs	r2, #0
 8008e06:	4d05      	ldr	r5, [pc, #20]	@ (8008e1c <_lseek_r+0x20>)
 8008e08:	602a      	str	r2, [r5, #0]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	f7f9 fbcd 	bl	80025aa <_lseek>
 8008e10:	1c43      	adds	r3, r0, #1
 8008e12:	d102      	bne.n	8008e1a <_lseek_r+0x1e>
 8008e14:	682b      	ldr	r3, [r5, #0]
 8008e16:	b103      	cbz	r3, 8008e1a <_lseek_r+0x1e>
 8008e18:	6023      	str	r3, [r4, #0]
 8008e1a:	bd38      	pop	{r3, r4, r5, pc}
 8008e1c:	200006b4 	.word	0x200006b4

08008e20 <_read_r>:
 8008e20:	b538      	push	{r3, r4, r5, lr}
 8008e22:	4604      	mov	r4, r0
 8008e24:	4608      	mov	r0, r1
 8008e26:	4611      	mov	r1, r2
 8008e28:	2200      	movs	r2, #0
 8008e2a:	4d05      	ldr	r5, [pc, #20]	@ (8008e40 <_read_r+0x20>)
 8008e2c:	602a      	str	r2, [r5, #0]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	f7f9 fb5e 	bl	80024f0 <_read>
 8008e34:	1c43      	adds	r3, r0, #1
 8008e36:	d102      	bne.n	8008e3e <_read_r+0x1e>
 8008e38:	682b      	ldr	r3, [r5, #0]
 8008e3a:	b103      	cbz	r3, 8008e3e <_read_r+0x1e>
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	bd38      	pop	{r3, r4, r5, pc}
 8008e40:	200006b4 	.word	0x200006b4

08008e44 <_sbrk_r>:
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	2300      	movs	r3, #0
 8008e48:	4d05      	ldr	r5, [pc, #20]	@ (8008e60 <_sbrk_r+0x1c>)
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	602b      	str	r3, [r5, #0]
 8008e50:	f7f9 fbb8 	bl	80025c4 <_sbrk>
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	d102      	bne.n	8008e5e <_sbrk_r+0x1a>
 8008e58:	682b      	ldr	r3, [r5, #0]
 8008e5a:	b103      	cbz	r3, 8008e5e <_sbrk_r+0x1a>
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	bd38      	pop	{r3, r4, r5, pc}
 8008e60:	200006b4 	.word	0x200006b4

08008e64 <_write_r>:
 8008e64:	b538      	push	{r3, r4, r5, lr}
 8008e66:	4604      	mov	r4, r0
 8008e68:	4608      	mov	r0, r1
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	4d05      	ldr	r5, [pc, #20]	@ (8008e84 <_write_r+0x20>)
 8008e70:	602a      	str	r2, [r5, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	f7f9 fb59 	bl	800252a <_write>
 8008e78:	1c43      	adds	r3, r0, #1
 8008e7a:	d102      	bne.n	8008e82 <_write_r+0x1e>
 8008e7c:	682b      	ldr	r3, [r5, #0]
 8008e7e:	b103      	cbz	r3, 8008e82 <_write_r+0x1e>
 8008e80:	6023      	str	r3, [r4, #0]
 8008e82:	bd38      	pop	{r3, r4, r5, pc}
 8008e84:	200006b4 	.word	0x200006b4

08008e88 <memcpy>:
 8008e88:	440a      	add	r2, r1
 8008e8a:	4291      	cmp	r1, r2
 8008e8c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008e90:	d100      	bne.n	8008e94 <memcpy+0xc>
 8008e92:	4770      	bx	lr
 8008e94:	b510      	push	{r4, lr}
 8008e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e9a:	4291      	cmp	r1, r2
 8008e9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ea0:	d1f9      	bne.n	8008e96 <memcpy+0xe>
 8008ea2:	bd10      	pop	{r4, pc}

08008ea4 <__assert_func>:
 8008ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ea6:	4614      	mov	r4, r2
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	4b09      	ldr	r3, [pc, #36]	@ (8008ed0 <__assert_func+0x2c>)
 8008eac:	4605      	mov	r5, r0
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68d8      	ldr	r0, [r3, #12]
 8008eb2:	b954      	cbnz	r4, 8008eca <__assert_func+0x26>
 8008eb4:	4b07      	ldr	r3, [pc, #28]	@ (8008ed4 <__assert_func+0x30>)
 8008eb6:	461c      	mov	r4, r3
 8008eb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ebc:	9100      	str	r1, [sp, #0]
 8008ebe:	462b      	mov	r3, r5
 8008ec0:	4905      	ldr	r1, [pc, #20]	@ (8008ed8 <__assert_func+0x34>)
 8008ec2:	f000 f883 	bl	8008fcc <fiprintf>
 8008ec6:	f000 f8a0 	bl	800900a <abort>
 8008eca:	4b04      	ldr	r3, [pc, #16]	@ (8008edc <__assert_func+0x38>)
 8008ecc:	e7f4      	b.n	8008eb8 <__assert_func+0x14>
 8008ece:	bf00      	nop
 8008ed0:	20000018 	.word	0x20000018
 8008ed4:	08009a76 	.word	0x08009a76
 8008ed8:	08009a48 	.word	0x08009a48
 8008edc:	08009a3b 	.word	0x08009a3b

08008ee0 <_calloc_r>:
 8008ee0:	b570      	push	{r4, r5, r6, lr}
 8008ee2:	fba1 5402 	umull	r5, r4, r1, r2
 8008ee6:	b93c      	cbnz	r4, 8008ef8 <_calloc_r+0x18>
 8008ee8:	4629      	mov	r1, r5
 8008eea:	f7ff fa37 	bl	800835c <_malloc_r>
 8008eee:	4606      	mov	r6, r0
 8008ef0:	b928      	cbnz	r0, 8008efe <_calloc_r+0x1e>
 8008ef2:	2600      	movs	r6, #0
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}
 8008ef8:	220c      	movs	r2, #12
 8008efa:	6002      	str	r2, [r0, #0]
 8008efc:	e7f9      	b.n	8008ef2 <_calloc_r+0x12>
 8008efe:	462a      	mov	r2, r5
 8008f00:	4621      	mov	r1, r4
 8008f02:	f7fe fa0e 	bl	8007322 <memset>
 8008f06:	e7f5      	b.n	8008ef4 <_calloc_r+0x14>

08008f08 <_free_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	2900      	cmp	r1, #0
 8008f0e:	d040      	beq.n	8008f92 <_free_r+0x8a>
 8008f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f14:	1f0c      	subs	r4, r1, #4
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	bfb8      	it	lt
 8008f1a:	18e4      	addlt	r4, r4, r3
 8008f1c:	f7ff fb46 	bl	80085ac <__malloc_lock>
 8008f20:	4a1c      	ldr	r2, [pc, #112]	@ (8008f94 <_free_r+0x8c>)
 8008f22:	6813      	ldr	r3, [r2, #0]
 8008f24:	b933      	cbnz	r3, 8008f34 <_free_r+0x2c>
 8008f26:	6063      	str	r3, [r4, #4]
 8008f28:	6014      	str	r4, [r2, #0]
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f30:	f7ff bb42 	b.w	80085b8 <__malloc_unlock>
 8008f34:	42a3      	cmp	r3, r4
 8008f36:	d908      	bls.n	8008f4a <_free_r+0x42>
 8008f38:	6820      	ldr	r0, [r4, #0]
 8008f3a:	1821      	adds	r1, r4, r0
 8008f3c:	428b      	cmp	r3, r1
 8008f3e:	bf01      	itttt	eq
 8008f40:	6819      	ldreq	r1, [r3, #0]
 8008f42:	685b      	ldreq	r3, [r3, #4]
 8008f44:	1809      	addeq	r1, r1, r0
 8008f46:	6021      	streq	r1, [r4, #0]
 8008f48:	e7ed      	b.n	8008f26 <_free_r+0x1e>
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	b10b      	cbz	r3, 8008f54 <_free_r+0x4c>
 8008f50:	42a3      	cmp	r3, r4
 8008f52:	d9fa      	bls.n	8008f4a <_free_r+0x42>
 8008f54:	6811      	ldr	r1, [r2, #0]
 8008f56:	1850      	adds	r0, r2, r1
 8008f58:	42a0      	cmp	r0, r4
 8008f5a:	d10b      	bne.n	8008f74 <_free_r+0x6c>
 8008f5c:	6820      	ldr	r0, [r4, #0]
 8008f5e:	4401      	add	r1, r0
 8008f60:	1850      	adds	r0, r2, r1
 8008f62:	4283      	cmp	r3, r0
 8008f64:	6011      	str	r1, [r2, #0]
 8008f66:	d1e0      	bne.n	8008f2a <_free_r+0x22>
 8008f68:	6818      	ldr	r0, [r3, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	4408      	add	r0, r1
 8008f6e:	6010      	str	r0, [r2, #0]
 8008f70:	6053      	str	r3, [r2, #4]
 8008f72:	e7da      	b.n	8008f2a <_free_r+0x22>
 8008f74:	d902      	bls.n	8008f7c <_free_r+0x74>
 8008f76:	230c      	movs	r3, #12
 8008f78:	602b      	str	r3, [r5, #0]
 8008f7a:	e7d6      	b.n	8008f2a <_free_r+0x22>
 8008f7c:	6820      	ldr	r0, [r4, #0]
 8008f7e:	1821      	adds	r1, r4, r0
 8008f80:	428b      	cmp	r3, r1
 8008f82:	bf01      	itttt	eq
 8008f84:	6819      	ldreq	r1, [r3, #0]
 8008f86:	685b      	ldreq	r3, [r3, #4]
 8008f88:	1809      	addeq	r1, r1, r0
 8008f8a:	6021      	streq	r1, [r4, #0]
 8008f8c:	6063      	str	r3, [r4, #4]
 8008f8e:	6054      	str	r4, [r2, #4]
 8008f90:	e7cb      	b.n	8008f2a <_free_r+0x22>
 8008f92:	bd38      	pop	{r3, r4, r5, pc}
 8008f94:	200006b0 	.word	0x200006b0

08008f98 <__ascii_mbtowc>:
 8008f98:	b082      	sub	sp, #8
 8008f9a:	b901      	cbnz	r1, 8008f9e <__ascii_mbtowc+0x6>
 8008f9c:	a901      	add	r1, sp, #4
 8008f9e:	b142      	cbz	r2, 8008fb2 <__ascii_mbtowc+0x1a>
 8008fa0:	b14b      	cbz	r3, 8008fb6 <__ascii_mbtowc+0x1e>
 8008fa2:	7813      	ldrb	r3, [r2, #0]
 8008fa4:	600b      	str	r3, [r1, #0]
 8008fa6:	7812      	ldrb	r2, [r2, #0]
 8008fa8:	1e10      	subs	r0, r2, #0
 8008faa:	bf18      	it	ne
 8008fac:	2001      	movne	r0, #1
 8008fae:	b002      	add	sp, #8
 8008fb0:	4770      	bx	lr
 8008fb2:	4610      	mov	r0, r2
 8008fb4:	e7fb      	b.n	8008fae <__ascii_mbtowc+0x16>
 8008fb6:	f06f 0001 	mvn.w	r0, #1
 8008fba:	e7f8      	b.n	8008fae <__ascii_mbtowc+0x16>

08008fbc <_malloc_usable_size_r>:
 8008fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fc0:	1f18      	subs	r0, r3, #4
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	bfbc      	itt	lt
 8008fc6:	580b      	ldrlt	r3, [r1, r0]
 8008fc8:	18c0      	addlt	r0, r0, r3
 8008fca:	4770      	bx	lr

08008fcc <fiprintf>:
 8008fcc:	b40e      	push	{r1, r2, r3}
 8008fce:	b503      	push	{r0, r1, lr}
 8008fd0:	4601      	mov	r1, r0
 8008fd2:	ab03      	add	r3, sp, #12
 8008fd4:	4805      	ldr	r0, [pc, #20]	@ (8008fec <fiprintf+0x20>)
 8008fd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fda:	6800      	ldr	r0, [r0, #0]
 8008fdc:	9301      	str	r3, [sp, #4]
 8008fde:	f000 f843 	bl	8009068 <_vfiprintf_r>
 8008fe2:	b002      	add	sp, #8
 8008fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fe8:	b003      	add	sp, #12
 8008fea:	4770      	bx	lr
 8008fec:	20000018 	.word	0x20000018

08008ff0 <__ascii_wctomb>:
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	4608      	mov	r0, r1
 8008ff4:	b141      	cbz	r1, 8009008 <__ascii_wctomb+0x18>
 8008ff6:	2aff      	cmp	r2, #255	@ 0xff
 8008ff8:	d904      	bls.n	8009004 <__ascii_wctomb+0x14>
 8008ffa:	228a      	movs	r2, #138	@ 0x8a
 8008ffc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009000:	601a      	str	r2, [r3, #0]
 8009002:	4770      	bx	lr
 8009004:	2001      	movs	r0, #1
 8009006:	700a      	strb	r2, [r1, #0]
 8009008:	4770      	bx	lr

0800900a <abort>:
 800900a:	2006      	movs	r0, #6
 800900c:	b508      	push	{r3, lr}
 800900e:	f000 fa83 	bl	8009518 <raise>
 8009012:	2001      	movs	r0, #1
 8009014:	f7f9 fa61 	bl	80024da <_exit>

08009018 <__sfputc_r>:
 8009018:	6893      	ldr	r3, [r2, #8]
 800901a:	b410      	push	{r4}
 800901c:	3b01      	subs	r3, #1
 800901e:	2b00      	cmp	r3, #0
 8009020:	6093      	str	r3, [r2, #8]
 8009022:	da07      	bge.n	8009034 <__sfputc_r+0x1c>
 8009024:	6994      	ldr	r4, [r2, #24]
 8009026:	42a3      	cmp	r3, r4
 8009028:	db01      	blt.n	800902e <__sfputc_r+0x16>
 800902a:	290a      	cmp	r1, #10
 800902c:	d102      	bne.n	8009034 <__sfputc_r+0x1c>
 800902e:	bc10      	pop	{r4}
 8009030:	f000 b932 	b.w	8009298 <__swbuf_r>
 8009034:	6813      	ldr	r3, [r2, #0]
 8009036:	1c58      	adds	r0, r3, #1
 8009038:	6010      	str	r0, [r2, #0]
 800903a:	7019      	strb	r1, [r3, #0]
 800903c:	4608      	mov	r0, r1
 800903e:	bc10      	pop	{r4}
 8009040:	4770      	bx	lr

08009042 <__sfputs_r>:
 8009042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009044:	4606      	mov	r6, r0
 8009046:	460f      	mov	r7, r1
 8009048:	4614      	mov	r4, r2
 800904a:	18d5      	adds	r5, r2, r3
 800904c:	42ac      	cmp	r4, r5
 800904e:	d101      	bne.n	8009054 <__sfputs_r+0x12>
 8009050:	2000      	movs	r0, #0
 8009052:	e007      	b.n	8009064 <__sfputs_r+0x22>
 8009054:	463a      	mov	r2, r7
 8009056:	4630      	mov	r0, r6
 8009058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800905c:	f7ff ffdc 	bl	8009018 <__sfputc_r>
 8009060:	1c43      	adds	r3, r0, #1
 8009062:	d1f3      	bne.n	800904c <__sfputs_r+0xa>
 8009064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009068 <_vfiprintf_r>:
 8009068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906c:	460d      	mov	r5, r1
 800906e:	4614      	mov	r4, r2
 8009070:	4698      	mov	r8, r3
 8009072:	4606      	mov	r6, r0
 8009074:	b09d      	sub	sp, #116	@ 0x74
 8009076:	b118      	cbz	r0, 8009080 <_vfiprintf_r+0x18>
 8009078:	6a03      	ldr	r3, [r0, #32]
 800907a:	b90b      	cbnz	r3, 8009080 <_vfiprintf_r+0x18>
 800907c:	f7fe f908 	bl	8007290 <__sinit>
 8009080:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009082:	07d9      	lsls	r1, r3, #31
 8009084:	d405      	bmi.n	8009092 <_vfiprintf_r+0x2a>
 8009086:	89ab      	ldrh	r3, [r5, #12]
 8009088:	059a      	lsls	r2, r3, #22
 800908a:	d402      	bmi.n	8009092 <_vfiprintf_r+0x2a>
 800908c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800908e:	f7fe f980 	bl	8007392 <__retarget_lock_acquire_recursive>
 8009092:	89ab      	ldrh	r3, [r5, #12]
 8009094:	071b      	lsls	r3, r3, #28
 8009096:	d501      	bpl.n	800909c <_vfiprintf_r+0x34>
 8009098:	692b      	ldr	r3, [r5, #16]
 800909a:	b99b      	cbnz	r3, 80090c4 <_vfiprintf_r+0x5c>
 800909c:	4629      	mov	r1, r5
 800909e:	4630      	mov	r0, r6
 80090a0:	f000 f938 	bl	8009314 <__swsetup_r>
 80090a4:	b170      	cbz	r0, 80090c4 <_vfiprintf_r+0x5c>
 80090a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090a8:	07dc      	lsls	r4, r3, #31
 80090aa:	d504      	bpl.n	80090b6 <_vfiprintf_r+0x4e>
 80090ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090b0:	b01d      	add	sp, #116	@ 0x74
 80090b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b6:	89ab      	ldrh	r3, [r5, #12]
 80090b8:	0598      	lsls	r0, r3, #22
 80090ba:	d4f7      	bmi.n	80090ac <_vfiprintf_r+0x44>
 80090bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090be:	f7fe f969 	bl	8007394 <__retarget_lock_release_recursive>
 80090c2:	e7f3      	b.n	80090ac <_vfiprintf_r+0x44>
 80090c4:	2300      	movs	r3, #0
 80090c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80090c8:	2320      	movs	r3, #32
 80090ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090ce:	2330      	movs	r3, #48	@ 0x30
 80090d0:	f04f 0901 	mov.w	r9, #1
 80090d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80090d8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009284 <_vfiprintf_r+0x21c>
 80090dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090e0:	4623      	mov	r3, r4
 80090e2:	469a      	mov	sl, r3
 80090e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090e8:	b10a      	cbz	r2, 80090ee <_vfiprintf_r+0x86>
 80090ea:	2a25      	cmp	r2, #37	@ 0x25
 80090ec:	d1f9      	bne.n	80090e2 <_vfiprintf_r+0x7a>
 80090ee:	ebba 0b04 	subs.w	fp, sl, r4
 80090f2:	d00b      	beq.n	800910c <_vfiprintf_r+0xa4>
 80090f4:	465b      	mov	r3, fp
 80090f6:	4622      	mov	r2, r4
 80090f8:	4629      	mov	r1, r5
 80090fa:	4630      	mov	r0, r6
 80090fc:	f7ff ffa1 	bl	8009042 <__sfputs_r>
 8009100:	3001      	adds	r0, #1
 8009102:	f000 80a7 	beq.w	8009254 <_vfiprintf_r+0x1ec>
 8009106:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009108:	445a      	add	r2, fp
 800910a:	9209      	str	r2, [sp, #36]	@ 0x24
 800910c:	f89a 3000 	ldrb.w	r3, [sl]
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 809f 	beq.w	8009254 <_vfiprintf_r+0x1ec>
 8009116:	2300      	movs	r3, #0
 8009118:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800911c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009120:	f10a 0a01 	add.w	sl, sl, #1
 8009124:	9304      	str	r3, [sp, #16]
 8009126:	9307      	str	r3, [sp, #28]
 8009128:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800912c:	931a      	str	r3, [sp, #104]	@ 0x68
 800912e:	4654      	mov	r4, sl
 8009130:	2205      	movs	r2, #5
 8009132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009136:	4853      	ldr	r0, [pc, #332]	@ (8009284 <_vfiprintf_r+0x21c>)
 8009138:	f7fe f92d 	bl	8007396 <memchr>
 800913c:	9a04      	ldr	r2, [sp, #16]
 800913e:	b9d8      	cbnz	r0, 8009178 <_vfiprintf_r+0x110>
 8009140:	06d1      	lsls	r1, r2, #27
 8009142:	bf44      	itt	mi
 8009144:	2320      	movmi	r3, #32
 8009146:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800914a:	0713      	lsls	r3, r2, #28
 800914c:	bf44      	itt	mi
 800914e:	232b      	movmi	r3, #43	@ 0x2b
 8009150:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009154:	f89a 3000 	ldrb.w	r3, [sl]
 8009158:	2b2a      	cmp	r3, #42	@ 0x2a
 800915a:	d015      	beq.n	8009188 <_vfiprintf_r+0x120>
 800915c:	4654      	mov	r4, sl
 800915e:	2000      	movs	r0, #0
 8009160:	f04f 0c0a 	mov.w	ip, #10
 8009164:	9a07      	ldr	r2, [sp, #28]
 8009166:	4621      	mov	r1, r4
 8009168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800916c:	3b30      	subs	r3, #48	@ 0x30
 800916e:	2b09      	cmp	r3, #9
 8009170:	d94b      	bls.n	800920a <_vfiprintf_r+0x1a2>
 8009172:	b1b0      	cbz	r0, 80091a2 <_vfiprintf_r+0x13a>
 8009174:	9207      	str	r2, [sp, #28]
 8009176:	e014      	b.n	80091a2 <_vfiprintf_r+0x13a>
 8009178:	eba0 0308 	sub.w	r3, r0, r8
 800917c:	fa09 f303 	lsl.w	r3, r9, r3
 8009180:	4313      	orrs	r3, r2
 8009182:	46a2      	mov	sl, r4
 8009184:	9304      	str	r3, [sp, #16]
 8009186:	e7d2      	b.n	800912e <_vfiprintf_r+0xc6>
 8009188:	9b03      	ldr	r3, [sp, #12]
 800918a:	1d19      	adds	r1, r3, #4
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	9103      	str	r1, [sp, #12]
 8009190:	2b00      	cmp	r3, #0
 8009192:	bfbb      	ittet	lt
 8009194:	425b      	neglt	r3, r3
 8009196:	f042 0202 	orrlt.w	r2, r2, #2
 800919a:	9307      	strge	r3, [sp, #28]
 800919c:	9307      	strlt	r3, [sp, #28]
 800919e:	bfb8      	it	lt
 80091a0:	9204      	strlt	r2, [sp, #16]
 80091a2:	7823      	ldrb	r3, [r4, #0]
 80091a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80091a6:	d10a      	bne.n	80091be <_vfiprintf_r+0x156>
 80091a8:	7863      	ldrb	r3, [r4, #1]
 80091aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80091ac:	d132      	bne.n	8009214 <_vfiprintf_r+0x1ac>
 80091ae:	9b03      	ldr	r3, [sp, #12]
 80091b0:	3402      	adds	r4, #2
 80091b2:	1d1a      	adds	r2, r3, #4
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	9203      	str	r2, [sp, #12]
 80091b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091bc:	9305      	str	r3, [sp, #20]
 80091be:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009288 <_vfiprintf_r+0x220>
 80091c2:	2203      	movs	r2, #3
 80091c4:	4650      	mov	r0, sl
 80091c6:	7821      	ldrb	r1, [r4, #0]
 80091c8:	f7fe f8e5 	bl	8007396 <memchr>
 80091cc:	b138      	cbz	r0, 80091de <_vfiprintf_r+0x176>
 80091ce:	2240      	movs	r2, #64	@ 0x40
 80091d0:	9b04      	ldr	r3, [sp, #16]
 80091d2:	eba0 000a 	sub.w	r0, r0, sl
 80091d6:	4082      	lsls	r2, r0
 80091d8:	4313      	orrs	r3, r2
 80091da:	3401      	adds	r4, #1
 80091dc:	9304      	str	r3, [sp, #16]
 80091de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e2:	2206      	movs	r2, #6
 80091e4:	4829      	ldr	r0, [pc, #164]	@ (800928c <_vfiprintf_r+0x224>)
 80091e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091ea:	f7fe f8d4 	bl	8007396 <memchr>
 80091ee:	2800      	cmp	r0, #0
 80091f0:	d03f      	beq.n	8009272 <_vfiprintf_r+0x20a>
 80091f2:	4b27      	ldr	r3, [pc, #156]	@ (8009290 <_vfiprintf_r+0x228>)
 80091f4:	bb1b      	cbnz	r3, 800923e <_vfiprintf_r+0x1d6>
 80091f6:	9b03      	ldr	r3, [sp, #12]
 80091f8:	3307      	adds	r3, #7
 80091fa:	f023 0307 	bic.w	r3, r3, #7
 80091fe:	3308      	adds	r3, #8
 8009200:	9303      	str	r3, [sp, #12]
 8009202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009204:	443b      	add	r3, r7
 8009206:	9309      	str	r3, [sp, #36]	@ 0x24
 8009208:	e76a      	b.n	80090e0 <_vfiprintf_r+0x78>
 800920a:	460c      	mov	r4, r1
 800920c:	2001      	movs	r0, #1
 800920e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009212:	e7a8      	b.n	8009166 <_vfiprintf_r+0xfe>
 8009214:	2300      	movs	r3, #0
 8009216:	f04f 0c0a 	mov.w	ip, #10
 800921a:	4619      	mov	r1, r3
 800921c:	3401      	adds	r4, #1
 800921e:	9305      	str	r3, [sp, #20]
 8009220:	4620      	mov	r0, r4
 8009222:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009226:	3a30      	subs	r2, #48	@ 0x30
 8009228:	2a09      	cmp	r2, #9
 800922a:	d903      	bls.n	8009234 <_vfiprintf_r+0x1cc>
 800922c:	2b00      	cmp	r3, #0
 800922e:	d0c6      	beq.n	80091be <_vfiprintf_r+0x156>
 8009230:	9105      	str	r1, [sp, #20]
 8009232:	e7c4      	b.n	80091be <_vfiprintf_r+0x156>
 8009234:	4604      	mov	r4, r0
 8009236:	2301      	movs	r3, #1
 8009238:	fb0c 2101 	mla	r1, ip, r1, r2
 800923c:	e7f0      	b.n	8009220 <_vfiprintf_r+0x1b8>
 800923e:	ab03      	add	r3, sp, #12
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	462a      	mov	r2, r5
 8009244:	4630      	mov	r0, r6
 8009246:	4b13      	ldr	r3, [pc, #76]	@ (8009294 <_vfiprintf_r+0x22c>)
 8009248:	a904      	add	r1, sp, #16
 800924a:	f7fd fbb7 	bl	80069bc <_printf_float>
 800924e:	4607      	mov	r7, r0
 8009250:	1c78      	adds	r0, r7, #1
 8009252:	d1d6      	bne.n	8009202 <_vfiprintf_r+0x19a>
 8009254:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009256:	07d9      	lsls	r1, r3, #31
 8009258:	d405      	bmi.n	8009266 <_vfiprintf_r+0x1fe>
 800925a:	89ab      	ldrh	r3, [r5, #12]
 800925c:	059a      	lsls	r2, r3, #22
 800925e:	d402      	bmi.n	8009266 <_vfiprintf_r+0x1fe>
 8009260:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009262:	f7fe f897 	bl	8007394 <__retarget_lock_release_recursive>
 8009266:	89ab      	ldrh	r3, [r5, #12]
 8009268:	065b      	lsls	r3, r3, #25
 800926a:	f53f af1f 	bmi.w	80090ac <_vfiprintf_r+0x44>
 800926e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009270:	e71e      	b.n	80090b0 <_vfiprintf_r+0x48>
 8009272:	ab03      	add	r3, sp, #12
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	462a      	mov	r2, r5
 8009278:	4630      	mov	r0, r6
 800927a:	4b06      	ldr	r3, [pc, #24]	@ (8009294 <_vfiprintf_r+0x22c>)
 800927c:	a904      	add	r1, sp, #16
 800927e:	f7fd fe3b 	bl	8006ef8 <_printf_i>
 8009282:	e7e4      	b.n	800924e <_vfiprintf_r+0x1e6>
 8009284:	080097c9 	.word	0x080097c9
 8009288:	080097cf 	.word	0x080097cf
 800928c:	080097d3 	.word	0x080097d3
 8009290:	080069bd 	.word	0x080069bd
 8009294:	08009043 	.word	0x08009043

08009298 <__swbuf_r>:
 8009298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929a:	460e      	mov	r6, r1
 800929c:	4614      	mov	r4, r2
 800929e:	4605      	mov	r5, r0
 80092a0:	b118      	cbz	r0, 80092aa <__swbuf_r+0x12>
 80092a2:	6a03      	ldr	r3, [r0, #32]
 80092a4:	b90b      	cbnz	r3, 80092aa <__swbuf_r+0x12>
 80092a6:	f7fd fff3 	bl	8007290 <__sinit>
 80092aa:	69a3      	ldr	r3, [r4, #24]
 80092ac:	60a3      	str	r3, [r4, #8]
 80092ae:	89a3      	ldrh	r3, [r4, #12]
 80092b0:	071a      	lsls	r2, r3, #28
 80092b2:	d501      	bpl.n	80092b8 <__swbuf_r+0x20>
 80092b4:	6923      	ldr	r3, [r4, #16]
 80092b6:	b943      	cbnz	r3, 80092ca <__swbuf_r+0x32>
 80092b8:	4621      	mov	r1, r4
 80092ba:	4628      	mov	r0, r5
 80092bc:	f000 f82a 	bl	8009314 <__swsetup_r>
 80092c0:	b118      	cbz	r0, 80092ca <__swbuf_r+0x32>
 80092c2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80092c6:	4638      	mov	r0, r7
 80092c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	6922      	ldr	r2, [r4, #16]
 80092ce:	b2f6      	uxtb	r6, r6
 80092d0:	1a98      	subs	r0, r3, r2
 80092d2:	6963      	ldr	r3, [r4, #20]
 80092d4:	4637      	mov	r7, r6
 80092d6:	4283      	cmp	r3, r0
 80092d8:	dc05      	bgt.n	80092e6 <__swbuf_r+0x4e>
 80092da:	4621      	mov	r1, r4
 80092dc:	4628      	mov	r0, r5
 80092de:	f7ff f93d 	bl	800855c <_fflush_r>
 80092e2:	2800      	cmp	r0, #0
 80092e4:	d1ed      	bne.n	80092c2 <__swbuf_r+0x2a>
 80092e6:	68a3      	ldr	r3, [r4, #8]
 80092e8:	3b01      	subs	r3, #1
 80092ea:	60a3      	str	r3, [r4, #8]
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	1c5a      	adds	r2, r3, #1
 80092f0:	6022      	str	r2, [r4, #0]
 80092f2:	701e      	strb	r6, [r3, #0]
 80092f4:	6962      	ldr	r2, [r4, #20]
 80092f6:	1c43      	adds	r3, r0, #1
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d004      	beq.n	8009306 <__swbuf_r+0x6e>
 80092fc:	89a3      	ldrh	r3, [r4, #12]
 80092fe:	07db      	lsls	r3, r3, #31
 8009300:	d5e1      	bpl.n	80092c6 <__swbuf_r+0x2e>
 8009302:	2e0a      	cmp	r6, #10
 8009304:	d1df      	bne.n	80092c6 <__swbuf_r+0x2e>
 8009306:	4621      	mov	r1, r4
 8009308:	4628      	mov	r0, r5
 800930a:	f7ff f927 	bl	800855c <_fflush_r>
 800930e:	2800      	cmp	r0, #0
 8009310:	d0d9      	beq.n	80092c6 <__swbuf_r+0x2e>
 8009312:	e7d6      	b.n	80092c2 <__swbuf_r+0x2a>

08009314 <__swsetup_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	4b29      	ldr	r3, [pc, #164]	@ (80093bc <__swsetup_r+0xa8>)
 8009318:	4605      	mov	r5, r0
 800931a:	6818      	ldr	r0, [r3, #0]
 800931c:	460c      	mov	r4, r1
 800931e:	b118      	cbz	r0, 8009328 <__swsetup_r+0x14>
 8009320:	6a03      	ldr	r3, [r0, #32]
 8009322:	b90b      	cbnz	r3, 8009328 <__swsetup_r+0x14>
 8009324:	f7fd ffb4 	bl	8007290 <__sinit>
 8009328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800932c:	0719      	lsls	r1, r3, #28
 800932e:	d422      	bmi.n	8009376 <__swsetup_r+0x62>
 8009330:	06da      	lsls	r2, r3, #27
 8009332:	d407      	bmi.n	8009344 <__swsetup_r+0x30>
 8009334:	2209      	movs	r2, #9
 8009336:	602a      	str	r2, [r5, #0]
 8009338:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800933c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009340:	81a3      	strh	r3, [r4, #12]
 8009342:	e033      	b.n	80093ac <__swsetup_r+0x98>
 8009344:	0758      	lsls	r0, r3, #29
 8009346:	d512      	bpl.n	800936e <__swsetup_r+0x5a>
 8009348:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800934a:	b141      	cbz	r1, 800935e <__swsetup_r+0x4a>
 800934c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009350:	4299      	cmp	r1, r3
 8009352:	d002      	beq.n	800935a <__swsetup_r+0x46>
 8009354:	4628      	mov	r0, r5
 8009356:	f7ff fdd7 	bl	8008f08 <_free_r>
 800935a:	2300      	movs	r3, #0
 800935c:	6363      	str	r3, [r4, #52]	@ 0x34
 800935e:	89a3      	ldrh	r3, [r4, #12]
 8009360:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009364:	81a3      	strh	r3, [r4, #12]
 8009366:	2300      	movs	r3, #0
 8009368:	6063      	str	r3, [r4, #4]
 800936a:	6923      	ldr	r3, [r4, #16]
 800936c:	6023      	str	r3, [r4, #0]
 800936e:	89a3      	ldrh	r3, [r4, #12]
 8009370:	f043 0308 	orr.w	r3, r3, #8
 8009374:	81a3      	strh	r3, [r4, #12]
 8009376:	6923      	ldr	r3, [r4, #16]
 8009378:	b94b      	cbnz	r3, 800938e <__swsetup_r+0x7a>
 800937a:	89a3      	ldrh	r3, [r4, #12]
 800937c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009384:	d003      	beq.n	800938e <__swsetup_r+0x7a>
 8009386:	4621      	mov	r1, r4
 8009388:	4628      	mov	r0, r5
 800938a:	f000 f83e 	bl	800940a <__smakebuf_r>
 800938e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009392:	f013 0201 	ands.w	r2, r3, #1
 8009396:	d00a      	beq.n	80093ae <__swsetup_r+0x9a>
 8009398:	2200      	movs	r2, #0
 800939a:	60a2      	str	r2, [r4, #8]
 800939c:	6962      	ldr	r2, [r4, #20]
 800939e:	4252      	negs	r2, r2
 80093a0:	61a2      	str	r2, [r4, #24]
 80093a2:	6922      	ldr	r2, [r4, #16]
 80093a4:	b942      	cbnz	r2, 80093b8 <__swsetup_r+0xa4>
 80093a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80093aa:	d1c5      	bne.n	8009338 <__swsetup_r+0x24>
 80093ac:	bd38      	pop	{r3, r4, r5, pc}
 80093ae:	0799      	lsls	r1, r3, #30
 80093b0:	bf58      	it	pl
 80093b2:	6962      	ldrpl	r2, [r4, #20]
 80093b4:	60a2      	str	r2, [r4, #8]
 80093b6:	e7f4      	b.n	80093a2 <__swsetup_r+0x8e>
 80093b8:	2000      	movs	r0, #0
 80093ba:	e7f7      	b.n	80093ac <__swsetup_r+0x98>
 80093bc:	20000018 	.word	0x20000018

080093c0 <__swhatbuf_r>:
 80093c0:	b570      	push	{r4, r5, r6, lr}
 80093c2:	460c      	mov	r4, r1
 80093c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c8:	4615      	mov	r5, r2
 80093ca:	2900      	cmp	r1, #0
 80093cc:	461e      	mov	r6, r3
 80093ce:	b096      	sub	sp, #88	@ 0x58
 80093d0:	da0c      	bge.n	80093ec <__swhatbuf_r+0x2c>
 80093d2:	89a3      	ldrh	r3, [r4, #12]
 80093d4:	2100      	movs	r1, #0
 80093d6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80093da:	bf14      	ite	ne
 80093dc:	2340      	movne	r3, #64	@ 0x40
 80093de:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80093e2:	2000      	movs	r0, #0
 80093e4:	6031      	str	r1, [r6, #0]
 80093e6:	602b      	str	r3, [r5, #0]
 80093e8:	b016      	add	sp, #88	@ 0x58
 80093ea:	bd70      	pop	{r4, r5, r6, pc}
 80093ec:	466a      	mov	r2, sp
 80093ee:	f000 f849 	bl	8009484 <_fstat_r>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	dbed      	blt.n	80093d2 <__swhatbuf_r+0x12>
 80093f6:	9901      	ldr	r1, [sp, #4]
 80093f8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80093fc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009400:	4259      	negs	r1, r3
 8009402:	4159      	adcs	r1, r3
 8009404:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009408:	e7eb      	b.n	80093e2 <__swhatbuf_r+0x22>

0800940a <__smakebuf_r>:
 800940a:	898b      	ldrh	r3, [r1, #12]
 800940c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800940e:	079d      	lsls	r5, r3, #30
 8009410:	4606      	mov	r6, r0
 8009412:	460c      	mov	r4, r1
 8009414:	d507      	bpl.n	8009426 <__smakebuf_r+0x1c>
 8009416:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	6123      	str	r3, [r4, #16]
 800941e:	2301      	movs	r3, #1
 8009420:	6163      	str	r3, [r4, #20]
 8009422:	b003      	add	sp, #12
 8009424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009426:	466a      	mov	r2, sp
 8009428:	ab01      	add	r3, sp, #4
 800942a:	f7ff ffc9 	bl	80093c0 <__swhatbuf_r>
 800942e:	9f00      	ldr	r7, [sp, #0]
 8009430:	4605      	mov	r5, r0
 8009432:	4639      	mov	r1, r7
 8009434:	4630      	mov	r0, r6
 8009436:	f7fe ff91 	bl	800835c <_malloc_r>
 800943a:	b948      	cbnz	r0, 8009450 <__smakebuf_r+0x46>
 800943c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009440:	059a      	lsls	r2, r3, #22
 8009442:	d4ee      	bmi.n	8009422 <__smakebuf_r+0x18>
 8009444:	f023 0303 	bic.w	r3, r3, #3
 8009448:	f043 0302 	orr.w	r3, r3, #2
 800944c:	81a3      	strh	r3, [r4, #12]
 800944e:	e7e2      	b.n	8009416 <__smakebuf_r+0xc>
 8009450:	89a3      	ldrh	r3, [r4, #12]
 8009452:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800945a:	81a3      	strh	r3, [r4, #12]
 800945c:	9b01      	ldr	r3, [sp, #4]
 800945e:	6020      	str	r0, [r4, #0]
 8009460:	b15b      	cbz	r3, 800947a <__smakebuf_r+0x70>
 8009462:	4630      	mov	r0, r6
 8009464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009468:	f000 f81e 	bl	80094a8 <_isatty_r>
 800946c:	b128      	cbz	r0, 800947a <__smakebuf_r+0x70>
 800946e:	89a3      	ldrh	r3, [r4, #12]
 8009470:	f023 0303 	bic.w	r3, r3, #3
 8009474:	f043 0301 	orr.w	r3, r3, #1
 8009478:	81a3      	strh	r3, [r4, #12]
 800947a:	89a3      	ldrh	r3, [r4, #12]
 800947c:	431d      	orrs	r5, r3
 800947e:	81a5      	strh	r5, [r4, #12]
 8009480:	e7cf      	b.n	8009422 <__smakebuf_r+0x18>
	...

08009484 <_fstat_r>:
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	2300      	movs	r3, #0
 8009488:	4d06      	ldr	r5, [pc, #24]	@ (80094a4 <_fstat_r+0x20>)
 800948a:	4604      	mov	r4, r0
 800948c:	4608      	mov	r0, r1
 800948e:	4611      	mov	r1, r2
 8009490:	602b      	str	r3, [r5, #0]
 8009492:	f7f9 f871 	bl	8002578 <_fstat>
 8009496:	1c43      	adds	r3, r0, #1
 8009498:	d102      	bne.n	80094a0 <_fstat_r+0x1c>
 800949a:	682b      	ldr	r3, [r5, #0]
 800949c:	b103      	cbz	r3, 80094a0 <_fstat_r+0x1c>
 800949e:	6023      	str	r3, [r4, #0]
 80094a0:	bd38      	pop	{r3, r4, r5, pc}
 80094a2:	bf00      	nop
 80094a4:	200006b4 	.word	0x200006b4

080094a8 <_isatty_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	2300      	movs	r3, #0
 80094ac:	4d05      	ldr	r5, [pc, #20]	@ (80094c4 <_isatty_r+0x1c>)
 80094ae:	4604      	mov	r4, r0
 80094b0:	4608      	mov	r0, r1
 80094b2:	602b      	str	r3, [r5, #0]
 80094b4:	f7f9 f86f 	bl	8002596 <_isatty>
 80094b8:	1c43      	adds	r3, r0, #1
 80094ba:	d102      	bne.n	80094c2 <_isatty_r+0x1a>
 80094bc:	682b      	ldr	r3, [r5, #0]
 80094be:	b103      	cbz	r3, 80094c2 <_isatty_r+0x1a>
 80094c0:	6023      	str	r3, [r4, #0]
 80094c2:	bd38      	pop	{r3, r4, r5, pc}
 80094c4:	200006b4 	.word	0x200006b4

080094c8 <_raise_r>:
 80094c8:	291f      	cmp	r1, #31
 80094ca:	b538      	push	{r3, r4, r5, lr}
 80094cc:	4605      	mov	r5, r0
 80094ce:	460c      	mov	r4, r1
 80094d0:	d904      	bls.n	80094dc <_raise_r+0x14>
 80094d2:	2316      	movs	r3, #22
 80094d4:	6003      	str	r3, [r0, #0]
 80094d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094da:	bd38      	pop	{r3, r4, r5, pc}
 80094dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80094de:	b112      	cbz	r2, 80094e6 <_raise_r+0x1e>
 80094e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094e4:	b94b      	cbnz	r3, 80094fa <_raise_r+0x32>
 80094e6:	4628      	mov	r0, r5
 80094e8:	f000 f830 	bl	800954c <_getpid_r>
 80094ec:	4622      	mov	r2, r4
 80094ee:	4601      	mov	r1, r0
 80094f0:	4628      	mov	r0, r5
 80094f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094f6:	f000 b817 	b.w	8009528 <_kill_r>
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d00a      	beq.n	8009514 <_raise_r+0x4c>
 80094fe:	1c59      	adds	r1, r3, #1
 8009500:	d103      	bne.n	800950a <_raise_r+0x42>
 8009502:	2316      	movs	r3, #22
 8009504:	6003      	str	r3, [r0, #0]
 8009506:	2001      	movs	r0, #1
 8009508:	e7e7      	b.n	80094da <_raise_r+0x12>
 800950a:	2100      	movs	r1, #0
 800950c:	4620      	mov	r0, r4
 800950e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009512:	4798      	blx	r3
 8009514:	2000      	movs	r0, #0
 8009516:	e7e0      	b.n	80094da <_raise_r+0x12>

08009518 <raise>:
 8009518:	4b02      	ldr	r3, [pc, #8]	@ (8009524 <raise+0xc>)
 800951a:	4601      	mov	r1, r0
 800951c:	6818      	ldr	r0, [r3, #0]
 800951e:	f7ff bfd3 	b.w	80094c8 <_raise_r>
 8009522:	bf00      	nop
 8009524:	20000018 	.word	0x20000018

08009528 <_kill_r>:
 8009528:	b538      	push	{r3, r4, r5, lr}
 800952a:	2300      	movs	r3, #0
 800952c:	4d06      	ldr	r5, [pc, #24]	@ (8009548 <_kill_r+0x20>)
 800952e:	4604      	mov	r4, r0
 8009530:	4608      	mov	r0, r1
 8009532:	4611      	mov	r1, r2
 8009534:	602b      	str	r3, [r5, #0]
 8009536:	f7f8 ffc0 	bl	80024ba <_kill>
 800953a:	1c43      	adds	r3, r0, #1
 800953c:	d102      	bne.n	8009544 <_kill_r+0x1c>
 800953e:	682b      	ldr	r3, [r5, #0]
 8009540:	b103      	cbz	r3, 8009544 <_kill_r+0x1c>
 8009542:	6023      	str	r3, [r4, #0]
 8009544:	bd38      	pop	{r3, r4, r5, pc}
 8009546:	bf00      	nop
 8009548:	200006b4 	.word	0x200006b4

0800954c <_getpid_r>:
 800954c:	f7f8 bfae 	b.w	80024ac <_getpid>

08009550 <_init>:
 8009550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009552:	bf00      	nop
 8009554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009556:	bc08      	pop	{r3}
 8009558:	469e      	mov	lr, r3
 800955a:	4770      	bx	lr

0800955c <_fini>:
 800955c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800955e:	bf00      	nop
 8009560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009562:	bc08      	pop	{r3}
 8009564:	469e      	mov	lr, r3
 8009566:	4770      	bx	lr
